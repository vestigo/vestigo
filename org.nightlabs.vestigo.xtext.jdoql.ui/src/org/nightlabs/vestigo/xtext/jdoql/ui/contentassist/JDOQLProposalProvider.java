/*
 * Vestigo - The JDO/JPA Query Tool And Browser - http://vestigo.nightlabs.com
 * Copyright Â© 2011-2012 NightLabs Consulting GmbH. All rights reserved.
 *
 * This program and all its libraries in the namespace "*.nightlabs.vestigo.*"
 * are proprietary software. Their source codes are trade secrets and therefore
 * must be kept confidential.
 *
 * The use of this software is subject to licence terms.
 *
 * Please see LICENCE.txt or
 * http://vestigo.nightlabs.com/latest-stable/about/licence.html for
 * more details.
 *
 * For further information, please contact NightLabs Consulting GmbH:
 * http://nightlabs.com
 */
/*
* generated by Xtext
*/
package org.nightlabs.vestigo.xtext.jdoql.ui.contentassist;

import java.util.List;
import java.util.SortedSet;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;
import org.nightlabs.vestigo.core.oda.ConnectionProfile;
import org.nightlabs.vestigo.core.oda.PersistableClass;
import org.nightlabs.vestigo.ui.editor.DocumentContextManager;
import org.nightlabs.vestigo.ui.editor.QueryEditorManager;
import org.nightlabs.vestigo.ui.queryparam.QueryParameter;
/**
 * see http://www.eclipse.org/Xtext/documentation/latest/xtext.html#contentAssist on how to customize content assistant
 */
public class JDOQLProposalProvider extends AbstractJDOQLProposalProvider
{
//	private static final Logger logger = LoggerFactory.getLogger(JDOQLProposalProvider.class);

	private JDOQLProposalProviderHelper helper = new JDOQLProposalProviderHelper(this);

	@Override
	public void complete_CandidateClassName(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor)
	{
		super.complete_CandidateClassName(model, ruleCall, context, acceptor);

		createCompletionProposalsFromCandidateClasses(context, acceptor);
	}

	@Override
	public void complete_ParameterName(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor)
	{
		super.complete_ParameterName(model, ruleCall, context, acceptor);

		QueryEditorManager queryEditorManager = DocumentContextManager.sharedInstance().getQueryEditorManager(context.getDocument(), true);
		for (QueryParameter queryParameter : queryEditorManager.getQueryParameterManager().getQueryParameters()) {
			acceptor.accept(createCompletionProposal(queryParameter.getName(), context));
		}
	}

	@Override
	public void completeParameterDeclaration_Type(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor)
	{
		super.completeParameterDeclaration_Type(model, assignment, context, acceptor);

		createCompletionProposalsFromCommonJavaClasses(context, acceptor);
		createCompletionProposalsFromCandidateClasses(context, acceptor);
	}

	@Override
	public void completeVariableDeclaration_Type(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor)
	{
		super.completeVariableDeclaration_Type(model, assignment, context, acceptor);

		createCompletionProposalsFromCommonJavaClasses(context, acceptor);
		createCompletionProposalsFromCandidateClasses(context, acceptor);
	}

	@Override
	public void complete_MethodExpression(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor)
	{
		super.complete_MethodExpression(model, ruleCall, context, acceptor);

		List<String> proposals = helper.getCurrentAliasAttributeProposals(context);
		for (String proposal : proposals) {
			acceptor.accept(createCompletionProposal(proposal, context));
		}
	}


	private static final Class<?>[] COMMON_JAVA_CLASSES = {
		boolean.class,
		byte.class,
		char.class,
		double.class,
		float.class,
		int.class,
		long.class,
		short.class,

		java.lang.Boolean.class,
		java.lang.Byte.class,
		java.lang.Character.class,
		java.lang.Double.class,
		java.lang.Float.class,
		java.lang.Integer.class,
		java.lang.Long.class,
		java.lang.Short.class,

		java.lang.String.class,

		java.math.BigInteger.class,
		java.math.BigDecimal.class,

		java.util.BitSet.class,
		java.util.Calendar.class,
		java.util.Currency.class,
		java.util.Date.class,
		java.util.GregorianCalendar.class,
		java.util.TimeZone.class,
		java.util.UUID.class

	};

	private void createCompletionProposalsFromCommonJavaClasses(ContentAssistContext context, ICompletionProposalAcceptor acceptor)
	{
		for (Class<?> clazz : COMMON_JAVA_CLASSES)
			acceptor.accept(createCompletionProposal(clazz.getName(), context));
	}

	private void createCompletionProposalsFromCandidateClasses(ContentAssistContext context, ICompletionProposalAcceptor acceptor)
	{
		QueryEditorManager queryEditorManager = DocumentContextManager.sharedInstance().getQueryEditorManager(context.getDocument(), true);
		ConnectionProfile vestigoConnectionProfile = queryEditorManager.getVestigoConnectionProfileAskingUserIfNecessary();
		if (vestigoConnectionProfile != null) {
			SortedSet<PersistableClass> classes = vestigoConnectionProfile.getQueryableCandidateClasses();
			for (PersistableClass persistableClass : classes)
				acceptor.accept(createCompletionProposal(persistableClass.getName(), context));
		}
	}
}
