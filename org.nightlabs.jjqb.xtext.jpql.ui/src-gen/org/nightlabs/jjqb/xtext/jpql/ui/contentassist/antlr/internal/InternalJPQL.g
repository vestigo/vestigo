/*
* generated by Xtext
*/
grammar InternalJPQL;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.nightlabs.jjqb.xtext.jpql.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.nightlabs.jjqb.xtext.jpql.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.nightlabs.jjqb.xtext.jpql.services.JPQLGrammarAccess;

}

@parser::members {
 
 	private JPQLGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(JPQLGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleQueryModule
entryRuleQueryModule 
:
{ before(grammarAccess.getQueryModuleRule()); }
	 ruleQueryModule
{ after(grammarAccess.getQueryModuleRule()); } 
	 EOF 
;

// Rule QueryModule
ruleQueryModule
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQueryModuleAccess().getGroup()); }
(rule__QueryModule__Group__0)
{ after(grammarAccess.getQueryModuleAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleImport
entryRuleImport 
:
{ before(grammarAccess.getImportRule()); }
	 ruleImport
{ after(grammarAccess.getImportRule()); } 
	 EOF 
;

// Rule Import
ruleImport
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getImportAccess().getGroup()); }
(rule__Import__Group__0)
{ after(grammarAccess.getImportAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNamedQuery
entryRuleNamedQuery 
:
{ before(grammarAccess.getNamedQueryRule()); }
	 ruleNamedQuery
{ after(grammarAccess.getNamedQueryRule()); } 
	 EOF 
;

// Rule NamedQuery
ruleNamedQuery
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNamedQueryAccess().getGroup()); }
(rule__NamedQuery__Group__0)
{ after(grammarAccess.getNamedQueryAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleJPQLQuery
entryRuleJPQLQuery 
:
{ before(grammarAccess.getJPQLQueryRule()); }
	 ruleJPQLQuery
{ after(grammarAccess.getJPQLQueryRule()); } 
	 EOF 
;

// Rule JPQLQuery
ruleJPQLQuery
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getJPQLQueryAccess().getAlternatives()); }
(rule__JPQLQuery__Alternatives)
{ after(grammarAccess.getJPQLQueryAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSelectStatement
entryRuleSelectStatement 
:
{ before(grammarAccess.getSelectStatementRule()); }
	 ruleSelectStatement
{ after(grammarAccess.getSelectStatementRule()); } 
	 EOF 
;

// Rule SelectStatement
ruleSelectStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSelectStatementAccess().getGroup()); }
(rule__SelectStatement__Group__0)
{ after(grammarAccess.getSelectStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleHavingClause
entryRuleHavingClause 
:
{ before(grammarAccess.getHavingClauseRule()); }
	 ruleHavingClause
{ after(grammarAccess.getHavingClauseRule()); } 
	 EOF 
;

// Rule HavingClause
ruleHavingClause
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getHavingClauseAccess().getGroup()); }
(rule__HavingClause__Group__0)
{ after(grammarAccess.getHavingClauseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOrderClause
entryRuleOrderClause 
:
{ before(grammarAccess.getOrderClauseRule()); }
	 ruleOrderClause
{ after(grammarAccess.getOrderClauseRule()); } 
	 EOF 
;

// Rule OrderClause
ruleOrderClause
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOrderClauseAccess().getGroup()); }
(rule__OrderClause__Group__0)
{ after(grammarAccess.getOrderClauseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOrderItem
entryRuleOrderItem 
:
{ before(grammarAccess.getOrderItemRule()); }
	 ruleOrderItem
{ after(grammarAccess.getOrderItemRule()); } 
	 EOF 
;

// Rule OrderItem
ruleOrderItem
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOrderItemAccess().getGroup()); }
(rule__OrderItem__Group__0)
{ after(grammarAccess.getOrderItemAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUpdateStatement
entryRuleUpdateStatement 
:
{ before(grammarAccess.getUpdateStatementRule()); }
	 ruleUpdateStatement
{ after(grammarAccess.getUpdateStatementRule()); } 
	 EOF 
;

// Rule UpdateStatement
ruleUpdateStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUpdateStatementAccess().getGroup()); }
(rule__UpdateStatement__Group__0)
{ after(grammarAccess.getUpdateStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUpdateClause
entryRuleUpdateClause 
:
{ before(grammarAccess.getUpdateClauseRule()); }
	 ruleUpdateClause
{ after(grammarAccess.getUpdateClauseRule()); } 
	 EOF 
;

// Rule UpdateClause
ruleUpdateClause
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUpdateClauseAccess().getGroup()); }
(rule__UpdateClause__Group__0)
{ after(grammarAccess.getUpdateClauseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSetClause
entryRuleSetClause 
:
{ before(grammarAccess.getSetClauseRule()); }
	 ruleSetClause
{ after(grammarAccess.getSetClauseRule()); } 
	 EOF 
;

// Rule SetClause
ruleSetClause
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSetClauseAccess().getGroup()); }
(rule__SetClause__Group__0)
{ after(grammarAccess.getSetClauseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUpdateItem
entryRuleUpdateItem 
:
{ before(grammarAccess.getUpdateItemRule()); }
	 ruleUpdateItem
{ after(grammarAccess.getUpdateItemRule()); } 
	 EOF 
;

// Rule UpdateItem
ruleUpdateItem
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUpdateItemAccess().getGroup()); }
(rule__UpdateItem__Group__0)
{ after(grammarAccess.getUpdateItemAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDeleteStatement
entryRuleDeleteStatement 
:
{ before(grammarAccess.getDeleteStatementRule()); }
	 ruleDeleteStatement
{ after(grammarAccess.getDeleteStatementRule()); } 
	 EOF 
;

// Rule DeleteStatement
ruleDeleteStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDeleteStatementAccess().getGroup()); }
(rule__DeleteStatement__Group__0)
{ after(grammarAccess.getDeleteStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDeleteClause
entryRuleDeleteClause 
:
{ before(grammarAccess.getDeleteClauseRule()); }
	 ruleDeleteClause
{ after(grammarAccess.getDeleteClauseRule()); } 
	 EOF 
;

// Rule DeleteClause
ruleDeleteClause
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDeleteClauseAccess().getGroup()); }
(rule__DeleteClause__Group__0)
{ after(grammarAccess.getDeleteClauseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSelectFromClause
entryRuleSelectFromClause 
:
{ before(grammarAccess.getSelectFromClauseRule()); }
	 ruleSelectFromClause
{ after(grammarAccess.getSelectFromClauseRule()); } 
	 EOF 
;

// Rule SelectFromClause
ruleSelectFromClause
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSelectFromClauseAccess().getGroup()); }
(rule__SelectFromClause__Group__0)
{ after(grammarAccess.getSelectFromClauseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSelectClause
entryRuleSelectClause 
:
{ before(grammarAccess.getSelectClauseRule()); }
	 ruleSelectClause
{ after(grammarAccess.getSelectClauseRule()); } 
	 EOF 
;

// Rule SelectClause
ruleSelectClause
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSelectClauseAccess().getGroup()); }
(rule__SelectClause__Group__0)
{ after(grammarAccess.getSelectClauseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSelectExpression
entryRuleSelectExpression 
:
{ before(grammarAccess.getSelectExpressionRule()); }
	 ruleSelectExpression
{ after(grammarAccess.getSelectExpressionRule()); } 
	 EOF 
;

// Rule SelectExpression
ruleSelectExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSelectExpressionAccess().getAlternatives()); }
(rule__SelectExpression__Alternatives)
{ after(grammarAccess.getSelectExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSelectAggregateExpression
entryRuleSelectAggregateExpression 
:
{ before(grammarAccess.getSelectAggregateExpressionRule()); }
	 ruleSelectAggregateExpression
{ after(grammarAccess.getSelectAggregateExpressionRule()); } 
	 EOF 
;

// Rule SelectAggregateExpression
ruleSelectAggregateExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSelectAggregateExpressionAccess().getAlternatives()); }
(rule__SelectAggregateExpression__Alternatives)
{ after(grammarAccess.getSelectAggregateExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAvgAggregate
entryRuleAvgAggregate 
:
{ before(grammarAccess.getAvgAggregateRule()); }
	 ruleAvgAggregate
{ after(grammarAccess.getAvgAggregateRule()); } 
	 EOF 
;

// Rule AvgAggregate
ruleAvgAggregate
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAvgAggregateAccess().getGroup()); }
(rule__AvgAggregate__Group__0)
{ after(grammarAccess.getAvgAggregateAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMaxAggregate
entryRuleMaxAggregate 
:
{ before(grammarAccess.getMaxAggregateRule()); }
	 ruleMaxAggregate
{ after(grammarAccess.getMaxAggregateRule()); } 
	 EOF 
;

// Rule MaxAggregate
ruleMaxAggregate
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMaxAggregateAccess().getGroup()); }
(rule__MaxAggregate__Group__0)
{ after(grammarAccess.getMaxAggregateAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMinAggregate
entryRuleMinAggregate 
:
{ before(grammarAccess.getMinAggregateRule()); }
	 ruleMinAggregate
{ after(grammarAccess.getMinAggregateRule()); } 
	 EOF 
;

// Rule MinAggregate
ruleMinAggregate
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMinAggregateAccess().getGroup()); }
(rule__MinAggregate__Group__0)
{ after(grammarAccess.getMinAggregateAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSumAggregate
entryRuleSumAggregate 
:
{ before(grammarAccess.getSumAggregateRule()); }
	 ruleSumAggregate
{ after(grammarAccess.getSumAggregateRule()); } 
	 EOF 
;

// Rule SumAggregate
ruleSumAggregate
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSumAggregateAccess().getGroup()); }
(rule__SumAggregate__Group__0)
{ after(grammarAccess.getSumAggregateAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCountAggregate
entryRuleCountAggregate 
:
{ before(grammarAccess.getCountAggregateRule()); }
	 ruleCountAggregate
{ after(grammarAccess.getCountAggregateRule()); } 
	 EOF 
;

// Rule CountAggregate
ruleCountAggregate
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCountAggregateAccess().getGroup()); }
(rule__CountAggregate__Group__0)
{ after(grammarAccess.getCountAggregateAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSelectConstructorExpression
entryRuleSelectConstructorExpression 
:
{ before(grammarAccess.getSelectConstructorExpressionRule()); }
	 ruleSelectConstructorExpression
{ after(grammarAccess.getSelectConstructorExpressionRule()); } 
	 EOF 
;

// Rule SelectConstructorExpression
ruleSelectConstructorExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSelectConstructorExpressionAccess().getGroup()); }
(rule__SelectConstructorExpression__Group__0)
{ after(grammarAccess.getSelectConstructorExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFromClause
entryRuleFromClause 
:
{ before(grammarAccess.getFromClauseRule()); }
	 ruleFromClause
{ after(grammarAccess.getFromClauseRule()); } 
	 EOF 
;

// Rule FromClause
ruleFromClause
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFromClauseAccess().getGroup()); }
(rule__FromClause__Group__0)
{ after(grammarAccess.getFromClauseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFromEntry
entryRuleFromEntry 
:
{ before(grammarAccess.getFromEntryRule()); }
	 ruleFromEntry
{ after(grammarAccess.getFromEntryRule()); } 
	 EOF 
;

// Rule FromEntry
ruleFromEntry
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFromEntryAccess().getAlternatives()); }
(rule__FromEntry__Alternatives)
{ after(grammarAccess.getFromEntryAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariableDeclaration
entryRuleVariableDeclaration 
:
{ before(grammarAccess.getVariableDeclarationRule()); }
	 ruleVariableDeclaration
{ after(grammarAccess.getVariableDeclarationRule()); } 
	 EOF 
;

// Rule VariableDeclaration
ruleVariableDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableDeclarationAccess().getGroup()); }
(rule__VariableDeclaration__Group__0)
{ after(grammarAccess.getVariableDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFromClass
entryRuleFromClass 
:
{ before(grammarAccess.getFromClassRule()); }
	 ruleFromClass
{ after(grammarAccess.getFromClassRule()); } 
	 EOF 
;

// Rule FromClass
ruleFromClass
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFromClassAccess().getAlternatives()); }
(rule__FromClass__Alternatives)
{ after(grammarAccess.getFromClassAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFromClassId
entryRuleFromClassId 
:
{ before(grammarAccess.getFromClassIdRule()); }
	 ruleFromClassId
{ after(grammarAccess.getFromClassIdRule()); } 
	 EOF 
;

// Rule FromClassId
ruleFromClassId
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFromClassIdAccess().getTypeAssignment()); }
(rule__FromClassId__TypeAssignment)
{ after(grammarAccess.getFromClassIdAccess().getTypeAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFromClassVar
entryRuleFromClassVar 
:
{ before(grammarAccess.getFromClassVarRule()); }
	 ruleFromClassVar
{ after(grammarAccess.getFromClassVarRule()); } 
	 EOF 
;

// Rule FromClassVar
ruleFromClassVar
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFromClassVarAccess().getGroup()); }
(rule__FromClassVar__Group__0)
{ after(grammarAccess.getFromClassVarAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFromCollection
entryRuleFromCollection 
:
{ before(grammarAccess.getFromCollectionRule()); }
	 ruleFromCollection
{ after(grammarAccess.getFromCollectionRule()); } 
	 EOF 
;

// Rule FromCollection
ruleFromCollection
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFromCollectionAccess().getGroup()); }
(rule__FromCollection__Group__0)
{ after(grammarAccess.getFromCollectionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFromJoin
entryRuleFromJoin 
:
{ before(grammarAccess.getFromJoinRule()); }
	 ruleFromJoin
{ after(grammarAccess.getFromJoinRule()); } 
	 EOF 
;

// Rule FromJoin
ruleFromJoin
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFromJoinAccess().getAlternatives()); }
(rule__FromJoin__Alternatives)
{ after(grammarAccess.getFromJoinAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleJoin
entryRuleJoin 
:
{ before(grammarAccess.getJoinRule()); }
	 ruleJoin
{ after(grammarAccess.getJoinRule()); } 
	 EOF 
;

// Rule Join
ruleJoin
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getJoinAccess().getGroup()); }
(rule__Join__Group__0)
{ after(grammarAccess.getJoinAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLeftJoin
entryRuleLeftJoin 
:
{ before(grammarAccess.getLeftJoinRule()); }
	 ruleLeftJoin
{ after(grammarAccess.getLeftJoinRule()); } 
	 EOF 
;

// Rule LeftJoin
ruleLeftJoin
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLeftJoinAccess().getGroup()); }
(rule__LeftJoin__Group__0)
{ after(grammarAccess.getLeftJoinAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInnerJoin
entryRuleInnerJoin 
:
{ before(grammarAccess.getInnerJoinRule()); }
	 ruleInnerJoin
{ after(grammarAccess.getInnerJoinRule()); } 
	 EOF 
;

// Rule InnerJoin
ruleInnerJoin
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInnerJoinAccess().getGroup()); }
(rule__InnerJoin__Group__0)
{ after(grammarAccess.getInnerJoinAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleWhereClause
entryRuleWhereClause 
:
{ before(grammarAccess.getWhereClauseRule()); }
	 ruleWhereClause
{ after(grammarAccess.getWhereClauseRule()); } 
	 EOF 
;

// Rule WhereClause
ruleWhereClause
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getWhereClauseAccess().getGroup()); }
(rule__WhereClause__Group__0)
{ after(grammarAccess.getWhereClauseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOrExpression
entryRuleOrExpression 
:
{ before(grammarAccess.getOrExpressionRule()); }
	 ruleOrExpression
{ after(grammarAccess.getOrExpressionRule()); } 
	 EOF 
;

// Rule OrExpression
ruleOrExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOrExpressionAccess().getGroup()); }
(rule__OrExpression__Group__0)
{ after(grammarAccess.getOrExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAndExpression
entryRuleAndExpression 
:
{ before(grammarAccess.getAndExpressionRule()); }
	 ruleAndExpression
{ after(grammarAccess.getAndExpressionRule()); } 
	 EOF 
;

// Rule AndExpression
ruleAndExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAndExpressionAccess().getGroup()); }
(rule__AndExpression__Group__0)
{ after(grammarAccess.getAndExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConcreteExpression
entryRuleConcreteExpression 
:
{ before(grammarAccess.getConcreteExpressionRule()); }
	 ruleConcreteExpression
{ after(grammarAccess.getConcreteExpressionRule()); } 
	 EOF 
;

// Rule ConcreteExpression
ruleConcreteExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConcreteExpressionAccess().getAlternatives()); }
(rule__ConcreteExpression__Alternatives)
{ after(grammarAccess.getConcreteExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParExpression
entryRuleParExpression 
:
{ before(grammarAccess.getParExpressionRule()); }
	 ruleParExpression
{ after(grammarAccess.getParExpressionRule()); } 
	 EOF 
;

// Rule ParExpression
ruleParExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParExpressionAccess().getGroup()); }
(rule__ParExpression__Group__0)
{ after(grammarAccess.getParExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOperatorExpression
entryRuleOperatorExpression 
:
{ before(grammarAccess.getOperatorExpressionRule()); }
	 ruleOperatorExpression
{ after(grammarAccess.getOperatorExpressionRule()); } 
	 EOF 
;

// Rule OperatorExpression
ruleOperatorExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOperatorExpressionAccess().getGroup()); }
(rule__OperatorExpression__Group__0)
{ after(grammarAccess.getOperatorExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExistsExpression
entryRuleExistsExpression 
:
{ before(grammarAccess.getExistsExpressionRule()); }
	 ruleExistsExpression
{ after(grammarAccess.getExistsExpressionRule()); } 
	 EOF 
;

// Rule ExistsExpression
ruleExistsExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExistsExpressionAccess().getGroup()); }
(rule__ExistsExpression__Group__0)
{ after(grammarAccess.getExistsExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAllExpression
entryRuleAllExpression 
:
{ before(grammarAccess.getAllExpressionRule()); }
	 ruleAllExpression
{ after(grammarAccess.getAllExpressionRule()); } 
	 EOF 
;

// Rule AllExpression
ruleAllExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAllExpressionAccess().getGroup()); }
(rule__AllExpression__Group__0)
{ after(grammarAccess.getAllExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAnyExpression
entryRuleAnyExpression 
:
{ before(grammarAccess.getAnyExpressionRule()); }
	 ruleAnyExpression
{ after(grammarAccess.getAnyExpressionRule()); } 
	 EOF 
;

// Rule AnyExpression
ruleAnyExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAnyExpressionAccess().getGroup()); }
(rule__AnyExpression__Group__0)
{ after(grammarAccess.getAnyExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSomeExpression
entryRuleSomeExpression 
:
{ before(grammarAccess.getSomeExpressionRule()); }
	 ruleSomeExpression
{ after(grammarAccess.getSomeExpressionRule()); } 
	 EOF 
;

// Rule SomeExpression
ruleSomeExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSomeExpressionAccess().getGroup()); }
(rule__SomeExpression__Group__0)
{ after(grammarAccess.getSomeExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCollectionExpression
entryRuleCollectionExpression 
:
{ before(grammarAccess.getCollectionExpressionRule()); }
	 ruleCollectionExpression
{ after(grammarAccess.getCollectionExpressionRule()); } 
	 EOF 
;

// Rule CollectionExpression
ruleCollectionExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCollectionExpressionAccess().getGroup()); }
(rule__CollectionExpression__Group__0)
{ after(grammarAccess.getCollectionExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNullComparisonExpression
entryRuleNullComparisonExpression 
:
{ before(grammarAccess.getNullComparisonExpressionRule()); }
	 ruleNullComparisonExpression
{ after(grammarAccess.getNullComparisonExpressionRule()); } 
	 EOF 
;

// Rule NullComparisonExpression
ruleNullComparisonExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNullComparisonExpressionAccess().getGroup()); }
(rule__NullComparisonExpression__Group__0)
{ after(grammarAccess.getNullComparisonExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEmptyComparisonExpression
entryRuleEmptyComparisonExpression 
:
{ before(grammarAccess.getEmptyComparisonExpressionRule()); }
	 ruleEmptyComparisonExpression
{ after(grammarAccess.getEmptyComparisonExpressionRule()); } 
	 EOF 
;

// Rule EmptyComparisonExpression
ruleEmptyComparisonExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEmptyComparisonExpressionAccess().getGroup()); }
(rule__EmptyComparisonExpression__Group__0)
{ after(grammarAccess.getEmptyComparisonExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLikeExpression
entryRuleLikeExpression 
:
{ before(grammarAccess.getLikeExpressionRule()); }
	 ruleLikeExpression
{ after(grammarAccess.getLikeExpressionRule()); } 
	 EOF 
;

// Rule LikeExpression
ruleLikeExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLikeExpressionAccess().getGroup()); }
(rule__LikeExpression__Group__0)
{ after(grammarAccess.getLikeExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInExpression
entryRuleInExpression 
:
{ before(grammarAccess.getInExpressionRule()); }
	 ruleInExpression
{ after(grammarAccess.getInExpressionRule()); } 
	 EOF 
;

// Rule InExpression
ruleInExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInExpressionAccess().getAlternatives()); }
(rule__InExpression__Alternatives)
{ after(grammarAccess.getInExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInSeqExpression
entryRuleInSeqExpression 
:
{ before(grammarAccess.getInSeqExpressionRule()); }
	 ruleInSeqExpression
{ after(grammarAccess.getInSeqExpressionRule()); } 
	 EOF 
;

// Rule InSeqExpression
ruleInSeqExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInSeqExpressionAccess().getGroup()); }
(rule__InSeqExpression__Group__0)
{ after(grammarAccess.getInSeqExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInQueryExpression
entryRuleInQueryExpression 
:
{ before(grammarAccess.getInQueryExpressionRule()); }
	 ruleInQueryExpression
{ after(grammarAccess.getInQueryExpressionRule()); } 
	 EOF 
;

// Rule InQueryExpression
ruleInQueryExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInQueryExpressionAccess().getGroup()); }
(rule__InQueryExpression__Group__0)
{ after(grammarAccess.getInQueryExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBetweenExpression
entryRuleBetweenExpression 
:
{ before(grammarAccess.getBetweenExpressionRule()); }
	 ruleBetweenExpression
{ after(grammarAccess.getBetweenExpressionRule()); } 
	 EOF 
;

// Rule BetweenExpression
ruleBetweenExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBetweenExpressionAccess().getGroup()); }
(rule__BetweenExpression__Group__0)
{ after(grammarAccess.getBetweenExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariable
entryRuleVariable 
:
{ before(grammarAccess.getVariableRule()); }
	 ruleVariable
{ after(grammarAccess.getVariableRule()); } 
	 EOF 
;

// Rule Variable
ruleVariable
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableAccess().getAlternatives()); }
(rule__Variable__Alternatives)
{ after(grammarAccess.getVariableAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpressionTerm
entryRuleExpressionTerm 
:
{ before(grammarAccess.getExpressionTermRule()); }
	 ruleExpressionTerm
{ after(grammarAccess.getExpressionTermRule()); } 
	 EOF 
;

// Rule ExpressionTerm
ruleExpressionTerm
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionTermAccess().getAlternatives()); }
(rule__ExpressionTerm__Alternatives)
{ after(grammarAccess.getExpressionTermAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAliasAttributeExpression
entryRuleAliasAttributeExpression 
:
{ before(grammarAccess.getAliasAttributeExpressionRule()); }
	 ruleAliasAttributeExpression
{ after(grammarAccess.getAliasAttributeExpressionRule()); } 
	 EOF 
;

// Rule AliasAttributeExpression
ruleAliasAttributeExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAliasAttributeExpressionAccess().getGroup()); }
(rule__AliasAttributeExpression__Group__0)
{ after(grammarAccess.getAliasAttributeExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParameterExpression
entryRuleParameterExpression 
:
{ before(grammarAccess.getParameterExpressionRule()); }
	 ruleParameterExpression
{ after(grammarAccess.getParameterExpressionRule()); } 
	 EOF 
;

// Rule ParameterExpression
ruleParameterExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParameterExpressionAccess().getGroup()); }
(rule__ParameterExpression__Group__0)
{ after(grammarAccess.getParameterExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleStringFunction
entryRuleStringFunction 
:
{ before(grammarAccess.getStringFunctionRule()); }
	 ruleStringFunction
{ after(grammarAccess.getStringFunctionRule()); } 
	 EOF 
;

// Rule StringFunction
ruleStringFunction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStringFunctionAccess().getGroup()); }
(rule__StringFunction__Group__0)
{ after(grammarAccess.getStringFunctionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStringFunctionName
entryRuleStringFunctionName 
:
{ before(grammarAccess.getStringFunctionNameRule()); }
	 ruleStringFunctionName
{ after(grammarAccess.getStringFunctionNameRule()); } 
	 EOF 
;

// Rule StringFunctionName
ruleStringFunctionName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStringFunctionNameAccess().getAlternatives()); }
(rule__StringFunctionName__Alternatives)
{ after(grammarAccess.getStringFunctionNameAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNumericFunction
entryRuleNumericFunction 
:
{ before(grammarAccess.getNumericFunctionRule()); }
	 ruleNumericFunction
{ after(grammarAccess.getNumericFunctionRule()); } 
	 EOF 
;

// Rule NumericFunction
ruleNumericFunction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNumericFunctionAccess().getGroup()); }
(rule__NumericFunction__Group__0)
{ after(grammarAccess.getNumericFunctionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNumericFunctionName
entryRuleNumericFunctionName 
:
{ before(grammarAccess.getNumericFunctionNameRule()); }
	 ruleNumericFunctionName
{ after(grammarAccess.getNumericFunctionNameRule()); } 
	 EOF 
;

// Rule NumericFunctionName
ruleNumericFunctionName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNumericFunctionNameAccess().getAlternatives()); }
(rule__NumericFunctionName__Alternatives)
{ after(grammarAccess.getNumericFunctionNameAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleValue
entryRuleValue 
:
{ before(grammarAccess.getValueRule()); }
	 ruleValue
{ after(grammarAccess.getValueRule()); } 
	 EOF 
;

// Rule Value
ruleValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getValueAccess().getAlternatives()); }
(rule__Value__Alternatives)
{ after(grammarAccess.getValueAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIntegerExpression
entryRuleIntegerExpression 
:
{ before(grammarAccess.getIntegerExpressionRule()); }
	 ruleIntegerExpression
{ after(grammarAccess.getIntegerExpressionRule()); } 
	 EOF 
;

// Rule IntegerExpression
ruleIntegerExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIntegerExpressionAccess().getValueAssignment()); }
(rule__IntegerExpression__ValueAssignment)
{ after(grammarAccess.getIntegerExpressionAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStringExpression
entryRuleStringExpression 
:
{ before(grammarAccess.getStringExpressionRule()); }
	 ruleStringExpression
{ after(grammarAccess.getStringExpressionRule()); } 
	 EOF 
;

// Rule StringExpression
ruleStringExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStringExpressionAccess().getValueAssignment()); }
(rule__StringExpression__ValueAssignment)
{ after(grammarAccess.getStringExpressionAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNullExpression
entryRuleNullExpression 
:
{ before(grammarAccess.getNullExpressionRule()); }
	 ruleNullExpression
{ after(grammarAccess.getNullExpressionRule()); } 
	 EOF 
;

// Rule NullExpression
ruleNullExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNullExpressionAccess().getValueAssignment()); }
(rule__NullExpression__ValueAssignment)
{ after(grammarAccess.getNullExpressionAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBooleanExpression
entryRuleBooleanExpression 
:
{ before(grammarAccess.getBooleanExpressionRule()); }
	 ruleBooleanExpression
{ after(grammarAccess.getBooleanExpressionRule()); } 
	 EOF 
;

// Rule BooleanExpression
ruleBooleanExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBooleanExpressionAccess().getValueAssignment()); }
(rule__BooleanExpression__ValueAssignment)
{ after(grammarAccess.getBooleanExpressionAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDateTimeExpression
entryRuleDateTimeExpression 
:
{ before(grammarAccess.getDateTimeExpressionRule()); }
	 ruleDateTimeExpression
{ after(grammarAccess.getDateTimeExpressionRule()); } 
	 EOF 
;

// Rule DateTimeExpression
ruleDateTimeExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDateTimeExpressionAccess().getValueAssignment()); }
(rule__DateTimeExpression__ValueAssignment)
{ after(grammarAccess.getDateTimeExpressionAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQueryExpression
entryRuleQueryExpression 
:
{ before(grammarAccess.getQueryExpressionRule()); }
	 ruleQueryExpression
{ after(grammarAccess.getQueryExpressionRule()); } 
	 EOF 
;

// Rule QueryExpression
ruleQueryExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQueryExpressionAccess().getGroup()); }
(rule__QueryExpression__Group__0)
{ after(grammarAccess.getQueryExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule Operator
ruleOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorAccess().getAlternatives()); }
(rule__Operator__Alternatives)
{ after(grammarAccess.getOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__JPQLQuery__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJPQLQueryAccess().getSelectStatementParserRuleCall_0()); }
	ruleSelectStatement
{ after(grammarAccess.getJPQLQueryAccess().getSelectStatementParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getJPQLQueryAccess().getUpdateStatementParserRuleCall_1()); }
	ruleUpdateStatement
{ after(grammarAccess.getJPQLQueryAccess().getUpdateStatementParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getJPQLQueryAccess().getDeleteStatementParserRuleCall_2()); }
	ruleDeleteStatement
{ after(grammarAccess.getJPQLQueryAccess().getDeleteStatementParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrderClause__Alternatives_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderClauseAccess().getIsAscAssignment_4_0()); }
(rule__OrderClause__IsAscAssignment_4_0)
{ after(grammarAccess.getOrderClauseAccess().getIsAscAssignment_4_0()); }
)

    |(
{ before(grammarAccess.getOrderClauseAccess().getIsDescAssignment_4_1()); }
(rule__OrderClause__IsDescAssignment_4_1)
{ after(grammarAccess.getOrderClauseAccess().getIsDescAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectExpressionAccess().getAliasAttributeExpressionParserRuleCall_0()); }
	ruleAliasAttributeExpression
{ after(grammarAccess.getSelectExpressionAccess().getAliasAttributeExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getSelectExpressionAccess().getSelectAggregateExpressionParserRuleCall_1()); }
	ruleSelectAggregateExpression
{ after(grammarAccess.getSelectExpressionAccess().getSelectAggregateExpressionParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getSelectExpressionAccess().getSelectConstructorExpressionParserRuleCall_2()); }
	ruleSelectConstructorExpression
{ after(grammarAccess.getSelectExpressionAccess().getSelectConstructorExpressionParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectAggregateExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectAggregateExpressionAccess().getAvgAggregateParserRuleCall_0()); }
	ruleAvgAggregate
{ after(grammarAccess.getSelectAggregateExpressionAccess().getAvgAggregateParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getSelectAggregateExpressionAccess().getMaxAggregateParserRuleCall_1()); }
	ruleMaxAggregate
{ after(grammarAccess.getSelectAggregateExpressionAccess().getMaxAggregateParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getSelectAggregateExpressionAccess().getMinAggregateParserRuleCall_2()); }
	ruleMinAggregate
{ after(grammarAccess.getSelectAggregateExpressionAccess().getMinAggregateParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getSelectAggregateExpressionAccess().getSumAggregateParserRuleCall_3()); }
	ruleSumAggregate
{ after(grammarAccess.getSelectAggregateExpressionAccess().getSumAggregateParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getSelectAggregateExpressionAccess().getCountAggregateParserRuleCall_4()); }
	ruleCountAggregate
{ after(grammarAccess.getSelectAggregateExpressionAccess().getCountAggregateParserRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FromEntry__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromEntryAccess().getFromClassParserRuleCall_0()); }
	ruleFromClass
{ after(grammarAccess.getFromEntryAccess().getFromClassParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getFromEntryAccess().getFromCollectionParserRuleCall_1()); }
	ruleFromCollection
{ after(grammarAccess.getFromEntryAccess().getFromCollectionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FromClass__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromClassAccess().getFromClassIdParserRuleCall_0()); }
	ruleFromClassId
{ after(grammarAccess.getFromClassAccess().getFromClassIdParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getFromClassAccess().getFromClassVarParserRuleCall_1()); }
	ruleFromClassVar
{ after(grammarAccess.getFromClassAccess().getFromClassVarParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FromJoin__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromJoinAccess().getJoinParserRuleCall_0()); }
	ruleJoin
{ after(grammarAccess.getFromJoinAccess().getJoinParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getFromJoinAccess().getLeftJoinParserRuleCall_1()); }
	ruleLeftJoin
{ after(grammarAccess.getFromJoinAccess().getLeftJoinParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getFromJoinAccess().getInnerJoinParserRuleCall_2()); }
	ruleInnerJoin
{ after(grammarAccess.getFromJoinAccess().getInnerJoinParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConcreteExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcreteExpressionAccess().getParExpressionParserRuleCall_0()); }
	ruleParExpression
{ after(grammarAccess.getConcreteExpressionAccess().getParExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getConcreteExpressionAccess().getOperatorExpressionParserRuleCall_1()); }
	ruleOperatorExpression
{ after(grammarAccess.getConcreteExpressionAccess().getOperatorExpressionParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getConcreteExpressionAccess().getExistsExpressionParserRuleCall_2()); }
	ruleExistsExpression
{ after(grammarAccess.getConcreteExpressionAccess().getExistsExpressionParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getConcreteExpressionAccess().getAllExpressionParserRuleCall_3()); }
	ruleAllExpression
{ after(grammarAccess.getConcreteExpressionAccess().getAllExpressionParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getConcreteExpressionAccess().getAnyExpressionParserRuleCall_4()); }
	ruleAnyExpression
{ after(grammarAccess.getConcreteExpressionAccess().getAnyExpressionParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getConcreteExpressionAccess().getSomeExpressionParserRuleCall_5()); }
	ruleSomeExpression
{ after(grammarAccess.getConcreteExpressionAccess().getSomeExpressionParserRuleCall_5()); }
)

    |(
{ before(grammarAccess.getConcreteExpressionAccess().getCollectionExpressionParserRuleCall_6()); }
	ruleCollectionExpression
{ after(grammarAccess.getConcreteExpressionAccess().getCollectionExpressionParserRuleCall_6()); }
)

    |(
{ before(grammarAccess.getConcreteExpressionAccess().getNullComparisonExpressionParserRuleCall_7()); }
	ruleNullComparisonExpression
{ after(grammarAccess.getConcreteExpressionAccess().getNullComparisonExpressionParserRuleCall_7()); }
)

    |(
{ before(grammarAccess.getConcreteExpressionAccess().getEmptyComparisonExpressionParserRuleCall_8()); }
	ruleEmptyComparisonExpression
{ after(grammarAccess.getConcreteExpressionAccess().getEmptyComparisonExpressionParserRuleCall_8()); }
)

    |(
{ before(grammarAccess.getConcreteExpressionAccess().getLikeExpressionParserRuleCall_9()); }
	ruleLikeExpression
{ after(grammarAccess.getConcreteExpressionAccess().getLikeExpressionParserRuleCall_9()); }
)

    |(
{ before(grammarAccess.getConcreteExpressionAccess().getInExpressionParserRuleCall_10()); }
	ruleInExpression
{ after(grammarAccess.getConcreteExpressionAccess().getInExpressionParserRuleCall_10()); }
)

    |(
{ before(grammarAccess.getConcreteExpressionAccess().getBetweenExpressionParserRuleCall_11()); }
	ruleBetweenExpression
{ after(grammarAccess.getConcreteExpressionAccess().getBetweenExpressionParserRuleCall_11()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInExpressionAccess().getInSeqExpressionParserRuleCall_0()); }
	ruleInSeqExpression
{ after(grammarAccess.getInExpressionAccess().getInSeqExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getInExpressionAccess().getInQueryExpressionParserRuleCall_1()); }
	ruleInQueryExpression
{ after(grammarAccess.getInExpressionAccess().getInQueryExpressionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAccess().getAliasAttributeExpressionParserRuleCall_0()); }
	ruleAliasAttributeExpression
{ after(grammarAccess.getVariableAccess().getAliasAttributeExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getVariableAccess().getParameterExpressionParserRuleCall_1()); }
	ruleParameterExpression
{ after(grammarAccess.getVariableAccess().getParameterExpressionParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getVariableAccess().getValueParserRuleCall_2()); }
	ruleValue
{ after(grammarAccess.getVariableAccess().getValueParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionTerm__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionTermAccess().getVariableParserRuleCall_0()); }
	ruleVariable
{ after(grammarAccess.getExpressionTermAccess().getVariableParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getExpressionTermAccess().getQueryExpressionParserRuleCall_1()); }
	ruleQueryExpression
{ after(grammarAccess.getExpressionTermAccess().getQueryExpressionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringFunctionName__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringFunctionNameAccess().getCONCATKeyword_0()); }

	'CONCAT' 

{ after(grammarAccess.getStringFunctionNameAccess().getCONCATKeyword_0()); }
)

    |(
{ before(grammarAccess.getStringFunctionNameAccess().getSUBSTRINGKeyword_1()); }

	'SUBSTRING' 

{ after(grammarAccess.getStringFunctionNameAccess().getSUBSTRINGKeyword_1()); }
)

    |(
{ before(grammarAccess.getStringFunctionNameAccess().getLOWERKeyword_2()); }

	'LOWER' 

{ after(grammarAccess.getStringFunctionNameAccess().getLOWERKeyword_2()); }
)

    |(
{ before(grammarAccess.getStringFunctionNameAccess().getUPPERKeyword_3()); }

	'UPPER' 

{ after(grammarAccess.getStringFunctionNameAccess().getUPPERKeyword_3()); }
)

    |(
{ before(grammarAccess.getStringFunctionNameAccess().getLENGTHKeyword_4()); }

	'LENGTH' 

{ after(grammarAccess.getStringFunctionNameAccess().getLENGTHKeyword_4()); }
)

    |(
{ before(grammarAccess.getStringFunctionNameAccess().getLOCATEKeyword_5()); }

	'LOCATE' 

{ after(grammarAccess.getStringFunctionNameAccess().getLOCATEKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumericFunctionName__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericFunctionNameAccess().getABSKeyword_0()); }

	'ABS' 

{ after(grammarAccess.getNumericFunctionNameAccess().getABSKeyword_0()); }
)

    |(
{ before(grammarAccess.getNumericFunctionNameAccess().getSQRTKeyword_1()); }

	'SQRT' 

{ after(grammarAccess.getNumericFunctionNameAccess().getSQRTKeyword_1()); }
)

    |(
{ before(grammarAccess.getNumericFunctionNameAccess().getMODKeyword_2()); }

	'MOD' 

{ after(grammarAccess.getNumericFunctionNameAccess().getMODKeyword_2()); }
)

    |(
{ before(grammarAccess.getNumericFunctionNameAccess().getSIZEKeyword_3()); }

	'SIZE' 

{ after(grammarAccess.getNumericFunctionNameAccess().getSIZEKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Value__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValueAccess().getIntegerExpressionParserRuleCall_0()); }
	ruleIntegerExpression
{ after(grammarAccess.getValueAccess().getIntegerExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getValueAccess().getStringExpressionParserRuleCall_1()); }
	ruleStringExpression
{ after(grammarAccess.getValueAccess().getStringExpressionParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getValueAccess().getNullExpressionParserRuleCall_2()); }
	ruleNullExpression
{ after(grammarAccess.getValueAccess().getNullExpressionParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getValueAccess().getBooleanExpressionParserRuleCall_3()); }
	ruleBooleanExpression
{ after(grammarAccess.getValueAccess().getBooleanExpressionParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getValueAccess().getDateTimeExpressionParserRuleCall_4()); }
	ruleDateTimeExpression
{ after(grammarAccess.getValueAccess().getDateTimeExpressionParserRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanExpression__ValueAlternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanExpressionAccess().getValueTRUEKeyword_0_0()); }

	'TRUE' 

{ after(grammarAccess.getBooleanExpressionAccess().getValueTRUEKeyword_0_0()); }
)

    |(
{ before(grammarAccess.getBooleanExpressionAccess().getValueFALSEKeyword_0_1()); }

	'FALSE' 

{ after(grammarAccess.getBooleanExpressionAccess().getValueFALSEKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Operator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorAccess().getLessThenEnumLiteralDeclaration_0()); }
(	'<' 
)
{ after(grammarAccess.getOperatorAccess().getLessThenEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getGreaterThenEnumLiteralDeclaration_1()); }
(	'>' 
)
{ after(grammarAccess.getOperatorAccess().getGreaterThenEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getLessEqualEnumLiteralDeclaration_2()); }
(	'<=' 
)
{ after(grammarAccess.getOperatorAccess().getLessEqualEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getGreaterEqualEnumLiteralDeclaration_3()); }
(	'>=' 
)
{ after(grammarAccess.getOperatorAccess().getGreaterEqualEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getEqualEnumLiteralDeclaration_4()); }
(	'=' 
)
{ after(grammarAccess.getOperatorAccess().getEqualEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getNotEqualEnumLiteralDeclaration_5()); }
(	'!=' 
)
{ after(grammarAccess.getOperatorAccess().getNotEqualEnumLiteralDeclaration_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__QueryModule__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QueryModule__Group__0__Impl
	rule__QueryModule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QueryModule__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQueryModuleAccess().getImportsAssignment_0()); }
(rule__QueryModule__ImportsAssignment_0)*
{ after(grammarAccess.getQueryModuleAccess().getImportsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QueryModule__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QueryModule__Group__1__Impl
	rule__QueryModule__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__QueryModule__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQueryModuleAccess().getDefaultQueryAssignment_1()); }
(rule__QueryModule__DefaultQueryAssignment_1)?
{ after(grammarAccess.getQueryModuleAccess().getDefaultQueryAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QueryModule__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QueryModule__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QueryModule__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQueryModuleAccess().getNamedQueriesAssignment_2()); }
(rule__QueryModule__NamedQueriesAssignment_2)*
{ after(grammarAccess.getQueryModuleAccess().getNamedQueriesAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Import__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import__Group__0__Impl
	rule__Import__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getIMPORTKeyword_0()); }

	'IMPORT' 

{ after(grammarAccess.getImportAccess().getIMPORTKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Import__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportURIAssignment_1()); }
(rule__Import__ImportURIAssignment_1)
{ after(grammarAccess.getImportAccess().getImportURIAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NamedQuery__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamedQuery__Group__0__Impl
	rule__NamedQuery__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NamedQuery__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamedQueryAccess().getNameAssignment_0()); }
(rule__NamedQuery__NameAssignment_0)
{ after(grammarAccess.getNamedQueryAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NamedQuery__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamedQuery__Group__1__Impl
	rule__NamedQuery__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NamedQuery__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamedQueryAccess().getColonKeyword_1()); }

	':' 

{ after(grammarAccess.getNamedQueryAccess().getColonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NamedQuery__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamedQuery__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NamedQuery__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamedQueryAccess().getQueryAssignment_2()); }
(rule__NamedQuery__QueryAssignment_2)
{ after(grammarAccess.getNamedQueryAccess().getQueryAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SelectStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectStatement__Group__0__Impl
	rule__SelectStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectStatementAccess().getSelectFromClauseAssignment_0()); }
(rule__SelectStatement__SelectFromClauseAssignment_0)
{ after(grammarAccess.getSelectStatementAccess().getSelectFromClauseAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectStatement__Group__1__Impl
	rule__SelectStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectStatementAccess().getWhereClauseAssignment_1()); }
(rule__SelectStatement__WhereClauseAssignment_1)?
{ after(grammarAccess.getSelectStatementAccess().getWhereClauseAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectStatement__Group__2__Impl
	rule__SelectStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectStatementAccess().getHavingAssignment_2()); }
(rule__SelectStatement__HavingAssignment_2)?
{ after(grammarAccess.getSelectStatementAccess().getHavingAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectStatement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectStatement__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectStatement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectStatementAccess().getOrderAssignment_3()); }
(rule__SelectStatement__OrderAssignment_3)?
{ after(grammarAccess.getSelectStatementAccess().getOrderAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__HavingClause__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HavingClause__Group__0__Impl
	rule__HavingClause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__HavingClause__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHavingClauseAccess().getHAVINGKeyword_0()); }

	'HAVING' 

{ after(grammarAccess.getHavingClauseAccess().getHAVINGKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__HavingClause__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HavingClause__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__HavingClause__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHavingClauseAccess().getHavingAssignment_1()); }
(rule__HavingClause__HavingAssignment_1)
{ after(grammarAccess.getHavingClauseAccess().getHavingAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OrderClause__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrderClause__Group__0__Impl
	rule__OrderClause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderClause__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderClauseAccess().getORDERKeyword_0()); }

	'ORDER' 

{ after(grammarAccess.getOrderClauseAccess().getORDERKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrderClause__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrderClause__Group__1__Impl
	rule__OrderClause__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderClause__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderClauseAccess().getBYKeyword_1()); }

	'BY' 

{ after(grammarAccess.getOrderClauseAccess().getBYKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrderClause__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrderClause__Group__2__Impl
	rule__OrderClause__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderClause__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderClauseAccess().getOrderingAssignment_2()); }
(rule__OrderClause__OrderingAssignment_2)
{ after(grammarAccess.getOrderClauseAccess().getOrderingAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrderClause__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrderClause__Group__3__Impl
	rule__OrderClause__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderClause__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderClauseAccess().getGroup_3()); }
(rule__OrderClause__Group_3__0)*
{ after(grammarAccess.getOrderClauseAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrderClause__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrderClause__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderClause__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderClauseAccess().getAlternatives_4()); }
(rule__OrderClause__Alternatives_4)?
{ after(grammarAccess.getOrderClauseAccess().getAlternatives_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__OrderClause__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrderClause__Group_3__0__Impl
	rule__OrderClause__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderClause__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderClauseAccess().getCommaKeyword_3_0()); }

	',' 

{ after(grammarAccess.getOrderClauseAccess().getCommaKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrderClause__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrderClause__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderClause__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderClauseAccess().getOrderingAssignment_3_1()); }
(rule__OrderClause__OrderingAssignment_3_1)
{ after(grammarAccess.getOrderClauseAccess().getOrderingAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OrderItem__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrderItem__Group__0__Impl
	rule__OrderItem__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderItem__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderItemAccess().getVarAssignment_0()); }
(rule__OrderItem__VarAssignment_0)
{ after(grammarAccess.getOrderItemAccess().getVarAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrderItem__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrderItem__Group__1__Impl
	rule__OrderItem__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderItem__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderItemAccess().getFullStopKeyword_1()); }

	'.' 

{ after(grammarAccess.getOrderItemAccess().getFullStopKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrderItem__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrderItem__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderItem__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderItemAccess().getFeatureAssignment_2()); }
(rule__OrderItem__FeatureAssignment_2)
{ after(grammarAccess.getOrderItemAccess().getFeatureAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__UpdateStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UpdateStatement__Group__0__Impl
	rule__UpdateStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUpdateStatementAccess().getUpdateClauseAssignment_0()); }
(rule__UpdateStatement__UpdateClauseAssignment_0)
{ after(grammarAccess.getUpdateStatementAccess().getUpdateClauseAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UpdateStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UpdateStatement__Group__1__Impl
	rule__UpdateStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUpdateStatementAccess().getSetClauseAssignment_1()); }
(rule__UpdateStatement__SetClauseAssignment_1)
{ after(grammarAccess.getUpdateStatementAccess().getSetClauseAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UpdateStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UpdateStatement__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUpdateStatementAccess().getWhereClauseAssignment_2()); }
(rule__UpdateStatement__WhereClauseAssignment_2)?
{ after(grammarAccess.getUpdateStatementAccess().getWhereClauseAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__UpdateClause__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UpdateClause__Group__0__Impl
	rule__UpdateClause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateClause__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUpdateClauseAccess().getUPDATEKeyword_0()); }

	'UPDATE' 

{ after(grammarAccess.getUpdateClauseAccess().getUPDATEKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UpdateClause__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UpdateClause__Group__1__Impl
	rule__UpdateClause__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateClause__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUpdateClauseAccess().getFromEntriesAssignment_1()); }
(rule__UpdateClause__FromEntriesAssignment_1)
{ after(grammarAccess.getUpdateClauseAccess().getFromEntriesAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UpdateClause__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UpdateClause__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateClause__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUpdateClauseAccess().getGroup_2()); }
(rule__UpdateClause__Group_2__0)*
{ after(grammarAccess.getUpdateClauseAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__UpdateClause__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UpdateClause__Group_2__0__Impl
	rule__UpdateClause__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateClause__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUpdateClauseAccess().getCommaKeyword_2_0()); }

	',' 

{ after(grammarAccess.getUpdateClauseAccess().getCommaKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UpdateClause__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UpdateClause__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateClause__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUpdateClauseAccess().getFromEntriesAssignment_2_1()); }
(rule__UpdateClause__FromEntriesAssignment_2_1)
{ after(grammarAccess.getUpdateClauseAccess().getFromEntriesAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SetClause__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetClause__Group__0__Impl
	rule__SetClause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SetClause__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetClauseAccess().getSETKeyword_0()); }

	'SET' 

{ after(grammarAccess.getSetClauseAccess().getSETKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SetClause__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetClause__Group__1__Impl
	rule__SetClause__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SetClause__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetClauseAccess().getItemsAssignment_1()); }
(rule__SetClause__ItemsAssignment_1)
{ after(grammarAccess.getSetClauseAccess().getItemsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SetClause__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetClause__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SetClause__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetClauseAccess().getGroup_2()); }
(rule__SetClause__Group_2__0)*
{ after(grammarAccess.getSetClauseAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SetClause__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetClause__Group_2__0__Impl
	rule__SetClause__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SetClause__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetClauseAccess().getCommaKeyword_2_0()); }

	',' 

{ after(grammarAccess.getSetClauseAccess().getCommaKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SetClause__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetClause__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SetClause__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetClauseAccess().getItemsAssignment_2_1()); }
(rule__SetClause__ItemsAssignment_2_1)
{ after(grammarAccess.getSetClauseAccess().getItemsAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UpdateItem__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UpdateItem__Group__0__Impl
	rule__UpdateItem__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateItem__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUpdateItemAccess().getAliasAssignment_0()); }
(rule__UpdateItem__AliasAssignment_0)
{ after(grammarAccess.getUpdateItemAccess().getAliasAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UpdateItem__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UpdateItem__Group__1__Impl
	rule__UpdateItem__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateItem__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUpdateItemAccess().getEqualsSignKeyword_1()); }

	'=' 

{ after(grammarAccess.getUpdateItemAccess().getEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UpdateItem__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UpdateItem__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateItem__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUpdateItemAccess().getValueAssignment_2()); }
(rule__UpdateItem__ValueAssignment_2)
{ after(grammarAccess.getUpdateItemAccess().getValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__DeleteStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DeleteStatement__Group__0__Impl
	rule__DeleteStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DeleteStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeleteStatementAccess().getDeleteClauseAssignment_0()); }
(rule__DeleteStatement__DeleteClauseAssignment_0)
{ after(grammarAccess.getDeleteStatementAccess().getDeleteClauseAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DeleteStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DeleteStatement__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DeleteStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeleteStatementAccess().getWhereClauseAssignment_1()); }
(rule__DeleteStatement__WhereClauseAssignment_1)?
{ after(grammarAccess.getDeleteStatementAccess().getWhereClauseAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DeleteClause__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DeleteClause__Group__0__Impl
	rule__DeleteClause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DeleteClause__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeleteClauseAccess().getDELETEKeyword_0()); }

	'DELETE' 

{ after(grammarAccess.getDeleteClauseAccess().getDELETEKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DeleteClause__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DeleteClause__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DeleteClause__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeleteClauseAccess().getFromClauseAssignment_1()); }
(rule__DeleteClause__FromClauseAssignment_1)
{ after(grammarAccess.getDeleteClauseAccess().getFromClauseAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SelectFromClause__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectFromClause__Group__0__Impl
	rule__SelectFromClause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectFromClause__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectFromClauseAccess().getSelectClauseAssignment_0()); }
(rule__SelectFromClause__SelectClauseAssignment_0)?
{ after(grammarAccess.getSelectFromClauseAccess().getSelectClauseAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectFromClause__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectFromClause__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectFromClause__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectFromClauseAccess().getFromClauseAssignment_1()); }
(rule__SelectFromClause__FromClauseAssignment_1)
{ after(grammarAccess.getSelectFromClauseAccess().getFromClauseAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SelectClause__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectClause__Group__0__Impl
	rule__SelectClause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectClause__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectClauseAccess().getSELECTKeyword_0()); }

	'SELECT' 

{ after(grammarAccess.getSelectClauseAccess().getSELECTKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectClause__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectClause__Group__1__Impl
	rule__SelectClause__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectClause__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectClauseAccess().getIsDistinctAssignment_1()); }
(rule__SelectClause__IsDistinctAssignment_1)?
{ after(grammarAccess.getSelectClauseAccess().getIsDistinctAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectClause__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectClause__Group__2__Impl
	rule__SelectClause__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectClause__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectClauseAccess().getExpressionsAssignment_2()); }
(rule__SelectClause__ExpressionsAssignment_2)
{ after(grammarAccess.getSelectClauseAccess().getExpressionsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectClause__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectClause__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectClause__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectClauseAccess().getGroup_3()); }
(rule__SelectClause__Group_3__0)*
{ after(grammarAccess.getSelectClauseAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__SelectClause__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectClause__Group_3__0__Impl
	rule__SelectClause__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectClause__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectClauseAccess().getCommaKeyword_3_0()); }

	',' 

{ after(grammarAccess.getSelectClauseAccess().getCommaKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectClause__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectClause__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectClause__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectClauseAccess().getExpressionsAssignment_3_1()); }
(rule__SelectClause__ExpressionsAssignment_3_1)
{ after(grammarAccess.getSelectClauseAccess().getExpressionsAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AvgAggregate__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AvgAggregate__Group__0__Impl
	rule__AvgAggregate__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AvgAggregate__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAvgAggregateAccess().getAVGKeyword_0()); }

	'AVG' 

{ after(grammarAccess.getAvgAggregateAccess().getAVGKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AvgAggregate__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AvgAggregate__Group__1__Impl
	rule__AvgAggregate__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AvgAggregate__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAvgAggregateAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getAvgAggregateAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AvgAggregate__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AvgAggregate__Group__2__Impl
	rule__AvgAggregate__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AvgAggregate__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAvgAggregateAccess().getIsDistinctAssignment_2()); }
(rule__AvgAggregate__IsDistinctAssignment_2)?
{ after(grammarAccess.getAvgAggregateAccess().getIsDistinctAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AvgAggregate__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AvgAggregate__Group__3__Impl
	rule__AvgAggregate__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__AvgAggregate__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAvgAggregateAccess().getItemAssignment_3()); }
(rule__AvgAggregate__ItemAssignment_3)
{ after(grammarAccess.getAvgAggregateAccess().getItemAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AvgAggregate__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AvgAggregate__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AvgAggregate__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAvgAggregateAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getAvgAggregateAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__MaxAggregate__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MaxAggregate__Group__0__Impl
	rule__MaxAggregate__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MaxAggregate__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMaxAggregateAccess().getMAXKeyword_0()); }

	'MAX' 

{ after(grammarAccess.getMaxAggregateAccess().getMAXKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MaxAggregate__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MaxAggregate__Group__1__Impl
	rule__MaxAggregate__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MaxAggregate__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMaxAggregateAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getMaxAggregateAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MaxAggregate__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MaxAggregate__Group__2__Impl
	rule__MaxAggregate__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MaxAggregate__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMaxAggregateAccess().getIsDistinctAssignment_2()); }
(rule__MaxAggregate__IsDistinctAssignment_2)?
{ after(grammarAccess.getMaxAggregateAccess().getIsDistinctAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MaxAggregate__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MaxAggregate__Group__3__Impl
	rule__MaxAggregate__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__MaxAggregate__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMaxAggregateAccess().getItemAssignment_3()); }
(rule__MaxAggregate__ItemAssignment_3)
{ after(grammarAccess.getMaxAggregateAccess().getItemAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MaxAggregate__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MaxAggregate__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MaxAggregate__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMaxAggregateAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getMaxAggregateAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__MinAggregate__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MinAggregate__Group__0__Impl
	rule__MinAggregate__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MinAggregate__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMinAggregateAccess().getMINKeyword_0()); }

	'MIN' 

{ after(grammarAccess.getMinAggregateAccess().getMINKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MinAggregate__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MinAggregate__Group__1__Impl
	rule__MinAggregate__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MinAggregate__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMinAggregateAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getMinAggregateAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MinAggregate__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MinAggregate__Group__2__Impl
	rule__MinAggregate__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MinAggregate__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMinAggregateAccess().getIsDistinctAssignment_2()); }
(rule__MinAggregate__IsDistinctAssignment_2)?
{ after(grammarAccess.getMinAggregateAccess().getIsDistinctAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MinAggregate__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MinAggregate__Group__3__Impl
	rule__MinAggregate__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__MinAggregate__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMinAggregateAccess().getItemAssignment_3()); }
(rule__MinAggregate__ItemAssignment_3)
{ after(grammarAccess.getMinAggregateAccess().getItemAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MinAggregate__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MinAggregate__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MinAggregate__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMinAggregateAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getMinAggregateAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__SumAggregate__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SumAggregate__Group__0__Impl
	rule__SumAggregate__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SumAggregate__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSumAggregateAccess().getSUMKeyword_0()); }

	'SUM' 

{ after(grammarAccess.getSumAggregateAccess().getSUMKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SumAggregate__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SumAggregate__Group__1__Impl
	rule__SumAggregate__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SumAggregate__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSumAggregateAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getSumAggregateAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SumAggregate__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SumAggregate__Group__2__Impl
	rule__SumAggregate__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SumAggregate__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSumAggregateAccess().getIsDistinctAssignment_2()); }
(rule__SumAggregate__IsDistinctAssignment_2)?
{ after(grammarAccess.getSumAggregateAccess().getIsDistinctAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SumAggregate__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SumAggregate__Group__3__Impl
	rule__SumAggregate__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SumAggregate__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSumAggregateAccess().getItemAssignment_3()); }
(rule__SumAggregate__ItemAssignment_3)
{ after(grammarAccess.getSumAggregateAccess().getItemAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SumAggregate__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SumAggregate__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SumAggregate__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSumAggregateAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getSumAggregateAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__CountAggregate__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CountAggregate__Group__0__Impl
	rule__CountAggregate__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CountAggregate__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCountAggregateAccess().getCOUNTKeyword_0()); }

	'COUNT' 

{ after(grammarAccess.getCountAggregateAccess().getCOUNTKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CountAggregate__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CountAggregate__Group__1__Impl
	rule__CountAggregate__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CountAggregate__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCountAggregateAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getCountAggregateAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CountAggregate__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CountAggregate__Group__2__Impl
	rule__CountAggregate__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CountAggregate__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCountAggregateAccess().getIsDistinctAssignment_2()); }
(rule__CountAggregate__IsDistinctAssignment_2)?
{ after(grammarAccess.getCountAggregateAccess().getIsDistinctAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CountAggregate__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CountAggregate__Group__3__Impl
	rule__CountAggregate__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__CountAggregate__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCountAggregateAccess().getItemAssignment_3()); }
(rule__CountAggregate__ItemAssignment_3)
{ after(grammarAccess.getCountAggregateAccess().getItemAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CountAggregate__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CountAggregate__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CountAggregate__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCountAggregateAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getCountAggregateAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__SelectConstructorExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectConstructorExpression__Group__0__Impl
	rule__SelectConstructorExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectConstructorExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectConstructorExpressionAccess().getNEWKeyword_0()); }

	'NEW' 

{ after(grammarAccess.getSelectConstructorExpressionAccess().getNEWKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectConstructorExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectConstructorExpression__Group__1__Impl
	rule__SelectConstructorExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectConstructorExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectConstructorExpressionAccess().getNameAssignment_1()); }
(rule__SelectConstructorExpression__NameAssignment_1)
{ after(grammarAccess.getSelectConstructorExpressionAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectConstructorExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectConstructorExpression__Group__2__Impl
	rule__SelectConstructorExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectConstructorExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectConstructorExpressionAccess().getLeftParenthesisKeyword_2()); }

	'(' 

{ after(grammarAccess.getSelectConstructorExpressionAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectConstructorExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectConstructorExpression__Group__3__Impl
	rule__SelectConstructorExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectConstructorExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectConstructorExpressionAccess().getItemsAssignment_3()); }
(rule__SelectConstructorExpression__ItemsAssignment_3)
{ after(grammarAccess.getSelectConstructorExpressionAccess().getItemsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectConstructorExpression__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectConstructorExpression__Group__4__Impl
	rule__SelectConstructorExpression__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectConstructorExpression__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectConstructorExpressionAccess().getGroup_4()); }
(rule__SelectConstructorExpression__Group_4__0)*
{ after(grammarAccess.getSelectConstructorExpressionAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectConstructorExpression__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectConstructorExpression__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectConstructorExpression__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectConstructorExpressionAccess().getRightParenthesisKeyword_5()); }

	')' 

{ after(grammarAccess.getSelectConstructorExpressionAccess().getRightParenthesisKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__SelectConstructorExpression__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectConstructorExpression__Group_4__0__Impl
	rule__SelectConstructorExpression__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectConstructorExpression__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectConstructorExpressionAccess().getCommaKeyword_4_0()); }

	',' 

{ after(grammarAccess.getSelectConstructorExpressionAccess().getCommaKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectConstructorExpression__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectConstructorExpression__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectConstructorExpression__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectConstructorExpressionAccess().getItemsAssignment_4_1()); }
(rule__SelectConstructorExpression__ItemsAssignment_4_1)
{ after(grammarAccess.getSelectConstructorExpressionAccess().getItemsAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FromClause__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FromClause__Group__0__Impl
	rule__FromClause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FromClause__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromClauseAccess().getFROMKeyword_0()); }

	'FROM' 

{ after(grammarAccess.getFromClauseAccess().getFROMKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FromClause__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FromClause__Group__1__Impl
	rule__FromClause__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FromClause__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromClauseAccess().getFromEntriesAssignment_1()); }
(rule__FromClause__FromEntriesAssignment_1)
{ after(grammarAccess.getFromClauseAccess().getFromEntriesAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FromClause__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FromClause__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FromClause__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromClauseAccess().getGroup_2()); }
(rule__FromClause__Group_2__0)*
{ after(grammarAccess.getFromClauseAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__FromClause__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FromClause__Group_2__0__Impl
	rule__FromClause__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FromClause__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromClauseAccess().getCommaKeyword_2_0()); }

	',' 

{ after(grammarAccess.getFromClauseAccess().getCommaKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FromClause__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FromClause__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FromClause__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromClauseAccess().getFromEntriesAssignment_2_1()); }
(rule__FromClause__FromEntriesAssignment_2_1)
{ after(grammarAccess.getFromClauseAccess().getFromEntriesAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__VariableDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group__0__Impl
	rule__VariableDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getASKeyword_0()); }
(
	'AS' 
)?
{ after(grammarAccess.getVariableDeclarationAccess().getASKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getNameAssignment_1()); }
(rule__VariableDeclaration__NameAssignment_1)
{ after(grammarAccess.getVariableDeclarationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FromClassVar__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FromClassVar__Group__0__Impl
	rule__FromClassVar__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FromClassVar__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromClassVarAccess().getTypeAssignment_0()); }
(rule__FromClassVar__TypeAssignment_0)
{ after(grammarAccess.getFromClassVarAccess().getTypeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FromClassVar__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FromClassVar__Group__1__Impl
	rule__FromClassVar__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FromClassVar__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromClassVarAccess().getVariableAssignment_1()); }
(rule__FromClassVar__VariableAssignment_1)
{ after(grammarAccess.getFromClassVarAccess().getVariableAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FromClassVar__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FromClassVar__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FromClassVar__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromClassVarAccess().getJoinsAssignment_2()); }
(rule__FromClassVar__JoinsAssignment_2)*
{ after(grammarAccess.getFromClassVarAccess().getJoinsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__FromCollection__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FromCollection__Group__0__Impl
	rule__FromCollection__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FromCollection__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromCollectionAccess().getINKeyword_0()); }

	'IN' 

{ after(grammarAccess.getFromCollectionAccess().getINKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FromCollection__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FromCollection__Group__1__Impl
	rule__FromCollection__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FromCollection__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromCollectionAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getFromCollectionAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FromCollection__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FromCollection__Group__2__Impl
	rule__FromCollection__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FromCollection__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromCollectionAccess().getPathAssignment_2()); }
(rule__FromCollection__PathAssignment_2)
{ after(grammarAccess.getFromCollectionAccess().getPathAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FromCollection__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FromCollection__Group__3__Impl
	rule__FromCollection__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FromCollection__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromCollectionAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getFromCollectionAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FromCollection__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FromCollection__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FromCollection__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromCollectionAccess().getVariableAssignment_4()); }
(rule__FromCollection__VariableAssignment_4)
{ after(grammarAccess.getFromCollectionAccess().getVariableAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Join__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Join__Group__0__Impl
	rule__Join__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Join__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJoinAccess().getJOINKeyword_0()); }

	'JOIN' 

{ after(grammarAccess.getJoinAccess().getJOINKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Join__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Join__Group__1__Impl
	rule__Join__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Join__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJoinAccess().getIsFetchAssignment_1()); }
(rule__Join__IsFetchAssignment_1)?
{ after(grammarAccess.getJoinAccess().getIsFetchAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Join__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Join__Group__2__Impl
	rule__Join__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Join__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJoinAccess().getPathAssignment_2()); }
(rule__Join__PathAssignment_2)
{ after(grammarAccess.getJoinAccess().getPathAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Join__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Join__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Join__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJoinAccess().getVariableAssignment_3()); }
(rule__Join__VariableAssignment_3)
{ after(grammarAccess.getJoinAccess().getVariableAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__LeftJoin__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LeftJoin__Group__0__Impl
	rule__LeftJoin__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LeftJoin__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLeftJoinAccess().getLEFTKeyword_0()); }

	'LEFT' 

{ after(grammarAccess.getLeftJoinAccess().getLEFTKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LeftJoin__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LeftJoin__Group__1__Impl
	rule__LeftJoin__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LeftJoin__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLeftJoinAccess().getIsOuterAssignment_1()); }
(rule__LeftJoin__IsOuterAssignment_1)?
{ after(grammarAccess.getLeftJoinAccess().getIsOuterAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LeftJoin__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LeftJoin__Group__2__Impl
	rule__LeftJoin__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LeftJoin__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLeftJoinAccess().getJOINKeyword_2()); }

	'JOIN' 

{ after(grammarAccess.getLeftJoinAccess().getJOINKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LeftJoin__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LeftJoin__Group__3__Impl
	rule__LeftJoin__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__LeftJoin__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLeftJoinAccess().getIsFetchAssignment_3()); }
(rule__LeftJoin__IsFetchAssignment_3)?
{ after(grammarAccess.getLeftJoinAccess().getIsFetchAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LeftJoin__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LeftJoin__Group__4__Impl
	rule__LeftJoin__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__LeftJoin__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLeftJoinAccess().getPathAssignment_4()); }
(rule__LeftJoin__PathAssignment_4)
{ after(grammarAccess.getLeftJoinAccess().getPathAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LeftJoin__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LeftJoin__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LeftJoin__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLeftJoinAccess().getVariableAssignment_5()); }
(rule__LeftJoin__VariableAssignment_5)
{ after(grammarAccess.getLeftJoinAccess().getVariableAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__InnerJoin__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InnerJoin__Group__0__Impl
	rule__InnerJoin__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InnerJoin__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInnerJoinAccess().getINNERKeyword_0()); }

	'INNER' 

{ after(grammarAccess.getInnerJoinAccess().getINNERKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InnerJoin__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InnerJoin__Group__1__Impl
	rule__InnerJoin__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__InnerJoin__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInnerJoinAccess().getJOINKeyword_1()); }

	'JOIN' 

{ after(grammarAccess.getInnerJoinAccess().getJOINKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InnerJoin__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InnerJoin__Group__2__Impl
	rule__InnerJoin__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__InnerJoin__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInnerJoinAccess().getIsFetchAssignment_2()); }
(rule__InnerJoin__IsFetchAssignment_2)?
{ after(grammarAccess.getInnerJoinAccess().getIsFetchAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InnerJoin__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InnerJoin__Group__3__Impl
	rule__InnerJoin__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__InnerJoin__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInnerJoinAccess().getPathAssignment_3()); }
(rule__InnerJoin__PathAssignment_3)
{ after(grammarAccess.getInnerJoinAccess().getPathAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InnerJoin__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InnerJoin__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InnerJoin__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInnerJoinAccess().getVariableAssignment_4()); }
(rule__InnerJoin__VariableAssignment_4)
{ after(grammarAccess.getInnerJoinAccess().getVariableAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__WhereClause__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhereClause__Group__0__Impl
	rule__WhereClause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WhereClause__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhereClauseAccess().getWHEREKeyword_0()); }

	'WHERE' 

{ after(grammarAccess.getWhereClauseAccess().getWHEREKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WhereClause__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhereClause__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WhereClause__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhereClauseAccess().getWhereEntryAssignment_1()); }
(rule__WhereClause__WhereEntryAssignment_1)
{ after(grammarAccess.getWhereClauseAccess().getWhereEntryAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OrExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group__0__Impl
	rule__OrExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0()); }
	ruleAndExpression
{ after(grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getGroup_1()); }
(rule__OrExpression__Group_1__0)?
{ after(grammarAccess.getOrExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OrExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group_1__0__Impl
	rule__OrExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getOrExpressionEntriesAction_1_0()); }
(

)
{ after(grammarAccess.getOrExpressionAccess().getOrExpressionEntriesAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getOrExpressionAccess().getGroup_1_1()); }
(rule__OrExpression__Group_1_1__0)
{ after(grammarAccess.getOrExpressionAccess().getGroup_1_1()); }
)
(
{ before(grammarAccess.getOrExpressionAccess().getGroup_1_1()); }
(rule__OrExpression__Group_1_1__0)*
{ after(grammarAccess.getOrExpressionAccess().getGroup_1_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OrExpression__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group_1_1__0__Impl
	rule__OrExpression__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getORKeyword_1_1_0()); }

	'OR' 

{ after(grammarAccess.getOrExpressionAccess().getORKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getEntriesAssignment_1_1_1()); }
(rule__OrExpression__EntriesAssignment_1_1_1)
{ after(grammarAccess.getOrExpressionAccess().getEntriesAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AndExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group__0__Impl
	rule__AndExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getConcreteExpressionParserRuleCall_0()); }
	ruleConcreteExpression
{ after(grammarAccess.getAndExpressionAccess().getConcreteExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getGroup_1()); }
(rule__AndExpression__Group_1__0)?
{ after(grammarAccess.getAndExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AndExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group_1__0__Impl
	rule__AndExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getAndExpressionEntriesAction_1_0()); }
(

)
{ after(grammarAccess.getAndExpressionAccess().getAndExpressionEntriesAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getAndExpressionAccess().getGroup_1_1()); }
(rule__AndExpression__Group_1_1__0)
{ after(grammarAccess.getAndExpressionAccess().getGroup_1_1()); }
)
(
{ before(grammarAccess.getAndExpressionAccess().getGroup_1_1()); }
(rule__AndExpression__Group_1_1__0)*
{ after(grammarAccess.getAndExpressionAccess().getGroup_1_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AndExpression__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group_1_1__0__Impl
	rule__AndExpression__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getANDKeyword_1_1_0()); }

	'AND' 

{ after(grammarAccess.getAndExpressionAccess().getANDKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getEntriesAssignment_1_1_1()); }
(rule__AndExpression__EntriesAssignment_1_1_1)
{ after(grammarAccess.getAndExpressionAccess().getEntriesAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ParExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParExpression__Group__0__Impl
	rule__ParExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParExpressionAccess().getLeftParenthesisKeyword_0()); }

	'(' 

{ after(grammarAccess.getParExpressionAccess().getLeftParenthesisKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParExpression__Group__1__Impl
	rule__ParExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParExpressionAccess().getExpressionTermParserRuleCall_1()); }
	ruleExpressionTerm
{ after(grammarAccess.getParExpressionAccess().getExpressionTermParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParExpressionAccess().getRightParenthesisKeyword_2()); }

	')' 

{ after(grammarAccess.getParExpressionAccess().getRightParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__OperatorExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperatorExpression__Group__0__Impl
	rule__OperatorExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OperatorExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorExpressionAccess().getLhsAssignment_0()); }
(rule__OperatorExpression__LhsAssignment_0)
{ after(grammarAccess.getOperatorExpressionAccess().getLhsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OperatorExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperatorExpression__Group__1__Impl
	rule__OperatorExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OperatorExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorExpressionAccess().getOperatorAssignment_1()); }
(rule__OperatorExpression__OperatorAssignment_1)
{ after(grammarAccess.getOperatorExpressionAccess().getOperatorAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OperatorExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperatorExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OperatorExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorExpressionAccess().getRhsAssignment_2()); }
(rule__OperatorExpression__RhsAssignment_2)
{ after(grammarAccess.getOperatorExpressionAccess().getRhsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ExistsExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExistsExpression__Group__0__Impl
	rule__ExistsExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExistsExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExistsExpressionAccess().getIsNotAssignment_0()); }
(rule__ExistsExpression__IsNotAssignment_0)?
{ after(grammarAccess.getExistsExpressionAccess().getIsNotAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExistsExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExistsExpression__Group__1__Impl
	rule__ExistsExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExistsExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExistsExpressionAccess().getEXISTSKeyword_1()); }

	'EXISTS' 

{ after(grammarAccess.getExistsExpressionAccess().getEXISTSKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExistsExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExistsExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExistsExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExistsExpressionAccess().getQueryAssignment_2()); }
(rule__ExistsExpression__QueryAssignment_2)
{ after(grammarAccess.getExistsExpressionAccess().getQueryAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AllExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AllExpression__Group__0__Impl
	rule__AllExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AllExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAllExpressionAccess().getALLKeyword_0()); }

	'ALL' 

{ after(grammarAccess.getAllExpressionAccess().getALLKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AllExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AllExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AllExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAllExpressionAccess().getQueryAssignment_1()); }
(rule__AllExpression__QueryAssignment_1)
{ after(grammarAccess.getAllExpressionAccess().getQueryAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AnyExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AnyExpression__Group__0__Impl
	rule__AnyExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AnyExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnyExpressionAccess().getANYKeyword_0()); }

	'ANY' 

{ after(grammarAccess.getAnyExpressionAccess().getANYKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AnyExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AnyExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AnyExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnyExpressionAccess().getQueryAssignment_1()); }
(rule__AnyExpression__QueryAssignment_1)
{ after(grammarAccess.getAnyExpressionAccess().getQueryAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SomeExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SomeExpression__Group__0__Impl
	rule__SomeExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SomeExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSomeExpressionAccess().getSOMEKeyword_0()); }

	'SOME' 

{ after(grammarAccess.getSomeExpressionAccess().getSOMEKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SomeExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SomeExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SomeExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSomeExpressionAccess().getQueryAssignment_1()); }
(rule__SomeExpression__QueryAssignment_1)
{ after(grammarAccess.getSomeExpressionAccess().getQueryAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__CollectionExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CollectionExpression__Group__0__Impl
	rule__CollectionExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectionExpressionAccess().getLhsAssignment_0()); }
(rule__CollectionExpression__LhsAssignment_0)
{ after(grammarAccess.getCollectionExpressionAccess().getLhsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CollectionExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CollectionExpression__Group__1__Impl
	rule__CollectionExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectionExpressionAccess().getIsNotAssignment_1()); }
(rule__CollectionExpression__IsNotAssignment_1)?
{ after(grammarAccess.getCollectionExpressionAccess().getIsNotAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CollectionExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CollectionExpression__Group__2__Impl
	rule__CollectionExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectionExpressionAccess().getMEMBERKeyword_2()); }

	'MEMBER' 

{ after(grammarAccess.getCollectionExpressionAccess().getMEMBERKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CollectionExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CollectionExpression__Group__3__Impl
	rule__CollectionExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectionExpressionAccess().getOFKeyword_3()); }
(
	'OF' 
)?
{ after(grammarAccess.getCollectionExpressionAccess().getOFKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CollectionExpression__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CollectionExpression__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionExpression__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectionExpressionAccess().getRhsAssignment_4()); }
(rule__CollectionExpression__RhsAssignment_4)
{ after(grammarAccess.getCollectionExpressionAccess().getRhsAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__NullComparisonExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NullComparisonExpression__Group__0__Impl
	rule__NullComparisonExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NullComparisonExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNullComparisonExpressionAccess().getLhsAssignment_0()); }
(rule__NullComparisonExpression__LhsAssignment_0)
{ after(grammarAccess.getNullComparisonExpressionAccess().getLhsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NullComparisonExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NullComparisonExpression__Group__1__Impl
	rule__NullComparisonExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NullComparisonExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNullComparisonExpressionAccess().getISKeyword_1()); }

	'IS' 

{ after(grammarAccess.getNullComparisonExpressionAccess().getISKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NullComparisonExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NullComparisonExpression__Group__2__Impl
	rule__NullComparisonExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__NullComparisonExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNullComparisonExpressionAccess().getIsNotAssignment_2()); }
(rule__NullComparisonExpression__IsNotAssignment_2)?
{ after(grammarAccess.getNullComparisonExpressionAccess().getIsNotAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NullComparisonExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NullComparisonExpression__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NullComparisonExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNullComparisonExpressionAccess().getNULLKeyword_3()); }

	'NULL' 

{ after(grammarAccess.getNullComparisonExpressionAccess().getNULLKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__EmptyComparisonExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EmptyComparisonExpression__Group__0__Impl
	rule__EmptyComparisonExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EmptyComparisonExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEmptyComparisonExpressionAccess().getLhsAssignment_0()); }
(rule__EmptyComparisonExpression__LhsAssignment_0)
{ after(grammarAccess.getEmptyComparisonExpressionAccess().getLhsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EmptyComparisonExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EmptyComparisonExpression__Group__1__Impl
	rule__EmptyComparisonExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EmptyComparisonExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEmptyComparisonExpressionAccess().getISKeyword_1()); }

	'IS' 

{ after(grammarAccess.getEmptyComparisonExpressionAccess().getISKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EmptyComparisonExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EmptyComparisonExpression__Group__2__Impl
	rule__EmptyComparisonExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__EmptyComparisonExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEmptyComparisonExpressionAccess().getIsNotAssignment_2()); }
(rule__EmptyComparisonExpression__IsNotAssignment_2)?
{ after(grammarAccess.getEmptyComparisonExpressionAccess().getIsNotAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EmptyComparisonExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EmptyComparisonExpression__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EmptyComparisonExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEmptyComparisonExpressionAccess().getEMPTYKeyword_3()); }

	'EMPTY' 

{ after(grammarAccess.getEmptyComparisonExpressionAccess().getEMPTYKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__LikeExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LikeExpression__Group__0__Impl
	rule__LikeExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LikeExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLikeExpressionAccess().getLhsAssignment_0()); }
(rule__LikeExpression__LhsAssignment_0)
{ after(grammarAccess.getLikeExpressionAccess().getLhsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LikeExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LikeExpression__Group__1__Impl
	rule__LikeExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LikeExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLikeExpressionAccess().getIsNotAssignment_1()); }
(rule__LikeExpression__IsNotAssignment_1)?
{ after(grammarAccess.getLikeExpressionAccess().getIsNotAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LikeExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LikeExpression__Group__2__Impl
	rule__LikeExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LikeExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLikeExpressionAccess().getLIKEKeyword_2()); }

	'LIKE' 

{ after(grammarAccess.getLikeExpressionAccess().getLIKEKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LikeExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LikeExpression__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LikeExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLikeExpressionAccess().getPatternAssignment_3()); }
(rule__LikeExpression__PatternAssignment_3)
{ after(grammarAccess.getLikeExpressionAccess().getPatternAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__InSeqExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InSeqExpression__Group__0__Impl
	rule__InSeqExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InSeqExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInSeqExpressionAccess().getLhsAssignment_0()); }
(rule__InSeqExpression__LhsAssignment_0)
{ after(grammarAccess.getInSeqExpressionAccess().getLhsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InSeqExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InSeqExpression__Group__1__Impl
	rule__InSeqExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__InSeqExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInSeqExpressionAccess().getIsNotAssignment_1()); }
(rule__InSeqExpression__IsNotAssignment_1)?
{ after(grammarAccess.getInSeqExpressionAccess().getIsNotAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InSeqExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InSeqExpression__Group__2__Impl
	rule__InSeqExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__InSeqExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInSeqExpressionAccess().getINKeyword_2()); }

	'IN' 

{ after(grammarAccess.getInSeqExpressionAccess().getINKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InSeqExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InSeqExpression__Group__3__Impl
	rule__InSeqExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__InSeqExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInSeqExpressionAccess().getLeftParenthesisKeyword_3()); }

	'(' 

{ after(grammarAccess.getInSeqExpressionAccess().getLeftParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InSeqExpression__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InSeqExpression__Group__4__Impl
	rule__InSeqExpression__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__InSeqExpression__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInSeqExpressionAccess().getItemsAssignment_4()); }
(rule__InSeqExpression__ItemsAssignment_4)
{ after(grammarAccess.getInSeqExpressionAccess().getItemsAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InSeqExpression__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InSeqExpression__Group__5__Impl
	rule__InSeqExpression__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__InSeqExpression__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInSeqExpressionAccess().getGroup_5()); }
(rule__InSeqExpression__Group_5__0)*
{ after(grammarAccess.getInSeqExpressionAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InSeqExpression__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InSeqExpression__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InSeqExpression__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInSeqExpressionAccess().getRightParenthesisKeyword_6()); }

	')' 

{ after(grammarAccess.getInSeqExpressionAccess().getRightParenthesisKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__InSeqExpression__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InSeqExpression__Group_5__0__Impl
	rule__InSeqExpression__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InSeqExpression__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInSeqExpressionAccess().getCommaKeyword_5_0()); }

	',' 

{ after(grammarAccess.getInSeqExpressionAccess().getCommaKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InSeqExpression__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InSeqExpression__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InSeqExpression__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInSeqExpressionAccess().getItemsAssignment_5_1()); }
(rule__InSeqExpression__ItemsAssignment_5_1)
{ after(grammarAccess.getInSeqExpressionAccess().getItemsAssignment_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__InQueryExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InQueryExpression__Group__0__Impl
	rule__InQueryExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InQueryExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInQueryExpressionAccess().getLhsAssignment_0()); }
(rule__InQueryExpression__LhsAssignment_0)
{ after(grammarAccess.getInQueryExpressionAccess().getLhsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InQueryExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InQueryExpression__Group__1__Impl
	rule__InQueryExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__InQueryExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInQueryExpressionAccess().getIsNotAssignment_1()); }
(rule__InQueryExpression__IsNotAssignment_1)?
{ after(grammarAccess.getInQueryExpressionAccess().getIsNotAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InQueryExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InQueryExpression__Group__2__Impl
	rule__InQueryExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__InQueryExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInQueryExpressionAccess().getINKeyword_2()); }

	'IN' 

{ after(grammarAccess.getInQueryExpressionAccess().getINKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InQueryExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InQueryExpression__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InQueryExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInQueryExpressionAccess().getQueryAssignment_3()); }
(rule__InQueryExpression__QueryAssignment_3)
{ after(grammarAccess.getInQueryExpressionAccess().getQueryAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__BetweenExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BetweenExpression__Group__0__Impl
	rule__BetweenExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BetweenExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBetweenExpressionAccess().getLhsAssignment_0()); }
(rule__BetweenExpression__LhsAssignment_0)
{ after(grammarAccess.getBetweenExpressionAccess().getLhsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BetweenExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BetweenExpression__Group__1__Impl
	rule__BetweenExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BetweenExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBetweenExpressionAccess().getIsNotAssignment_1()); }
(rule__BetweenExpression__IsNotAssignment_1)?
{ after(grammarAccess.getBetweenExpressionAccess().getIsNotAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BetweenExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BetweenExpression__Group__2__Impl
	rule__BetweenExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BetweenExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBetweenExpressionAccess().getBETWEENKeyword_2()); }

	'BETWEEN' 

{ after(grammarAccess.getBetweenExpressionAccess().getBETWEENKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BetweenExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BetweenExpression__Group__3__Impl
	rule__BetweenExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__BetweenExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBetweenExpressionAccess().getMinAssignment_3()); }
(rule__BetweenExpression__MinAssignment_3)
{ after(grammarAccess.getBetweenExpressionAccess().getMinAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BetweenExpression__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BetweenExpression__Group__4__Impl
	rule__BetweenExpression__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__BetweenExpression__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBetweenExpressionAccess().getANDKeyword_4()); }

	'AND' 

{ after(grammarAccess.getBetweenExpressionAccess().getANDKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BetweenExpression__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BetweenExpression__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BetweenExpression__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBetweenExpressionAccess().getMaxAssignment_5()); }
(rule__BetweenExpression__MaxAssignment_5)
{ after(grammarAccess.getBetweenExpressionAccess().getMaxAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__AliasAttributeExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AliasAttributeExpression__Group__0__Impl
	rule__AliasAttributeExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AliasAttributeExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAliasAttributeExpressionAccess().getAliasAssignment_0()); }
(rule__AliasAttributeExpression__AliasAssignment_0)
{ after(grammarAccess.getAliasAttributeExpressionAccess().getAliasAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AliasAttributeExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AliasAttributeExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AliasAttributeExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAliasAttributeExpressionAccess().getGroup_1()); }
(rule__AliasAttributeExpression__Group_1__0)*
{ after(grammarAccess.getAliasAttributeExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AliasAttributeExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AliasAttributeExpression__Group_1__0__Impl
	rule__AliasAttributeExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AliasAttributeExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAliasAttributeExpressionAccess().getFullStopKeyword_1_0()); }

	'.' 

{ after(grammarAccess.getAliasAttributeExpressionAccess().getFullStopKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AliasAttributeExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AliasAttributeExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AliasAttributeExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAliasAttributeExpressionAccess().getAttributesAssignment_1_1()); }
(rule__AliasAttributeExpression__AttributesAssignment_1_1)
{ after(grammarAccess.getAliasAttributeExpressionAccess().getAttributesAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ParameterExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterExpression__Group__0__Impl
	rule__ParameterExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterExpressionAccess().getColonKeyword_0()); }

	':' 

{ after(grammarAccess.getParameterExpressionAccess().getColonKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterExpressionAccess().getNameAssignment_1()); }
(rule__ParameterExpression__NameAssignment_1)
{ after(grammarAccess.getParameterExpressionAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__StringFunction__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringFunction__Group__0__Impl
	rule__StringFunction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StringFunction__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringFunctionAccess().getNameAssignment_0()); }
(rule__StringFunction__NameAssignment_0)
{ after(grammarAccess.getStringFunctionAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringFunction__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringFunction__Group__1__Impl
	rule__StringFunction__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StringFunction__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringFunctionAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getStringFunctionAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringFunction__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringFunction__Group__2__Impl
	rule__StringFunction__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__StringFunction__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringFunctionAccess().getParamsAssignment_2()); }
(rule__StringFunction__ParamsAssignment_2)
{ after(grammarAccess.getStringFunctionAccess().getParamsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringFunction__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringFunction__Group__3__Impl
	rule__StringFunction__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__StringFunction__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringFunctionAccess().getGroup_3()); }
(rule__StringFunction__Group_3__0)
{ after(grammarAccess.getStringFunctionAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringFunction__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringFunction__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StringFunction__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringFunctionAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getStringFunctionAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__StringFunction__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringFunction__Group_3__0__Impl
	rule__StringFunction__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StringFunction__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringFunctionAccess().getCommaKeyword_3_0()); }

	',' 

{ after(grammarAccess.getStringFunctionAccess().getCommaKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringFunction__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringFunction__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StringFunction__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringFunctionAccess().getParamsAssignment_3_1()); }
(rule__StringFunction__ParamsAssignment_3_1)
{ after(grammarAccess.getStringFunctionAccess().getParamsAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NumericFunction__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumericFunction__Group__0__Impl
	rule__NumericFunction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericFunction__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericFunctionAccess().getNameAssignment_0()); }
(rule__NumericFunction__NameAssignment_0)
{ after(grammarAccess.getNumericFunctionAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumericFunction__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumericFunction__Group__1__Impl
	rule__NumericFunction__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericFunction__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericFunctionAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getNumericFunctionAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumericFunction__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumericFunction__Group__2__Impl
	rule__NumericFunction__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericFunction__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericFunctionAccess().getParamsAssignment_2()); }
(rule__NumericFunction__ParamsAssignment_2)
{ after(grammarAccess.getNumericFunctionAccess().getParamsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumericFunction__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumericFunction__Group__3__Impl
	rule__NumericFunction__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericFunction__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericFunctionAccess().getGroup_3()); }
(rule__NumericFunction__Group_3__0)
{ after(grammarAccess.getNumericFunctionAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumericFunction__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumericFunction__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericFunction__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericFunctionAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getNumericFunctionAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__NumericFunction__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumericFunction__Group_3__0__Impl
	rule__NumericFunction__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericFunction__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericFunctionAccess().getCommaKeyword_3_0()); }

	',' 

{ after(grammarAccess.getNumericFunctionAccess().getCommaKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumericFunction__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumericFunction__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericFunction__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericFunctionAccess().getParamsAssignment_3_1()); }
(rule__NumericFunction__ParamsAssignment_3_1)
{ after(grammarAccess.getNumericFunctionAccess().getParamsAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QueryExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QueryExpression__Group__0__Impl
	rule__QueryExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QueryExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQueryExpressionAccess().getLeftParenthesisKeyword_0()); }

	'(' 

{ after(grammarAccess.getQueryExpressionAccess().getLeftParenthesisKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QueryExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QueryExpression__Group__1__Impl
	rule__QueryExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__QueryExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQueryExpressionAccess().getSelectStatementParserRuleCall_1()); }
	ruleSelectStatement
{ after(grammarAccess.getQueryExpressionAccess().getSelectStatementParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QueryExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QueryExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QueryExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQueryExpressionAccess().getRightParenthesisKeyword_2()); }

	')' 

{ after(grammarAccess.getQueryExpressionAccess().getRightParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__QueryModule__ImportsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQueryModuleAccess().getImportsImportParserRuleCall_0_0()); }
	ruleImport{ after(grammarAccess.getQueryModuleAccess().getImportsImportParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__QueryModule__DefaultQueryAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQueryModuleAccess().getDefaultQueryJPQLQueryParserRuleCall_1_0()); }
	ruleJPQLQuery{ after(grammarAccess.getQueryModuleAccess().getDefaultQueryJPQLQueryParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__QueryModule__NamedQueriesAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQueryModuleAccess().getNamedQueriesNamedQueryParserRuleCall_2_0()); }
	ruleNamedQuery{ after(grammarAccess.getQueryModuleAccess().getNamedQueriesNamedQueryParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Import__ImportURIAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportURISTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getImportAccess().getImportURISTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NamedQuery__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamedQueryAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getNamedQueryAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NamedQuery__QueryAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamedQueryAccess().getQueryJPQLQueryParserRuleCall_2_0()); }
	ruleJPQLQuery{ after(grammarAccess.getNamedQueryAccess().getQueryJPQLQueryParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectStatement__SelectFromClauseAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectStatementAccess().getSelectFromClauseSelectFromClauseParserRuleCall_0_0()); }
	ruleSelectFromClause{ after(grammarAccess.getSelectStatementAccess().getSelectFromClauseSelectFromClauseParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectStatement__WhereClauseAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectStatementAccess().getWhereClauseWhereClauseParserRuleCall_1_0()); }
	ruleWhereClause{ after(grammarAccess.getSelectStatementAccess().getWhereClauseWhereClauseParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectStatement__HavingAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectStatementAccess().getHavingHavingClauseParserRuleCall_2_0()); }
	ruleHavingClause{ after(grammarAccess.getSelectStatementAccess().getHavingHavingClauseParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectStatement__OrderAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectStatementAccess().getOrderOrderClauseParserRuleCall_3_0()); }
	ruleOrderClause{ after(grammarAccess.getSelectStatementAccess().getOrderOrderClauseParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__HavingClause__HavingAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHavingClauseAccess().getHavingOrExpressionParserRuleCall_1_0()); }
	ruleOrExpression{ after(grammarAccess.getHavingClauseAccess().getHavingOrExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrderClause__OrderingAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderClauseAccess().getOrderingOrderItemParserRuleCall_2_0()); }
	ruleOrderItem{ after(grammarAccess.getOrderClauseAccess().getOrderingOrderItemParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrderClause__OrderingAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderClauseAccess().getOrderingOrderItemParserRuleCall_3_1_0()); }
	ruleOrderItem{ after(grammarAccess.getOrderClauseAccess().getOrderingOrderItemParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrderClause__IsAscAssignment_4_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderClauseAccess().getIsAscASCKeyword_4_0_0()); }
(
{ before(grammarAccess.getOrderClauseAccess().getIsAscASCKeyword_4_0_0()); }

	'ASC' 

{ after(grammarAccess.getOrderClauseAccess().getIsAscASCKeyword_4_0_0()); }
)

{ after(grammarAccess.getOrderClauseAccess().getIsAscASCKeyword_4_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrderClause__IsDescAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderClauseAccess().getIsDescDESCKeyword_4_1_0()); }
(
{ before(grammarAccess.getOrderClauseAccess().getIsDescDESCKeyword_4_1_0()); }

	'DESC' 

{ after(grammarAccess.getOrderClauseAccess().getIsDescDESCKeyword_4_1_0()); }
)

{ after(grammarAccess.getOrderClauseAccess().getIsDescDESCKeyword_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrderItem__VarAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderItemAccess().getVarFromEntryCrossReference_0_0()); }
(
{ before(grammarAccess.getOrderItemAccess().getVarFromEntryIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getOrderItemAccess().getVarFromEntryIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getOrderItemAccess().getVarFromEntryCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrderItem__FeatureAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderItemAccess().getFeatureIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getOrderItemAccess().getFeatureIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateStatement__UpdateClauseAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUpdateStatementAccess().getUpdateClauseUpdateClauseParserRuleCall_0_0()); }
	ruleUpdateClause{ after(grammarAccess.getUpdateStatementAccess().getUpdateClauseUpdateClauseParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateStatement__SetClauseAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUpdateStatementAccess().getSetClauseSetClauseParserRuleCall_1_0()); }
	ruleSetClause{ after(grammarAccess.getUpdateStatementAccess().getSetClauseSetClauseParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateStatement__WhereClauseAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUpdateStatementAccess().getWhereClauseWhereClauseParserRuleCall_2_0()); }
	ruleWhereClause{ after(grammarAccess.getUpdateStatementAccess().getWhereClauseWhereClauseParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateClause__FromEntriesAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUpdateClauseAccess().getFromEntriesFromEntryParserRuleCall_1_0()); }
	ruleFromEntry{ after(grammarAccess.getUpdateClauseAccess().getFromEntriesFromEntryParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateClause__FromEntriesAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUpdateClauseAccess().getFromEntriesFromEntryParserRuleCall_2_1_0()); }
	ruleFromEntry{ after(grammarAccess.getUpdateClauseAccess().getFromEntriesFromEntryParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SetClause__ItemsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetClauseAccess().getItemsUpdateItemParserRuleCall_1_0()); }
	ruleUpdateItem{ after(grammarAccess.getSetClauseAccess().getItemsUpdateItemParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SetClause__ItemsAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetClauseAccess().getItemsUpdateItemParserRuleCall_2_1_0()); }
	ruleUpdateItem{ after(grammarAccess.getSetClauseAccess().getItemsUpdateItemParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateItem__AliasAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUpdateItemAccess().getAliasAliasAttributeExpressionParserRuleCall_0_0()); }
	ruleAliasAttributeExpression{ after(grammarAccess.getUpdateItemAccess().getAliasAliasAttributeExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateItem__ValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUpdateItemAccess().getValueValueParserRuleCall_2_0()); }
	ruleValue{ after(grammarAccess.getUpdateItemAccess().getValueValueParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DeleteStatement__DeleteClauseAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeleteStatementAccess().getDeleteClauseDeleteClauseParserRuleCall_0_0()); }
	ruleDeleteClause{ after(grammarAccess.getDeleteStatementAccess().getDeleteClauseDeleteClauseParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DeleteStatement__WhereClauseAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeleteStatementAccess().getWhereClauseWhereClauseParserRuleCall_1_0()); }
	ruleWhereClause{ after(grammarAccess.getDeleteStatementAccess().getWhereClauseWhereClauseParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DeleteClause__FromClauseAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeleteClauseAccess().getFromClauseFromClauseParserRuleCall_1_0()); }
	ruleFromClause{ after(grammarAccess.getDeleteClauseAccess().getFromClauseFromClauseParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectFromClause__SelectClauseAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectFromClauseAccess().getSelectClauseSelectClauseParserRuleCall_0_0()); }
	ruleSelectClause{ after(grammarAccess.getSelectFromClauseAccess().getSelectClauseSelectClauseParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectFromClause__FromClauseAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectFromClauseAccess().getFromClauseFromClauseParserRuleCall_1_0()); }
	ruleFromClause{ after(grammarAccess.getSelectFromClauseAccess().getFromClauseFromClauseParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectClause__IsDistinctAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectClauseAccess().getIsDistinctDISTINCTKeyword_1_0()); }
(
{ before(grammarAccess.getSelectClauseAccess().getIsDistinctDISTINCTKeyword_1_0()); }

	'DISTINCT' 

{ after(grammarAccess.getSelectClauseAccess().getIsDistinctDISTINCTKeyword_1_0()); }
)

{ after(grammarAccess.getSelectClauseAccess().getIsDistinctDISTINCTKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectClause__ExpressionsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectClauseAccess().getExpressionsSelectExpressionParserRuleCall_2_0()); }
	ruleSelectExpression{ after(grammarAccess.getSelectClauseAccess().getExpressionsSelectExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectClause__ExpressionsAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectClauseAccess().getExpressionsSelectExpressionParserRuleCall_3_1_0()); }
	ruleSelectExpression{ after(grammarAccess.getSelectClauseAccess().getExpressionsSelectExpressionParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AvgAggregate__IsDistinctAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAvgAggregateAccess().getIsDistinctDISTINCTKeyword_2_0()); }
(
{ before(grammarAccess.getAvgAggregateAccess().getIsDistinctDISTINCTKeyword_2_0()); }

	'DISTINCT' 

{ after(grammarAccess.getAvgAggregateAccess().getIsDistinctDISTINCTKeyword_2_0()); }
)

{ after(grammarAccess.getAvgAggregateAccess().getIsDistinctDISTINCTKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AvgAggregate__ItemAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAvgAggregateAccess().getItemAliasAttributeExpressionParserRuleCall_3_0()); }
	ruleAliasAttributeExpression{ after(grammarAccess.getAvgAggregateAccess().getItemAliasAttributeExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MaxAggregate__IsDistinctAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMaxAggregateAccess().getIsDistinctDISTINCTKeyword_2_0()); }
(
{ before(grammarAccess.getMaxAggregateAccess().getIsDistinctDISTINCTKeyword_2_0()); }

	'DISTINCT' 

{ after(grammarAccess.getMaxAggregateAccess().getIsDistinctDISTINCTKeyword_2_0()); }
)

{ after(grammarAccess.getMaxAggregateAccess().getIsDistinctDISTINCTKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MaxAggregate__ItemAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMaxAggregateAccess().getItemAliasAttributeExpressionParserRuleCall_3_0()); }
	ruleAliasAttributeExpression{ after(grammarAccess.getMaxAggregateAccess().getItemAliasAttributeExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MinAggregate__IsDistinctAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMinAggregateAccess().getIsDistinctDISTINCTKeyword_2_0()); }
(
{ before(grammarAccess.getMinAggregateAccess().getIsDistinctDISTINCTKeyword_2_0()); }

	'DISTINCT' 

{ after(grammarAccess.getMinAggregateAccess().getIsDistinctDISTINCTKeyword_2_0()); }
)

{ after(grammarAccess.getMinAggregateAccess().getIsDistinctDISTINCTKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MinAggregate__ItemAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMinAggregateAccess().getItemAliasAttributeExpressionParserRuleCall_3_0()); }
	ruleAliasAttributeExpression{ after(grammarAccess.getMinAggregateAccess().getItemAliasAttributeExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SumAggregate__IsDistinctAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSumAggregateAccess().getIsDistinctDISTINCTKeyword_2_0()); }
(
{ before(grammarAccess.getSumAggregateAccess().getIsDistinctDISTINCTKeyword_2_0()); }

	'DISTINCT' 

{ after(grammarAccess.getSumAggregateAccess().getIsDistinctDISTINCTKeyword_2_0()); }
)

{ after(grammarAccess.getSumAggregateAccess().getIsDistinctDISTINCTKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SumAggregate__ItemAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSumAggregateAccess().getItemAliasAttributeExpressionParserRuleCall_3_0()); }
	ruleAliasAttributeExpression{ after(grammarAccess.getSumAggregateAccess().getItemAliasAttributeExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CountAggregate__IsDistinctAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCountAggregateAccess().getIsDistinctDISTINCTKeyword_2_0()); }
(
{ before(grammarAccess.getCountAggregateAccess().getIsDistinctDISTINCTKeyword_2_0()); }

	'DISTINCT' 

{ after(grammarAccess.getCountAggregateAccess().getIsDistinctDISTINCTKeyword_2_0()); }
)

{ after(grammarAccess.getCountAggregateAccess().getIsDistinctDISTINCTKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CountAggregate__ItemAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCountAggregateAccess().getItemAliasAttributeExpressionParserRuleCall_3_0()); }
	ruleAliasAttributeExpression{ after(grammarAccess.getCountAggregateAccess().getItemAliasAttributeExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectConstructorExpression__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectConstructorExpressionAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getSelectConstructorExpressionAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectConstructorExpression__ItemsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectConstructorExpressionAccess().getItemsAliasAttributeExpressionParserRuleCall_3_0()); }
	ruleAliasAttributeExpression{ after(grammarAccess.getSelectConstructorExpressionAccess().getItemsAliasAttributeExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectConstructorExpression__ItemsAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectConstructorExpressionAccess().getItemsAliasAttributeExpressionParserRuleCall_4_1_0()); }
	ruleAliasAttributeExpression{ after(grammarAccess.getSelectConstructorExpressionAccess().getItemsAliasAttributeExpressionParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FromClause__FromEntriesAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromClauseAccess().getFromEntriesFromClassParserRuleCall_1_0()); }
	ruleFromClass{ after(grammarAccess.getFromClauseAccess().getFromEntriesFromClassParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FromClause__FromEntriesAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromClauseAccess().getFromEntriesFromEntryParserRuleCall_2_1_0()); }
	ruleFromEntry{ after(grammarAccess.getFromClauseAccess().getFromEntriesFromEntryParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getVariableDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FromClassId__TypeAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromClassIdAccess().getTypeIDTerminalRuleCall_0()); }
	RULE_ID{ after(grammarAccess.getFromClassIdAccess().getTypeIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FromClassVar__TypeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromClassVarAccess().getTypeIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getFromClassVarAccess().getTypeIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FromClassVar__VariableAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromClassVarAccess().getVariableVariableDeclarationParserRuleCall_1_0()); }
	ruleVariableDeclaration{ after(grammarAccess.getFromClassVarAccess().getVariableVariableDeclarationParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FromClassVar__JoinsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromClassVarAccess().getJoinsFromJoinParserRuleCall_2_0()); }
	ruleFromJoin{ after(grammarAccess.getFromClassVarAccess().getJoinsFromJoinParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FromCollection__PathAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromCollectionAccess().getPathAliasAttributeExpressionParserRuleCall_2_0()); }
	ruleAliasAttributeExpression{ after(grammarAccess.getFromCollectionAccess().getPathAliasAttributeExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FromCollection__VariableAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromCollectionAccess().getVariableVariableDeclarationParserRuleCall_4_0()); }
	ruleVariableDeclaration{ after(grammarAccess.getFromCollectionAccess().getVariableVariableDeclarationParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Join__IsFetchAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJoinAccess().getIsFetchFETCHKeyword_1_0()); }
(
{ before(grammarAccess.getJoinAccess().getIsFetchFETCHKeyword_1_0()); }

	'FETCH' 

{ after(grammarAccess.getJoinAccess().getIsFetchFETCHKeyword_1_0()); }
)

{ after(grammarAccess.getJoinAccess().getIsFetchFETCHKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Join__PathAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJoinAccess().getPathAliasAttributeExpressionParserRuleCall_2_0()); }
	ruleAliasAttributeExpression{ after(grammarAccess.getJoinAccess().getPathAliasAttributeExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Join__VariableAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJoinAccess().getVariableVariableDeclarationParserRuleCall_3_0()); }
	ruleVariableDeclaration{ after(grammarAccess.getJoinAccess().getVariableVariableDeclarationParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LeftJoin__IsOuterAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLeftJoinAccess().getIsOuterOUTERKeyword_1_0()); }
(
{ before(grammarAccess.getLeftJoinAccess().getIsOuterOUTERKeyword_1_0()); }

	'OUTER' 

{ after(grammarAccess.getLeftJoinAccess().getIsOuterOUTERKeyword_1_0()); }
)

{ after(grammarAccess.getLeftJoinAccess().getIsOuterOUTERKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LeftJoin__IsFetchAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLeftJoinAccess().getIsFetchFETCHKeyword_3_0()); }
(
{ before(grammarAccess.getLeftJoinAccess().getIsFetchFETCHKeyword_3_0()); }

	'FETCH' 

{ after(grammarAccess.getLeftJoinAccess().getIsFetchFETCHKeyword_3_0()); }
)

{ after(grammarAccess.getLeftJoinAccess().getIsFetchFETCHKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LeftJoin__PathAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLeftJoinAccess().getPathAliasAttributeExpressionParserRuleCall_4_0()); }
	ruleAliasAttributeExpression{ after(grammarAccess.getLeftJoinAccess().getPathAliasAttributeExpressionParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LeftJoin__VariableAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLeftJoinAccess().getVariableVariableDeclarationParserRuleCall_5_0()); }
	ruleVariableDeclaration{ after(grammarAccess.getLeftJoinAccess().getVariableVariableDeclarationParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InnerJoin__IsFetchAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInnerJoinAccess().getIsFetchFETCHKeyword_2_0()); }
(
{ before(grammarAccess.getInnerJoinAccess().getIsFetchFETCHKeyword_2_0()); }

	'FETCH' 

{ after(grammarAccess.getInnerJoinAccess().getIsFetchFETCHKeyword_2_0()); }
)

{ after(grammarAccess.getInnerJoinAccess().getIsFetchFETCHKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InnerJoin__PathAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInnerJoinAccess().getPathAliasAttributeExpressionParserRuleCall_3_0()); }
	ruleAliasAttributeExpression{ after(grammarAccess.getInnerJoinAccess().getPathAliasAttributeExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InnerJoin__VariableAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInnerJoinAccess().getVariableVariableDeclarationParserRuleCall_4_0()); }
	ruleVariableDeclaration{ after(grammarAccess.getInnerJoinAccess().getVariableVariableDeclarationParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WhereClause__WhereEntryAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhereClauseAccess().getWhereEntryOrExpressionParserRuleCall_1_0()); }
	ruleOrExpression{ after(grammarAccess.getWhereClauseAccess().getWhereEntryOrExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__EntriesAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getEntriesAndExpressionParserRuleCall_1_1_1_0()); }
	ruleAndExpression{ after(grammarAccess.getOrExpressionAccess().getEntriesAndExpressionParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__EntriesAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getEntriesConcreteExpressionParserRuleCall_1_1_1_0()); }
	ruleConcreteExpression{ after(grammarAccess.getAndExpressionAccess().getEntriesConcreteExpressionParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OperatorExpression__LhsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorExpressionAccess().getLhsVariableParserRuleCall_0_0()); }
	ruleVariable{ after(grammarAccess.getOperatorExpressionAccess().getLhsVariableParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OperatorExpression__OperatorAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorExpressionAccess().getOperatorOperatorEnumRuleCall_1_0()); }
	ruleOperator{ after(grammarAccess.getOperatorExpressionAccess().getOperatorOperatorEnumRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OperatorExpression__RhsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorExpressionAccess().getRhsExpressionTermParserRuleCall_2_0()); }
	ruleExpressionTerm{ after(grammarAccess.getOperatorExpressionAccess().getRhsExpressionTermParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExistsExpression__IsNotAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExistsExpressionAccess().getIsNotNOTKeyword_0_0()); }
(
{ before(grammarAccess.getExistsExpressionAccess().getIsNotNOTKeyword_0_0()); }

	'NOT' 

{ after(grammarAccess.getExistsExpressionAccess().getIsNotNOTKeyword_0_0()); }
)

{ after(grammarAccess.getExistsExpressionAccess().getIsNotNOTKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExistsExpression__QueryAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExistsExpressionAccess().getQueryQueryExpressionParserRuleCall_2_0()); }
	ruleQueryExpression{ after(grammarAccess.getExistsExpressionAccess().getQueryQueryExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AllExpression__QueryAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAllExpressionAccess().getQueryQueryExpressionParserRuleCall_1_0()); }
	ruleQueryExpression{ after(grammarAccess.getAllExpressionAccess().getQueryQueryExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AnyExpression__QueryAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnyExpressionAccess().getQueryQueryExpressionParserRuleCall_1_0()); }
	ruleQueryExpression{ after(grammarAccess.getAnyExpressionAccess().getQueryQueryExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SomeExpression__QueryAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSomeExpressionAccess().getQueryQueryExpressionParserRuleCall_1_0()); }
	ruleQueryExpression{ after(grammarAccess.getSomeExpressionAccess().getQueryQueryExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionExpression__LhsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectionExpressionAccess().getLhsVariableParserRuleCall_0_0()); }
	ruleVariable{ after(grammarAccess.getCollectionExpressionAccess().getLhsVariableParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionExpression__IsNotAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectionExpressionAccess().getIsNotNOTKeyword_1_0()); }
(
{ before(grammarAccess.getCollectionExpressionAccess().getIsNotNOTKeyword_1_0()); }

	'NOT' 

{ after(grammarAccess.getCollectionExpressionAccess().getIsNotNOTKeyword_1_0()); }
)

{ after(grammarAccess.getCollectionExpressionAccess().getIsNotNOTKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionExpression__RhsAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectionExpressionAccess().getRhsAliasAttributeExpressionParserRuleCall_4_0()); }
	ruleAliasAttributeExpression{ after(grammarAccess.getCollectionExpressionAccess().getRhsAliasAttributeExpressionParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NullComparisonExpression__LhsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNullComparisonExpressionAccess().getLhsVariableParserRuleCall_0_0()); }
	ruleVariable{ after(grammarAccess.getNullComparisonExpressionAccess().getLhsVariableParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NullComparisonExpression__IsNotAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNullComparisonExpressionAccess().getIsNotNOTKeyword_2_0()); }
(
{ before(grammarAccess.getNullComparisonExpressionAccess().getIsNotNOTKeyword_2_0()); }

	'NOT' 

{ after(grammarAccess.getNullComparisonExpressionAccess().getIsNotNOTKeyword_2_0()); }
)

{ after(grammarAccess.getNullComparisonExpressionAccess().getIsNotNOTKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EmptyComparisonExpression__LhsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEmptyComparisonExpressionAccess().getLhsVariableParserRuleCall_0_0()); }
	ruleVariable{ after(grammarAccess.getEmptyComparisonExpressionAccess().getLhsVariableParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EmptyComparisonExpression__IsNotAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEmptyComparisonExpressionAccess().getIsNotNOTKeyword_2_0()); }
(
{ before(grammarAccess.getEmptyComparisonExpressionAccess().getIsNotNOTKeyword_2_0()); }

	'NOT' 

{ after(grammarAccess.getEmptyComparisonExpressionAccess().getIsNotNOTKeyword_2_0()); }
)

{ after(grammarAccess.getEmptyComparisonExpressionAccess().getIsNotNOTKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LikeExpression__LhsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLikeExpressionAccess().getLhsVariableParserRuleCall_0_0()); }
	ruleVariable{ after(grammarAccess.getLikeExpressionAccess().getLhsVariableParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LikeExpression__IsNotAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLikeExpressionAccess().getIsNotNOTKeyword_1_0()); }
(
{ before(grammarAccess.getLikeExpressionAccess().getIsNotNOTKeyword_1_0()); }

	'NOT' 

{ after(grammarAccess.getLikeExpressionAccess().getIsNotNOTKeyword_1_0()); }
)

{ after(grammarAccess.getLikeExpressionAccess().getIsNotNOTKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LikeExpression__PatternAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLikeExpressionAccess().getPatternSTRINGTerminalRuleCall_3_0()); }
	RULE_STRING{ after(grammarAccess.getLikeExpressionAccess().getPatternSTRINGTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InSeqExpression__LhsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInSeqExpressionAccess().getLhsVariableParserRuleCall_0_0()); }
	ruleVariable{ after(grammarAccess.getInSeqExpressionAccess().getLhsVariableParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InSeqExpression__IsNotAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInSeqExpressionAccess().getIsNotNOTKeyword_1_0()); }
(
{ before(grammarAccess.getInSeqExpressionAccess().getIsNotNOTKeyword_1_0()); }

	'NOT' 

{ after(grammarAccess.getInSeqExpressionAccess().getIsNotNOTKeyword_1_0()); }
)

{ after(grammarAccess.getInSeqExpressionAccess().getIsNotNOTKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InSeqExpression__ItemsAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInSeqExpressionAccess().getItemsVariableParserRuleCall_4_0()); }
	ruleVariable{ after(grammarAccess.getInSeqExpressionAccess().getItemsVariableParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InSeqExpression__ItemsAssignment_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInSeqExpressionAccess().getItemsVariableParserRuleCall_5_1_0()); }
	ruleVariable{ after(grammarAccess.getInSeqExpressionAccess().getItemsVariableParserRuleCall_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InQueryExpression__LhsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInQueryExpressionAccess().getLhsVariableParserRuleCall_0_0()); }
	ruleVariable{ after(grammarAccess.getInQueryExpressionAccess().getLhsVariableParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InQueryExpression__IsNotAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInQueryExpressionAccess().getIsNotNOTKeyword_1_0()); }
(
{ before(grammarAccess.getInQueryExpressionAccess().getIsNotNOTKeyword_1_0()); }

	'NOT' 

{ after(grammarAccess.getInQueryExpressionAccess().getIsNotNOTKeyword_1_0()); }
)

{ after(grammarAccess.getInQueryExpressionAccess().getIsNotNOTKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InQueryExpression__QueryAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInQueryExpressionAccess().getQueryQueryExpressionParserRuleCall_3_0()); }
	ruleQueryExpression{ after(grammarAccess.getInQueryExpressionAccess().getQueryQueryExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BetweenExpression__LhsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBetweenExpressionAccess().getLhsVariableParserRuleCall_0_0()); }
	ruleVariable{ after(grammarAccess.getBetweenExpressionAccess().getLhsVariableParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BetweenExpression__IsNotAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBetweenExpressionAccess().getIsNotNOTKeyword_1_0()); }
(
{ before(grammarAccess.getBetweenExpressionAccess().getIsNotNOTKeyword_1_0()); }

	'NOT' 

{ after(grammarAccess.getBetweenExpressionAccess().getIsNotNOTKeyword_1_0()); }
)

{ after(grammarAccess.getBetweenExpressionAccess().getIsNotNOTKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BetweenExpression__MinAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBetweenExpressionAccess().getMinValueParserRuleCall_3_0()); }
	ruleValue{ after(grammarAccess.getBetweenExpressionAccess().getMinValueParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BetweenExpression__MaxAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBetweenExpressionAccess().getMaxValueParserRuleCall_5_0()); }
	ruleValue{ after(grammarAccess.getBetweenExpressionAccess().getMaxValueParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AliasAttributeExpression__AliasAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAliasAttributeExpressionAccess().getAliasVariableDeclarationCrossReference_0_0()); }
(
{ before(grammarAccess.getAliasAttributeExpressionAccess().getAliasVariableDeclarationIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getAliasAttributeExpressionAccess().getAliasVariableDeclarationIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getAliasAttributeExpressionAccess().getAliasVariableDeclarationCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AliasAttributeExpression__AttributesAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAliasAttributeExpressionAccess().getAttributesIDTerminalRuleCall_1_1_0()); }
	RULE_ID{ after(grammarAccess.getAliasAttributeExpressionAccess().getAttributesIDTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterExpression__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterExpressionAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getParameterExpressionAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringFunction__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringFunctionAccess().getNameStringFunctionNameParserRuleCall_0_0()); }
	ruleStringFunctionName{ after(grammarAccess.getStringFunctionAccess().getNameStringFunctionNameParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringFunction__ParamsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringFunctionAccess().getParamsVariableParserRuleCall_2_0()); }
	ruleVariable{ after(grammarAccess.getStringFunctionAccess().getParamsVariableParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringFunction__ParamsAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringFunctionAccess().getParamsVariableParserRuleCall_3_1_0()); }
	ruleVariable{ after(grammarAccess.getStringFunctionAccess().getParamsVariableParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumericFunction__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericFunctionAccess().getNameNumericFunctionNameParserRuleCall_0_0()); }
	ruleNumericFunctionName{ after(grammarAccess.getNumericFunctionAccess().getNameNumericFunctionNameParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumericFunction__ParamsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericFunctionAccess().getParamsVariableParserRuleCall_2_0()); }
	ruleVariable{ after(grammarAccess.getNumericFunctionAccess().getParamsVariableParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumericFunction__ParamsAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericFunctionAccess().getParamsVariableParserRuleCall_3_1_0()); }
	ruleVariable{ after(grammarAccess.getNumericFunctionAccess().getParamsVariableParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerExpression__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerExpressionAccess().getValueINTTerminalRuleCall_0()); }
	RULE_INT{ after(grammarAccess.getIntegerExpressionAccess().getValueINTTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringExpression__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringExpressionAccess().getValueSTRINGTerminalRuleCall_0()); }
	RULE_STRING{ after(grammarAccess.getStringExpressionAccess().getValueSTRINGTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NullExpression__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNullExpressionAccess().getValueNULLKeyword_0()); }
(
{ before(grammarAccess.getNullExpressionAccess().getValueNULLKeyword_0()); }

	'NULL' 

{ after(grammarAccess.getNullExpressionAccess().getValueNULLKeyword_0()); }
)

{ after(grammarAccess.getNullExpressionAccess().getValueNULLKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanExpression__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanExpressionAccess().getValueAlternatives_0()); }
(rule__BooleanExpression__ValueAlternatives_0)
{ after(grammarAccess.getBooleanExpressionAccess().getValueAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DateTimeExpression__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDateTimeExpressionAccess().getValueLiteralTemporalTerminalRuleCall_0()); }
	RULE_LITERALTEMPORAL{ after(grammarAccess.getDateTimeExpressionAccess().getValueLiteralTemporalTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_LITERALTEMPORAL : (RULE_DATE_LITERAL|RULE_TIME_LITERAL|RULE_TIMESTAMP_LITERAL);

RULE_DATE_LITERAL : '(' 'd' (' '|'\t')+ '\'' RULE_DATE_STRING '\'' (' '|'\t')* ')';

RULE_TIME_LITERAL : '(' 't' (' '|'\t')+ '\'' RULE_TIME_STRING '\'' (' '|'\t')* ')';

RULE_TIMESTAMP_LITERAL : '(' 'ts' (' '|'\t')+ '\'' RULE_DATE_STRING ' ' RULE_TIME_STRING '\'' (' '|'\t')* ')';

RULE_DATE_STRING : '0'..'9' '0'..'9' '0'..'9' '0'..'9' '-' '0'..'9' '0'..'9' '-' '0'..'9' '0'..'9';

RULE_TIME_STRING : '0'..'9' ('0'..'9')? ':' '0'..'9' '0'..'9' ':' '0'..'9' '0'..'9' '.' ('0'..'9')*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


