	---
	Data source
	---
	Marco หงุ่ยตระกูล-Schulze
	---
	2012-02-16

Data source

	A <data source> is a set of coordinates telling Vestigo where to find your data and how to understand it.
	If you ever used an SQL query tool, you remember that you had to specify host name, user name, password and
	similar data. With Vestigo, it's the same - you only have to specify a few additional things.

	When you set up a data source, you give it a name and can then re-use the same data source for every
	query you wish to run: You can execute every JDO query on every JDO data source; and every JPA query
	on every JPA data source likewise.

	Note, that the names <data source> and <connection profile> are often used interchangeably.

	A data source consists of the following coordinates:

* {Classpath}

	Vestigo starts a {{{./jdo/persistence-manager-factory.html}JDO PersistenceManagerFactory}} or a
	{{{./jpa/entity-manager-factory.html}JPA EntityManagerFactory}}. For this to work, you have to
	tell Vestigo where your data model as well as the JDO or JPA implementation (e.g. DataNucleus,
	EclipseLink, Hibernate, OpenJPA, etc.) can be found.

	Similar to the "{{{http://en.wikipedia.org/wiki/Classpath_%28Java%29}-classpath}}" argument of the <<<java>>> program,
	you specify a list of {{{http://en.wikipedia.org/wiki/JAR_%28file_format%29}JAR files}} and "classes"-directories.
	
	Here's what you can add to the classpath:

** "classes"-directories

	A "classes"-directory is the root of the Java-package-directory-tree containing <<<.class>>> files.

** Libraries (JAR files)

	Java libraries are usually packaged as {{{http://en.wikipedia.org/wiki/JAR_%28file_format%29}JAR files}}. Of course,
	Vestigo supports them in the classpath of a data source.

** Web applications (WAR files)

	A web application is usually packaged in a {{{http://en.wikipedia.org/wiki/WAR_file_format_%28Sun%29}WAR file}}. Vestigo
	supports both the classes in the <<<WEB-INF/classes>>> directory inside the WAR and the libraries inside the <<<WEB-INF/lib>>>
	directory (i.e. JARs nested inside the WAR file).

** Container archives (EAR, RAR, SAR, ZIP) 

	You can put {{{http://en.wikipedia.org/wiki/EAR_%28file_format%29}EAR}}, RAR, SAR or
	{{{http://en.wikipedia.org/wiki/Zip_%28file_format%29}ZIP files}} containing
	other libraries. Vestigo will automatically include all the nested JARs. Note, that recursive nesting is supported.

** All archives in a directory

	You can add all archives (EAR, JAR, ...) found in a directory - either flat (one single directory only) or fully recursive
	(including all sub-directories). This is done by using the suffix "/*" or "/**/*" respectively. Note that this notation
	does not include "classes"-directories but only archives contained in this directory. "classes"-directories always have to be
	specified individually.

** Java projects

	If you have the Vestigo-{{{http://www.eclipse.org/jdt/}JDT}}-integration installed, you can add a project from your
	Eclipse workspace. Vestigo resolves
	project references recursively (i.e. with transitive dependencies), hence you normally only need to add one single
	project: the top-level project (assembly).
	However, if your data model is modular and there is no single top-level project, you may add as many projects as you want.

** Maven artifacts

	If you have {{{http://maven.apache.org/}Maven}} and the Vestigo-Maven-integration installed, you can add Maven artifacts
	to your classpath. Vestigo uses the <<<mvn>>> command to resolve the specified artifacts (including all transitive
	dependencies).

** Classpath variables

	You can use variables inside the classpath-elements using the syntax "$\{VARIABLE}" as you are used from Ant or Maven.
	Besides all system properties (e.g. <<<$\{user.home}>>> or <<<$\{java.io.tmpdir}>>>), the following variables
	are supported:

	* <<<$\{maven.localRepository}>>>: This is equivalent to <<<$\{user.home}/.m2/repository>>>.

	* <<<$\{workspace}>>>: This references your current workspace.

	[]

** Example:

	[[1]] <<<file:$\{user.home}/someWorkspace/projectA/bin>>>

	[[1]] <<<file:$\{user.home}/someWorkspace/projectB/target/classes/>>>

	[[1]] <<<file:$\{user.home}/someWorkspace/projectB/lib/SomeLibrary.jar>>>

	[[1]] <<<file:$\{user.home}/someApplicationServer/deploy/*>>>

	[[1]] <<<file:$\{maven.localRepository}/org/nightlabs/**/*>>>

	[[1]] <<<project:com.mycompany.myproject>>>

	[[1]] <<<maven:org.eclipse.persistence:org.eclipse.persistence.jpa:2.3.2>>>

	[]

	The first two classpath-elements are understood as "classes"-directories. That means, if there is the class
	<<<my.company.MyClass>>> in <projectA>, it must be located in the local file system at this location:
	<<<$\{user.home}/someWorkspace/projectA/bin/my/company/MyClass.class>>>. If there is a JAR inside one of these
	directories, it is ignored!
	
	The third classpath-element references the library <SomeLibrary.jar> inside the directory <lib> of the project
	<projectB>.

	The fourth classpath-element denotes all archives (JAR, EAR, SAR, ..., WAR, ZIP) inside <<<$\{user.home}/someApplicationServer/deploy/*>>>,
	but not	inside the sub-directories. For example, <<<$\{user.home}/someApplicationServer/deploy/MyWebApp.war>>> would be included, but
	<<<$\{user.home}/someApplicationServer/deploy/something.last/AnotherWebApp.war>>> would <<not>> be included.

	The fifth classpath-element adds all archives that are found in the directory <<<$\{maven.localRepository}/org/nightlabs>>>
	or any of its sub-directories.

	The sixth classpath-element is only understood, if the Vestigo-JDT-integration is installed. It will pull the entire
	classpath of the project <com.mycompany.myproject> into the data source's classpath. That includes transitive dependencies
	and all classpath-containers that your Eclipse IDE supports.

	The seventh classpath-element is only understood, if the Vestigo-Maven-integration is installed. It will run the <<<mvn>>>
	command (using the <<<maven-dependency-plugin>>>) to resolve the artifact with groupId <<<org.eclipse.persistence>>>
	and artifactId <<<org.eclipse.persistence.jpa>>> (and version 2.3.2). All transitive dependencies are resolved, too, i.e. both the
	specified artifact as well as all dependencies are downloaded (to your local Maven repository, i.e. <<<$\{user.home}/.m2/repository/>>>)
	and added to your classpath.

* {Persistence unit}

	A persistence unit groups (persistent) classes, settings and other meta-data under a name that can be used
	by the application to tell the JDO/JPA engine with which entities and which database it wants to work.
	If your data model is accompanied by a persistence unit, you should make Vestigo use it.

	Note, that you can override settings which do not apply to the environment provided by Vestigo.
	See {{Persistence properties}} below.

	See {{{./jdo/persistence-unit.html}JDO persistence unit}} or {{{./jpa/persistence-unit.html}JPA persistence unit}}
	for further details.

* {Persistence properties}

	In most cases, the persistence unit does not declare all information required for a connection. For example,
	it is common, that the connection-URL as well as user-name and password are not specified in the
	persistence unit. After all, the application likely needs to communicate with different database servers
	and therefore this information is stored outside in some configuration specified by an administrator
	or user (rather than being hard-coded into the persistence unit by the developer).

	Additionally to completing information missing in the persistence unit, the persistence properties
	can override settings that are already present, but undesired or inadequate. For example, you might want
	to disable features that slow down the startup process of your persistence engine (e.g. validation of
	indexes and RDBMS table structure).

	And if your application runs in a managed environment (aka application server like Glassfish, JBoss, Tomcat etc.),
	the persistence unit likely declares to make use of {{{http://en.wikipedia.org/wiki/Java_Transaction_API}JTA}}.
	But JTA is not available in Vestigo. Thus, you'll have to override this setting with the
	value 'RESOURCE_JOCAL' or - even simpler - <<<null>>>.

	See {{{./jdo/persistence-properties.html}JDO persistence properties}} or
	{{{./jpa/persistence-properties.html}JPA persistence properties}}
	for further details.

* How to set up a JDO data source

	Please {{{./jdo/how-to-set-up-a-jdo-data-source.html}click here}} to see a series of screenshots explaining
	{{{./jdo/how-to-set-up-a-jdo-data-source.html}how to set up a JDO data source}}.

* How to set up a JPA data source

	Please {{{./jpa/how-to-set-up-a-jpa-data-source.html}click here}} to see a series of screenshots explaining
	{{{./jpa/how-to-set-up-a-jpa-data-source.html}how to set up a JPA data source}}.
