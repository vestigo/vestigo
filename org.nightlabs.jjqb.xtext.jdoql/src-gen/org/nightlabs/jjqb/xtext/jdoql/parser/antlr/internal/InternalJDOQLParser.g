/*
* generated by Xtext
*/
parser grammar InternalJDOQLParser;

options {
	tokenVocab=InternalJDOQLLexer;
	superClass=AbstractInternalAntlrParser;
	
}

@header {
package org.nightlabs.jjqb.xtext.jdoql.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.nightlabs.jjqb.xtext.jdoql.services.JDOQLGrammarAccess;

}

@members {


	private JDOQLGrammarAccess grammarAccess;
	 	
	public InternalJDOQLParser(TokenStream input, JDOQLGrammarAccess grammarAccess) {
		this(input);
		this.grammarAccess = grammarAccess;
		registerRules(grammarAccess.getGrammar());
	}
	
	@Override
	protected String getFirstRuleName() {
		return "SingleStringJDOQL";	
	} 
	   	   	
	@Override
	protected JDOQLGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}
}

@rulecatch { 
	catch (RecognitionException re) { 
	    recover(input,re); 
	    appendSkippedTokens();
	}
}




// Entry rule entryRuleSingleStringJDOQL
entryRuleSingleStringJDOQL returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getSingleStringJDOQLRule()); }
	 iv_ruleSingleStringJDOQL=ruleSingleStringJDOQL 
	 { $current=$iv_ruleSingleStringJDOQL.current; } 
	 EOF 
;

// Rule SingleStringJDOQL
ruleSingleStringJDOQL returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSingleStringJDOQLAccess().getSelectSelectParserRuleCall_0_0()); 
	    }
		lv_select_0_0=ruleSelect		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSingleStringJDOQLRule());
	        }
       		set(
       			$current, 
       			"select",
        		lv_select_0_0, 
        		"Select");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSingleStringJDOQLAccess().getFromFromParserRuleCall_1_0()); 
	    }
		lv_from_1_0=ruleFrom		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSingleStringJDOQLRule());
	        }
       		set(
       			$current, 
       			"from",
        		lv_from_1_0, 
        		"From");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSingleStringJDOQLAccess().getWhereWhereParserRuleCall_2_0()); 
	    }
		lv_where_2_0=ruleWhere		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSingleStringJDOQLRule());
	        }
       		set(
       			$current, 
       			"where",
        		lv_where_2_0, 
        		"Where");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleSelect
entryRuleSelect returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getSelectRule()); }
	 iv_ruleSelect=ruleSelect 
	 { $current=$iv_ruleSelect.current; } 
	 EOF 
;

// Rule Select
ruleSelect returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_37
    {
    	newLeafNode(otherlv_0, grammarAccess.getSelectAccess().getSelectKeyword_0());
    }
(
	otherlv_1=KEYWORD_38
    {
    	newLeafNode(otherlv_1, grammarAccess.getSelectAccess().getUniqueKeyword_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectAccess().getResultClauseResultClauseParserRuleCall_2_0()); 
	    }
		lv_resultClause_2_0=ruleResultClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectRule());
	        }
       		set(
       			$current, 
       			"resultClause",
        		lv_resultClause_2_0, 
        		"ResultClause");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectAccess().getIntoClauseIntoClauseParserRuleCall_3_0()); 
	    }
		lv_intoClause_3_0=ruleIntoClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectRule());
	        }
       		set(
       			$current, 
       			"intoClause",
        		lv_intoClause_3_0, 
        		"IntoClause");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleResultClause
entryRuleResultClause returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getResultClauseRule()); }
	 iv_ruleResultClause=ruleResultClause 
	 { $current=$iv_ruleResultClause.current; } 
	 EOF 
;

// Rule ResultClause
ruleResultClause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	otherlv_0=KEYWORD_40
    {
    	newLeafNode(otherlv_0, grammarAccess.getResultClauseAccess().getDistinctKeyword_0());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getResultClauseAccess().getResultSpecsResultSpecsParserRuleCall_1_0()); 
	    }
		lv_resultSpecs_1_0=ruleResultSpecs		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getResultClauseRule());
	        }
       		add(
       			$current, 
       			"resultSpecs",
        		lv_resultSpecs_1_0, 
        		"ResultSpecs");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_2=KEYWORD_8
    {
    	newLeafNode(otherlv_2, grammarAccess.getResultClauseAccess().getCommaKeyword_2());
    }
)?)
;





// Entry rule entryRuleIntoClause
entryRuleIntoClause returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getIntoClauseRule()); }
	 iv_ruleIntoClause=ruleIntoClause 
	 { $current=$iv_ruleIntoClause.current; } 
	 EOF 
;

// Rule IntoClause
ruleIntoClause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_27
    {
    	newLeafNode(otherlv_0, grammarAccess.getIntoClauseAccess().getIntoKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIntoClauseAccess().getResultClassNameClassOrInterfaceNameParserRuleCall_1_0()); 
	    }
		lv_resultClassName_1_0=ruleClassOrInterfaceName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIntoClauseRule());
	        }
       		set(
       			$current, 
       			"resultClassName",
        		lv_resultClassName_1_0, 
        		"ClassOrInterfaceName");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleFrom
entryRuleFrom returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getFromRule()); }
	 iv_ruleFrom=ruleFrom 
	 { $current=$iv_ruleFrom.current; } 
	 EOF 
;

// Rule From
ruleFrom returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_26
    {
    	newLeafNode(otherlv_0, grammarAccess.getFromAccess().getFromKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFromAccess().getCandidateClassNameCandidateClassNameParserRuleCall_1_0()); 
	    }
		lv_candidateClassName_1_0=ruleCandidateClassName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFromRule());
	        }
       		set(
       			$current, 
       			"candidateClassName",
        		lv_candidateClassName_1_0, 
        		"CandidateClassName");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFromAccess().getExcludeClauseExcludeClauseParserRuleCall_2_0()); 
	    }
		lv_excludeClause_2_0=ruleExcludeClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFromRule());
	        }
       		set(
       			$current, 
       			"excludeClause",
        		lv_excludeClause_2_0, 
        		"ExcludeClause");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleWhere
entryRuleWhere returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getWhereRule()); }
	 iv_ruleWhere=ruleWhere 
	 { $current=$iv_ruleWhere.current; } 
	 EOF 
;

// Rule Where
ruleWhere returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_35
    {
    	newLeafNode(otherlv_0, grammarAccess.getWhereAccess().getWhereKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWhereAccess().getEBooleanExpressionParserRuleCall_1_0()); 
	    }
		lv_e_1_0=ruleBooleanExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWhereRule());
	        }
       		set(
       			$current, 
       			"e",
        		lv_e_1_0, 
        		"BooleanExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleExcludeClause
entryRuleExcludeClause returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getExcludeClauseRule()); }
	 iv_ruleExcludeClause=ruleExcludeClause 
	 { $current=$iv_ruleExcludeClause.current; } 
	 EOF 
;

// Rule ExcludeClause
ruleExcludeClause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_excludeSubclasses_0_0=
	KEYWORD_42
    {
        newLeafNode(lv_excludeSubclasses_0_0, grammarAccess.getExcludeClauseAccess().getExcludeSubclassesExcludeSubclassesKeyword_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExcludeClauseRule());
	        }
       		setWithLastConsumed($current, "excludeSubclasses", lv_excludeSubclasses_0_0, "exclude subclasses");
	    }

)
)
;





// Entry rule entryRuleQualifiedIdentifier
entryRuleQualifiedIdentifier returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getQualifiedIdentifierRule()); } 
	 iv_ruleQualifiedIdentifier=ruleQualifiedIdentifier 
	 { $current=$iv_ruleQualifiedIdentifier.current.getText(); }  
	 EOF 
;

// Rule QualifiedIdentifier
ruleQualifiedIdentifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getQualifiedIdentifierAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw=KEYWORD_10 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedIdentifierAccess().getFullStopKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getQualifiedIdentifierAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;





// Entry rule entryRuleCandidateClassName
entryRuleCandidateClassName returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getCandidateClassNameRule()); } 
	 iv_ruleCandidateClassName=ruleCandidateClassName 
	 { $current=$iv_ruleCandidateClassName.current.getText(); }  
	 EOF 
;

// Rule CandidateClassName
ruleCandidateClassName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:

    { 
        newCompositeNode(grammarAccess.getCandidateClassNameAccess().getQualifiedIdentifierParserRuleCall()); 
    }
    this_QualifiedIdentifier_0=ruleQualifiedIdentifier    {
		$current.merge(this_QualifiedIdentifier_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    ;





// Entry rule entryRuleClassOrInterfaceName
entryRuleClassOrInterfaceName returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getClassOrInterfaceNameRule()); } 
	 iv_ruleClassOrInterfaceName=ruleClassOrInterfaceName 
	 { $current=$iv_ruleClassOrInterfaceName.current.getText(); }  
	 EOF 
;

// Rule ClassOrInterfaceName
ruleClassOrInterfaceName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:

    { 
        newCompositeNode(grammarAccess.getClassOrInterfaceNameAccess().getQualifiedIdentifierParserRuleCall()); 
    }
    this_QualifiedIdentifier_0=ruleQualifiedIdentifier    {
		$current.merge(this_QualifiedIdentifier_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    ;





// Entry rule entryRuleResultSpecs
entryRuleResultSpecs returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getResultSpecsRule()); }
	 iv_ruleResultSpecs=ruleResultSpecs 
	 { $current=$iv_ruleResultSpecs.current; } 
	 EOF 
;

// Rule ResultSpecs
ruleResultSpecs returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getResultSpecsAccess().getResultSpecParserRuleCall_0()); 
    }
    this_ResultSpec_0=ruleResultSpec
    {
        $current = $this_ResultSpec_0.current;
        afterParserOrEnumRuleCall();
    }
(
	otherlv_1=KEYWORD_8
    {
    	newLeafNode(otherlv_1, grammarAccess.getResultSpecsAccess().getCommaKeyword_1());
    }
)?)
;





// Entry rule entryRuleResultSpec
entryRuleResultSpec returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getResultSpecRule()); }
	 iv_ruleResultSpec=ruleResultSpec 
	 { $current=$iv_ruleResultSpec.current; } 
	 EOF 
;

// Rule ResultSpec
ruleResultSpec returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getResultSpecAccess().getExpressionParserRuleCall_0()); 
    }
    this_Expression_0=ruleExpression
    {
        $current = $this_Expression_0.current;
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getResultSpecAccess().getResultNamingResultNamingParserRuleCall_1_0()); 
	    }
		lv_resultNaming_1_0=ruleResultNaming		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getResultSpecRule());
	        }
       		set(
       			$current, 
       			"resultNaming",
        		lv_resultNaming_1_0, 
        		"ResultNaming");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleResultNaming
entryRuleResultNaming returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getResultNamingRule()); }
	 iv_ruleResultNaming=ruleResultNaming 
	 { $current=$iv_ruleResultNaming.current; } 
	 EOF 
;

// Rule ResultNaming
ruleResultNaming returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_21
    {
    	newLeafNode(otherlv_0, grammarAccess.getResultNamingAccess().getAsKeyword_0());
    }
(
(
		lv_identifier_1_0=RULE_ID
		{
			newLeafNode(lv_identifier_1_0, grammarAccess.getResultNamingAccess().getIdentifierIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getResultNamingRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"identifier",
        		lv_identifier_1_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleBooleanExpression
entryRuleBooleanExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getBooleanExpressionRule()); }
	 iv_ruleBooleanExpression=ruleBooleanExpression 
	 { $current=$iv_ruleBooleanExpression.current; } 
	 EOF 
;

// Rule BooleanExpression
ruleBooleanExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getBooleanExpressionAccess().getLeftExpressionParserRuleCall_0_0()); 
	    }
		lv_left_0_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBooleanExpressionRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_0_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getBooleanExpressionAccess().getOpBooleanOpParserRuleCall_1_0_0()); 
	    }
		lv_op_1_0=ruleBooleanOp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBooleanExpressionRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_1_0, 
        		"BooleanOp");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBooleanExpressionAccess().getRightExpressionParserRuleCall_1_1_0()); 
	    }
		lv_right_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBooleanExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleBooleanOp
entryRuleBooleanOp returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getBooleanOpRule()); } 
	 iv_ruleBooleanOp=ruleBooleanOp 
	 { $current=$iv_ruleBooleanOp.current.getText(); }  
	 EOF 
;

// Rule BooleanOp
ruleBooleanOp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=KEYWORD_13 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBooleanOpAccess().getGreaterThanSignKeyword_0()); 
    }

    |
	kw=KEYWORD_20 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBooleanOpAccess().getGreaterThanSignEqualsSignKeyword_1()); 
    }

    |
	kw=KEYWORD_12 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBooleanOpAccess().getLessThanSignKeyword_2()); 
    }

    |
	kw=KEYWORD_18 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBooleanOpAccess().getLessThanSignEqualsSignKeyword_3()); 
    }

    |
	kw=KEYWORD_41 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBooleanOpAccess().getInstanceofKeyword_4()); 
    }

    |
	kw=KEYWORD_19 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBooleanOpAccess().getEqualsSignEqualsSignKeyword_5()); 
    }

    |
	kw=KEYWORD_16 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBooleanOpAccess().getExclamationMarkEqualsSignKeyword_6()); 
    }

    |
	kw=KEYWORD_17 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBooleanOpAccess().getAmpersandAmpersandKeyword_7()); 
    }

    |
	kw=KEYWORD_22 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBooleanOpAccess().getVerticalLineVerticalLineKeyword_8()); 
    }
)
    ;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getLeftUnaryExpressionParserRuleCall_0_0()); 
	    }
		lv_left_0_0=ruleUnaryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_0_0, 
        		"UnaryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getOpInfixOpParserRuleCall_1_0_0()); 
	    }
		lv_op_1_0=ruleInfixOp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_1_0, 
        		"InfixOp");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getRightUnaryExpressionParserRuleCall_1_1_0()); 
	    }
		lv_right_2_0=ruleUnaryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_2_0, 
        		"UnaryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleInfixOp
entryRuleInfixOp returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getInfixOpRule()); } 
	 iv_ruleInfixOp=ruleInfixOp 
	 { $current=$iv_ruleInfixOp.current.getText(); }  
	 EOF 
;

// Rule InfixOp
ruleInfixOp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=KEYWORD_6 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInfixOpAccess().getAsteriskKeyword_0()); 
    }

    |
	kw=KEYWORD_11 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInfixOpAccess().getSolidusKeyword_1()); 
    }

    |
	kw=KEYWORD_2 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInfixOpAccess().getPercentSignKeyword_2()); 
    }

    |
	kw=KEYWORD_7 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInfixOpAccess().getPlusSignKeyword_3()); 
    }

    |
	kw=KEYWORD_9 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInfixOpAccess().getHyphenMinusKeyword_4()); 
    }

    |
	kw=KEYWORD_3 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInfixOpAccess().getAmpersandKeyword_5()); 
    }

    |
	kw=KEYWORD_14 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInfixOpAccess().getVerticalLineKeyword_6()); 
    }
)
    ;





// Entry rule entryRuleUnaryExpression
entryRuleUnaryExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getUnaryExpressionRule()); }
	 iv_ruleUnaryExpression=ruleUnaryExpression 
	 { $current=$iv_ruleUnaryExpression.current; } 
	 EOF 
;

// Rule UnaryExpression
ruleUnaryExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryExpressionAccess().getModifierPrefixOpParserRuleCall_0_0_0()); 
	    }
		lv_modifier_0_0=rulePrefixOp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryExpressionRule());
	        }
       		set(
       			$current, 
       			"modifier",
        		lv_modifier_0_0, 
        		"PrefixOp");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryExpressionAccess().getExpressionPrimaryParserRuleCall_0_1_0()); 
	    }
		lv_expression_1_0=rulePrimary		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryExpressionRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_1_0, 
        		"Primary");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryExpressionAccess().getCastCastParserRuleCall_1_0_0()); 
	    }
		lv_cast_2_0=ruleCast		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryExpressionRule());
	        }
       		set(
       			$current, 
       			"cast",
        		lv_cast_2_0, 
        		"Cast");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryExpressionAccess().getExpressionPrimaryParserRuleCall_1_1_0()); 
	    }
		lv_expression_3_0=rulePrimary		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryExpressionRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_3_0, 
        		"Primary");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryExpressionAccess().getExpressionPrimaryParserRuleCall_2_0()); 
	    }
		lv_expression_4_0=rulePrimary		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryExpressionRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_4_0, 
        		"Primary");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleCast
entryRuleCast returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getCastRule()); } 
	 iv_ruleCast=ruleCast 
	 { $current=$iv_ruleCast.current.getText(); }  
	 EOF 
;

// Rule Cast
ruleCast returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=KEYWORD_4 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCastAccess().getLeftParenthesisKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getCastAccess().getTypeParserRuleCall_1()); 
    }
    this_Type_1=ruleType    {
		$current.merge(this_Type_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=KEYWORD_5 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCastAccess().getRightParenthesisKeyword_2()); 
    }
)
    ;





// Entry rule entryRulePrefixOp
entryRulePrefixOp returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getPrefixOpRule()); } 
	 iv_rulePrefixOp=rulePrefixOp 
	 { $current=$iv_rulePrefixOp.current.getText(); }  
	 EOF 
;

// Rule PrefixOp
rulePrefixOp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=KEYWORD_7 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrefixOpAccess().getPlusSignKeyword_0()); 
    }

    |
	kw=KEYWORD_9 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrefixOpAccess().getHyphenMinusKeyword_1()); 
    }

    |
	kw=KEYWORD_15 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrefixOpAccess().getTildeKeyword_2()); 
    }

    |
	kw=KEYWORD_1 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrefixOpAccess().getExclamationMarkKeyword_3()); 
    }
)
    ;





// Entry rule entryRulePrimary
entryRulePrimary returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getPrimaryRule()); }
	 iv_rulePrimary=rulePrimary 
	 { $current=$iv_rulePrimary.current; } 
	 EOF 
;

// Rule Primary
rulePrimary returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryAccess().getLiteralLiteralParserRuleCall_0_0()); 
	    }
		lv_literal_0_0=ruleLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryRule());
	        }
       		set(
       			$current, 
       			"literal",
        		lv_literal_0_0, 
        		"Literal");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		lv_this_1_0=
	KEYWORD_30
    {
        newLeafNode(lv_this_1_0, grammarAccess.getPrimaryAccess().getThisThisKeyword_1_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrimaryRule());
	        }
       		setWithLastConsumed($current, "this", lv_this_1_0, "this");
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryAccess().getClassOrInterfaceClassOrInterfaceNameParserRuleCall_2_0()); 
	    }
		lv_classOrInterface_2_0=ruleClassOrInterfaceName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryRule());
	        }
       		set(
       			$current, 
       			"classOrInterface",
        		lv_classOrInterface_2_0, 
        		"ClassOrInterfaceName");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
	otherlv_3=KEYWORD_4
    {
    	newLeafNode(otherlv_3, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryAccess().getExpressionExpressionParserRuleCall_3_1_0()); 
	    }
		lv_expression_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_5=KEYWORD_5
    {
    	newLeafNode(otherlv_5, grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_3_2());
    }
))
;





// Entry rule entryRuleType
entryRuleType returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getTypeRule()); } 
	 iv_ruleType=ruleType 
	 { $current=$iv_ruleType.current.getText(); }  
	 EOF 
;

// Rule Type
ruleType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
    { 
        newCompositeNode(grammarAccess.getTypeAccess().getPrimitiveTypeParserRuleCall_0()); 
    }
    this_PrimitiveType_0=rulePrimitiveType    {
		$current.merge(this_PrimitiveType_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeAccess().getClassOrInterfaceNameParserRuleCall_1()); 
    }
    this_ClassOrInterfaceName_1=ruleClassOrInterfaceName    {
		$current.merge(this_ClassOrInterfaceName_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRulePrimitiveType
entryRulePrimitiveType returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getPrimitiveTypeRule()); } 
	 iv_rulePrimitiveType=rulePrimitiveType 
	 { $current=$iv_rulePrimitiveType.current.getText(); }  
	 EOF 
;

// Rule PrimitiveType
rulePrimitiveType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
    { 
        newCompositeNode(grammarAccess.getPrimitiveTypeAccess().getNumericTypeParserRuleCall_0()); 
    }
    this_NumericType_0=ruleNumericType    {
		$current.merge(this_NumericType_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
	kw=KEYWORD_39 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimitiveTypeAccess().getBooleanKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleNumericType
entryRuleNumericType returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getNumericTypeRule()); } 
	 iv_ruleNumericType=ruleNumericType 
	 { $current=$iv_ruleNumericType.current.getText(); }  
	 EOF 
;

// Rule NumericType
ruleNumericType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
    { 
        newCompositeNode(grammarAccess.getNumericTypeAccess().getIntegralTypeParserRuleCall_0()); 
    }
    this_IntegralType_0=ruleIntegralType    {
		$current.merge(this_IntegralType_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNumericTypeAccess().getFloatingPointTypeParserRuleCall_1()); 
    }
    this_FloatingPointType_1=ruleFloatingPointType    {
		$current.merge(this_FloatingPointType_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleIntegralType
entryRuleIntegralType returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getIntegralTypeRule()); } 
	 iv_ruleIntegralType=ruleIntegralType 
	 { $current=$iv_ruleIntegralType.current.getText(); }  
	 EOF 
;

// Rule IntegralType
ruleIntegralType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=KEYWORD_24 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIntegralTypeAccess().getByteKeyword_0()); 
    }

    |
	kw=KEYWORD_34 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIntegralTypeAccess().getShortKeyword_1()); 
    }

    |
	kw=KEYWORD_23 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIntegralTypeAccess().getIntKeyword_2()); 
    }

    |
	kw=KEYWORD_28 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIntegralTypeAccess().getLongKeyword_3()); 
    }

    |
	kw=KEYWORD_25 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIntegralTypeAccess().getCharKeyword_4()); 
    }
)
    ;





// Entry rule entryRuleFloatingPointType
entryRuleFloatingPointType returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getFloatingPointTypeRule()); } 
	 iv_ruleFloatingPointType=ruleFloatingPointType 
	 { $current=$iv_ruleFloatingPointType.current.getText(); }  
	 EOF 
;

// Rule FloatingPointType
ruleFloatingPointType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=KEYWORD_33 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFloatingPointTypeAccess().getFloatKeyword_0()); 
    }

    |
	kw=KEYWORD_36 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFloatingPointTypeAccess().getDoubleKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleIntegerLiteral
entryRuleIntegerLiteral returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getIntegerLiteralRule()); } 
	 iv_ruleIntegerLiteral=ruleIntegerLiteral 
	 { $current=$iv_ruleIntegerLiteral.current.getText(); }  
	 EOF 
;

// Rule IntegerLiteral
ruleIntegerLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getIntegerLiteralAccess().getINTTerminalRuleCall()); 
    }

    ;









// Entry rule entryRuleStringLiteral
entryRuleStringLiteral returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getStringLiteralRule()); } 
	 iv_ruleStringLiteral=ruleStringLiteral 
	 { $current=$iv_ruleStringLiteral.current.getText(); }  
	 EOF 
;

// Rule StringLiteral
ruleStringLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    newLeafNode(this_STRING_0, grammarAccess.getStringLiteralAccess().getSTRINGTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleBooleanLiteral
entryRuleBooleanLiteral returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getBooleanLiteralRule()); } 
	 iv_ruleBooleanLiteral=ruleBooleanLiteral 
	 { $current=$iv_ruleBooleanLiteral.current.getText(); }  
	 EOF 
;

// Rule BooleanLiteral
ruleBooleanLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=KEYWORD_31 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBooleanLiteralAccess().getTrueKeyword_0()); 
    }

    |
	kw=KEYWORD_32 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBooleanLiteralAccess().getFalseKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleNullLiteral
entryRuleNullLiteral returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getNullLiteralRule()); } 
	 iv_ruleNullLiteral=ruleNullLiteral 
	 { $current=$iv_ruleNullLiteral.current.getText(); }  
	 EOF 
;

// Rule NullLiteral
ruleNullLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:

	kw=KEYWORD_29 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNullLiteralAccess().getNullKeyword()); 
    }

    ;





// Entry rule entryRuleLiteral
entryRuleLiteral returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getLiteralRule()); } 
	 iv_ruleLiteral=ruleLiteral 
	 { $current=$iv_ruleLiteral.current.getText(); }  
	 EOF 
;

// Rule Literal
ruleLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getIntegerLiteralParserRuleCall_0()); 
    }
    this_IntegerLiteral_0=ruleIntegerLiteral    {
		$current.merge(this_IntegerLiteral_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getBooleanLiteralParserRuleCall_1()); 
    }
    this_BooleanLiteral_1=ruleBooleanLiteral    {
		$current.merge(this_BooleanLiteral_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_2()); 
    }
    this_StringLiteral_2=ruleStringLiteral    {
		$current.merge(this_StringLiteral_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getNullLiteralParserRuleCall_3()); 
    }
    this_NullLiteral_3=ruleNullLiteral    {
		$current.merge(this_NullLiteral_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





