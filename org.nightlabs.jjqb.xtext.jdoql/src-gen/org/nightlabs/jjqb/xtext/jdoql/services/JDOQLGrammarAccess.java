/*
* generated by Xtext
*/

package org.nightlabs.jjqb.xtext.jdoql.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class JDOQLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class SingleStringJDOQLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SingleStringJDOQL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSelectAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSelectSelectParserRuleCall_0_0 = (RuleCall)cSelectAssignment_0.eContents().get(0);
		private final Assignment cFromAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFromFromParserRuleCall_1_0 = (RuleCall)cFromAssignment_1.eContents().get(0);
		private final Assignment cWhereAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cWhereWhereParserRuleCall_2_0 = (RuleCall)cWhereAssignment_2.eContents().get(0);
		
		//SingleStringJDOQL:
		//	select=Select from=From where=Where?;
		public ParserRule getRule() { return rule; }

		//select=Select from=From where=Where?
		public Group getGroup() { return cGroup; }

		//select=Select
		public Assignment getSelectAssignment_0() { return cSelectAssignment_0; }

		//Select
		public RuleCall getSelectSelectParserRuleCall_0_0() { return cSelectSelectParserRuleCall_0_0; }

		//from=From
		public Assignment getFromAssignment_1() { return cFromAssignment_1; }

		//From
		public RuleCall getFromFromParserRuleCall_1_0() { return cFromFromParserRuleCall_1_0; }

		//where=Where?
		public Assignment getWhereAssignment_2() { return cWhereAssignment_2; }

		//Where
		public RuleCall getWhereWhereParserRuleCall_2_0() { return cWhereWhereParserRuleCall_2_0; }
	}

	public class SelectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Select");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSelectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cUniqueKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cResultClauseAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cResultClauseResultClauseParserRuleCall_2_0 = (RuleCall)cResultClauseAssignment_2.eContents().get(0);
		private final Assignment cIntoClauseAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIntoClauseIntoClauseParserRuleCall_3_0 = (RuleCall)cIntoClauseAssignment_3.eContents().get(0);
		
		//Select:
		//	"select" "unique"? resultClause=ResultClause? intoClause=IntoClause?;
		public ParserRule getRule() { return rule; }

		//"select" "unique"? resultClause=ResultClause? intoClause=IntoClause?
		public Group getGroup() { return cGroup; }

		//"select"
		public Keyword getSelectKeyword_0() { return cSelectKeyword_0; }

		//"unique"?
		public Keyword getUniqueKeyword_1() { return cUniqueKeyword_1; }

		//resultClause=ResultClause?
		public Assignment getResultClauseAssignment_2() { return cResultClauseAssignment_2; }

		//ResultClause
		public RuleCall getResultClauseResultClauseParserRuleCall_2_0() { return cResultClauseResultClauseParserRuleCall_2_0; }

		//intoClause=IntoClause?
		public Assignment getIntoClauseAssignment_3() { return cIntoClauseAssignment_3; }

		//IntoClause
		public RuleCall getIntoClauseIntoClauseParserRuleCall_3_0() { return cIntoClauseIntoClauseParserRuleCall_3_0; }
	}

	public class ResultClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ResultClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDistinctKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cResultSpecsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cResultSpecsResultSpecsParserRuleCall_1_0 = (RuleCall)cResultSpecsAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ResultClause:
		//	"distinct"? resultSpecs+=ResultSpecs ","?;
		public ParserRule getRule() { return rule; }

		//"distinct"? resultSpecs+=ResultSpecs ","?
		public Group getGroup() { return cGroup; }

		//"distinct"?
		public Keyword getDistinctKeyword_0() { return cDistinctKeyword_0; }

		//resultSpecs+=ResultSpecs
		public Assignment getResultSpecsAssignment_1() { return cResultSpecsAssignment_1; }

		//ResultSpecs
		public RuleCall getResultSpecsResultSpecsParserRuleCall_1_0() { return cResultSpecsResultSpecsParserRuleCall_1_0; }

		//","?
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
	}

	public class IntoClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntoClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIntoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cResultClassNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cResultClassNameClassOrInterfaceNameParserRuleCall_1_0 = (RuleCall)cResultClassNameAssignment_1.eContents().get(0);
		
		//IntoClause:
		//	"into" resultClassName=ClassOrInterfaceName;
		public ParserRule getRule() { return rule; }

		//"into" resultClassName=ClassOrInterfaceName
		public Group getGroup() { return cGroup; }

		//"into"
		public Keyword getIntoKeyword_0() { return cIntoKeyword_0; }

		//resultClassName=ClassOrInterfaceName
		public Assignment getResultClassNameAssignment_1() { return cResultClassNameAssignment_1; }

		//ClassOrInterfaceName
		public RuleCall getResultClassNameClassOrInterfaceNameParserRuleCall_1_0() { return cResultClassNameClassOrInterfaceNameParserRuleCall_1_0; }
	}

	public class FromElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "From");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFromKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCandidateClassNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCandidateClassNameCandidateClassNameParserRuleCall_1_0 = (RuleCall)cCandidateClassNameAssignment_1.eContents().get(0);
		private final Assignment cExcludeClauseAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExcludeClauseExcludeClauseParserRuleCall_2_0 = (RuleCall)cExcludeClauseAssignment_2.eContents().get(0);
		
		//From:
		//	"from" candidateClassName=CandidateClassName excludeClause=ExcludeClause?;
		public ParserRule getRule() { return rule; }

		//"from" candidateClassName=CandidateClassName excludeClause=ExcludeClause?
		public Group getGroup() { return cGroup; }

		//"from"
		public Keyword getFromKeyword_0() { return cFromKeyword_0; }

		//candidateClassName=CandidateClassName
		public Assignment getCandidateClassNameAssignment_1() { return cCandidateClassNameAssignment_1; }

		//CandidateClassName
		public RuleCall getCandidateClassNameCandidateClassNameParserRuleCall_1_0() { return cCandidateClassNameCandidateClassNameParserRuleCall_1_0; }

		//excludeClause=ExcludeClause?
		public Assignment getExcludeClauseAssignment_2() { return cExcludeClauseAssignment_2; }

		//ExcludeClause
		public RuleCall getExcludeClauseExcludeClauseParserRuleCall_2_0() { return cExcludeClauseExcludeClauseParserRuleCall_2_0; }
	}

	public class WhereElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Where");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhereKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEBooleanExpressionParserRuleCall_1_0 = (RuleCall)cEAssignment_1.eContents().get(0);
		
		//Where:
		//	"where" e=BooleanExpression;
		public ParserRule getRule() { return rule; }

		//"where" e=BooleanExpression
		public Group getGroup() { return cGroup; }

		//"where"
		public Keyword getWhereKeyword_0() { return cWhereKeyword_0; }

		//e=BooleanExpression
		public Assignment getEAssignment_1() { return cEAssignment_1; }

		//BooleanExpression
		public RuleCall getEBooleanExpressionParserRuleCall_1_0() { return cEBooleanExpressionParserRuleCall_1_0; }
	}

	public class ExcludeClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExcludeClause");
		private final Assignment cExcludeSubclassesAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cExcludeSubclassesExcludeSubclassesKeyword_0 = (Keyword)cExcludeSubclassesAssignment.eContents().get(0);
		
		//ExcludeClause:
		//	excludeSubclasses="exclude subclasses";
		public ParserRule getRule() { return rule; }

		//excludeSubclasses="exclude subclasses"
		public Assignment getExcludeSubclassesAssignment() { return cExcludeSubclassesAssignment; }

		//"exclude subclasses"
		public Keyword getExcludeSubclassesExcludeSubclassesKeyword_0() { return cExcludeSubclassesExcludeSubclassesKeyword_0; }
	}

	public class QualifiedIdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedIdentifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedIdentifier:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class CandidateClassNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CandidateClassName");
		private final RuleCall cQualifiedIdentifierParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//CandidateClassName:
		//	QualifiedIdentifier;
		public ParserRule getRule() { return rule; }

		//QualifiedIdentifier
		public RuleCall getQualifiedIdentifierParserRuleCall() { return cQualifiedIdentifierParserRuleCall; }
	}

	public class ClassOrInterfaceNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassOrInterfaceName");
		private final RuleCall cQualifiedIdentifierParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ClassOrInterfaceName:
		//	QualifiedIdentifier;
		public ParserRule getRule() { return rule; }

		//QualifiedIdentifier
		public RuleCall getQualifiedIdentifierParserRuleCall() { return cQualifiedIdentifierParserRuleCall; }
	}

	public class ResultSpecsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ResultSpecs");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cResultSpecParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ResultSpecs:
		//	ResultSpec ","?;
		public ParserRule getRule() { return rule; }

		//ResultSpec ","?
		public Group getGroup() { return cGroup; }

		//ResultSpec
		public RuleCall getResultSpecParserRuleCall_0() { return cResultSpecParserRuleCall_0; }

		//","?
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }
	}

	public class ResultSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ResultSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cResultNamingAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cResultNamingResultNamingParserRuleCall_1_0 = (RuleCall)cResultNamingAssignment_1.eContents().get(0);
		
		//ResultSpec:
		//	Expression resultNaming=ResultNaming?;
		public ParserRule getRule() { return rule; }

		//Expression resultNaming=ResultNaming?
		public Group getGroup() { return cGroup; }

		//Expression
		public RuleCall getExpressionParserRuleCall_0() { return cExpressionParserRuleCall_0; }

		//resultNaming=ResultNaming?
		public Assignment getResultNamingAssignment_1() { return cResultNamingAssignment_1; }

		//ResultNaming
		public RuleCall getResultNamingResultNamingParserRuleCall_1_0() { return cResultNamingResultNamingParserRuleCall_1_0; }
	}

	public class ResultNamingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ResultNaming");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdentifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdentifierIDTerminalRuleCall_1_0 = (RuleCall)cIdentifierAssignment_1.eContents().get(0);
		
		//ResultNaming:
		//	"as" identifier=ID;
		public ParserRule getRule() { return rule; }

		//"as" identifier=ID
		public Group getGroup() { return cGroup; }

		//"as"
		public Keyword getAsKeyword_0() { return cAsKeyword_0; }

		//identifier=ID
		public Assignment getIdentifierAssignment_1() { return cIdentifierAssignment_1; }

		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_1_0() { return cIdentifierIDTerminalRuleCall_1_0; }
	}

	public class BooleanExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftExpressionParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOpAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOpBooleanOpParserRuleCall_1_0_0 = (RuleCall)cOpAssignment_1_0.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//BooleanExpression:
		//	left=Expression (op=BooleanOp right=Expression);
		public ParserRule getRule() { return rule; }

		//left=Expression (op=BooleanOp right=Expression)
		public Group getGroup() { return cGroup; }

		//left=Expression
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }

		//Expression
		public RuleCall getLeftExpressionParserRuleCall_0_0() { return cLeftExpressionParserRuleCall_0_0; }

		//op=BooleanOp right=Expression
		public Group getGroup_1() { return cGroup_1; }

		//op=BooleanOp
		public Assignment getOpAssignment_1_0() { return cOpAssignment_1_0; }

		//BooleanOp
		public RuleCall getOpBooleanOpParserRuleCall_1_0_0() { return cOpBooleanOpParserRuleCall_1_0_0; }

		//right=Expression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//Expression
		public RuleCall getRightExpressionParserRuleCall_1_1_0() { return cRightExpressionParserRuleCall_1_1_0; }
	}

	public class BooleanOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cGreaterThanSignEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cLessThanSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLessThanSignEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cInstanceofKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cEqualsSignEqualsSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cExclamationMarkEqualsSignKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cAmpersandAmpersandKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cVerticalLineVerticalLineKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		
		//BooleanOp:
		//	">" | ">=" | "<" | "<=" | "instanceof" | "==" | "!=" | "&&" | "||";
		public ParserRule getRule() { return rule; }

		//">" | ">=" | "<" | "<=" | "instanceof" | "==" | "!=" | "&&" | "||"
		public Alternatives getAlternatives() { return cAlternatives; }

		//">"
		public Keyword getGreaterThanSignKeyword_0() { return cGreaterThanSignKeyword_0; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_1() { return cGreaterThanSignEqualsSignKeyword_1; }

		//"<"
		public Keyword getLessThanSignKeyword_2() { return cLessThanSignKeyword_2; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_3() { return cLessThanSignEqualsSignKeyword_3; }

		//"instanceof"
		public Keyword getInstanceofKeyword_4() { return cInstanceofKeyword_4; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_5() { return cEqualsSignEqualsSignKeyword_5; }

		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_6() { return cExclamationMarkEqualsSignKeyword_6; }

		//"&&"
		public Keyword getAmpersandAmpersandKeyword_7() { return cAmpersandAmpersandKeyword_7; }

		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_8() { return cVerticalLineVerticalLineKeyword_8; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftUnaryExpressionParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOpAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOpInfixOpParserRuleCall_1_0_0 = (RuleCall)cOpAssignment_1_0.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightUnaryExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Expression:
		//	left=UnaryExpression (op=InfixOp right=UnaryExpression)?;
		public ParserRule getRule() { return rule; }

		//left=UnaryExpression (op=InfixOp right=UnaryExpression)?
		public Group getGroup() { return cGroup; }

		//left=UnaryExpression
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }

		//UnaryExpression
		public RuleCall getLeftUnaryExpressionParserRuleCall_0_0() { return cLeftUnaryExpressionParserRuleCall_0_0; }

		//(op=InfixOp right=UnaryExpression)?
		public Group getGroup_1() { return cGroup_1; }

		//op=InfixOp
		public Assignment getOpAssignment_1_0() { return cOpAssignment_1_0; }

		//InfixOp
		public RuleCall getOpInfixOpParserRuleCall_1_0_0() { return cOpInfixOpParserRuleCall_1_0_0; }

		//right=UnaryExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//UnaryExpression
		public RuleCall getRightUnaryExpressionParserRuleCall_1_1_0() { return cRightUnaryExpressionParserRuleCall_1_1_0; }
	}

	public class InfixOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InfixOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSolidusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cPercentSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cPlusSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cHyphenMinusKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cAmpersandKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cVerticalLineKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		
		//InfixOp:
		//	"*" | "/" | "%" | "+" | "-" | "&" | "|";
		public ParserRule getRule() { return rule; }

		//"*" | "/" | "%" | "+" | "-" | "&" | "|"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"*"
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }

		//"/"
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }

		//"%"
		public Keyword getPercentSignKeyword_2() { return cPercentSignKeyword_2; }

		//"+"
		public Keyword getPlusSignKeyword_3() { return cPlusSignKeyword_3; }

		//"-"
		public Keyword getHyphenMinusKeyword_4() { return cHyphenMinusKeyword_4; }

		//"&"
		public Keyword getAmpersandKeyword_5() { return cAmpersandKeyword_5; }

		//"|"
		public Keyword getVerticalLineKeyword_6() { return cVerticalLineKeyword_6; }
	}

	public class UnaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cModifierAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cModifierPrefixOpParserRuleCall_0_0_0 = (RuleCall)cModifierAssignment_0_0.eContents().get(0);
		private final Assignment cExpressionAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cExpressionPrimaryParserRuleCall_0_1_0 = (RuleCall)cExpressionAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cCastAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cCastCastParserRuleCall_1_0_0 = (RuleCall)cCastAssignment_1_0.eContents().get(0);
		private final Assignment cExpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionPrimaryParserRuleCall_1_1_0 = (RuleCall)cExpressionAssignment_1_1.eContents().get(0);
		private final Assignment cExpressionAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cExpressionPrimaryParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//UnaryExpression:
		//	modifier=PrefixOp expression=Primary | cast=Cast expression=Primary | expression=Primary;
		public ParserRule getRule() { return rule; }

		//modifier=PrefixOp expression=Primary | cast=Cast expression=Primary | expression=Primary
		public Alternatives getAlternatives() { return cAlternatives; }

		//modifier=PrefixOp expression=Primary
		public Group getGroup_0() { return cGroup_0; }

		//modifier=PrefixOp
		public Assignment getModifierAssignment_0_0() { return cModifierAssignment_0_0; }

		//PrefixOp
		public RuleCall getModifierPrefixOpParserRuleCall_0_0_0() { return cModifierPrefixOpParserRuleCall_0_0_0; }

		//expression=Primary
		public Assignment getExpressionAssignment_0_1() { return cExpressionAssignment_0_1; }

		//Primary
		public RuleCall getExpressionPrimaryParserRuleCall_0_1_0() { return cExpressionPrimaryParserRuleCall_0_1_0; }

		//cast=Cast expression=Primary
		public Group getGroup_1() { return cGroup_1; }

		//cast=Cast
		public Assignment getCastAssignment_1_0() { return cCastAssignment_1_0; }

		//Cast
		public RuleCall getCastCastParserRuleCall_1_0_0() { return cCastCastParserRuleCall_1_0_0; }

		//expression=Primary
		public Assignment getExpressionAssignment_1_1() { return cExpressionAssignment_1_1; }

		//Primary
		public RuleCall getExpressionPrimaryParserRuleCall_1_1_0() { return cExpressionPrimaryParserRuleCall_1_1_0; }

		//expression=Primary
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//Primary
		public RuleCall getExpressionPrimaryParserRuleCall_2_0() { return cExpressionPrimaryParserRuleCall_2_0; }
	}

	public class CastElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Cast");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cTypeParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Cast:
		//	"(" Type ")";
		public ParserRule getRule() { return rule; }

		//"(" Type ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//Type
		public RuleCall getTypeParserRuleCall_1() { return cTypeParserRuleCall_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class PrefixOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrefixOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cTildeKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cExclamationMarkKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//PrefixOp:
		//	"+" | "-" | "~" | "!";
		public ParserRule getRule() { return rule; }

		//"+" | "-" | "~" | "!"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"+"
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }

		//"~"
		public Keyword getTildeKeyword_2() { return cTildeKeyword_2; }

		//"!"
		public Keyword getExclamationMarkKeyword_3() { return cExclamationMarkKeyword_3; }
	}

	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cLiteralAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cLiteralLiteralParserRuleCall_0_0 = (RuleCall)cLiteralAssignment_0.eContents().get(0);
		private final Assignment cThisAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cThisThisKeyword_1_0 = (Keyword)cThisAssignment_1.eContents().get(0);
		private final Assignment cClassOrInterfaceAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cClassOrInterfaceClassOrInterfaceNameParserRuleCall_2_0 = (RuleCall)cClassOrInterfaceAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cExpressionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_3_1_0 = (RuleCall)cExpressionAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		////	| '(' subquery=Subquery ')' 
		////	| methodInvocation=MethodInvocation 
		////	| aggregateExpression=AggregateExpression
		////	| fieldAccess=FieldAccess 
		////	| variableName=VariableName
		////	| parameterName=ParameterName
		//Primary:
		//	literal=Literal | this="this" | classOrInterface=ClassOrInterfaceName | "(" expression=Expression ")";
		public ParserRule getRule() { return rule; }

		//literal=Literal | this="this" | classOrInterface=ClassOrInterfaceName | "(" expression=Expression ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//literal=Literal
		public Assignment getLiteralAssignment_0() { return cLiteralAssignment_0; }

		//Literal
		public RuleCall getLiteralLiteralParserRuleCall_0_0() { return cLiteralLiteralParserRuleCall_0_0; }

		//this="this"
		public Assignment getThisAssignment_1() { return cThisAssignment_1; }

		//"this"
		public Keyword getThisThisKeyword_1_0() { return cThisThisKeyword_1_0; }

		//classOrInterface=ClassOrInterfaceName
		public Assignment getClassOrInterfaceAssignment_2() { return cClassOrInterfaceAssignment_2; }

		//ClassOrInterfaceName
		public RuleCall getClassOrInterfaceClassOrInterfaceNameParserRuleCall_2_0() { return cClassOrInterfaceClassOrInterfaceNameParserRuleCall_2_0; }

		//"(" expression=Expression ")"
		public Group getGroup_3() { return cGroup_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_3_1() { return cExpressionAssignment_3_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_3_1_0() { return cExpressionExpressionParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimitiveTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cClassOrInterfaceNameParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Type:
		//	PrimitiveType | ClassOrInterfaceName;
		public ParserRule getRule() { return rule; }

		//PrimitiveType | ClassOrInterfaceName
		public Alternatives getAlternatives() { return cAlternatives; }

		//PrimitiveType
		public RuleCall getPrimitiveTypeParserRuleCall_0() { return cPrimitiveTypeParserRuleCall_0; }

		//ClassOrInterfaceName
		public RuleCall getClassOrInterfaceNameParserRuleCall_1() { return cClassOrInterfaceNameParserRuleCall_1; }
	}

	public class PrimitiveTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimitiveType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNumericTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cBooleanKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//PrimitiveType:
		//	NumericType | "boolean";
		public ParserRule getRule() { return rule; }

		//NumericType | "boolean"
		public Alternatives getAlternatives() { return cAlternatives; }

		//NumericType
		public RuleCall getNumericTypeParserRuleCall_0() { return cNumericTypeParserRuleCall_0; }

		//"boolean"
		public Keyword getBooleanKeyword_1() { return cBooleanKeyword_1; }
	}

	public class NumericTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumericType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntegralTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFloatingPointTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//NumericType:
		//	IntegralType | FloatingPointType;
		public ParserRule getRule() { return rule; }

		//IntegralType | FloatingPointType
		public Alternatives getAlternatives() { return cAlternatives; }

		//IntegralType
		public RuleCall getIntegralTypeParserRuleCall_0() { return cIntegralTypeParserRuleCall_0; }

		//FloatingPointType
		public RuleCall getFloatingPointTypeParserRuleCall_1() { return cFloatingPointTypeParserRuleCall_1; }
	}

	public class IntegralTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegralType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cByteKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cShortKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cIntKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLongKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cCharKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//IntegralType:
		//	"byte" | "short" | "int" | "long" | "char";
		public ParserRule getRule() { return rule; }

		//"byte" | "short" | "int" | "long" | "char"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"byte"
		public Keyword getByteKeyword_0() { return cByteKeyword_0; }

		//"short"
		public Keyword getShortKeyword_1() { return cShortKeyword_1; }

		//"int"
		public Keyword getIntKeyword_2() { return cIntKeyword_2; }

		//"long"
		public Keyword getLongKeyword_3() { return cLongKeyword_3; }

		//"char"
		public Keyword getCharKeyword_4() { return cCharKeyword_4; }
	}

	public class FloatingPointTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FloatingPointType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cFloatKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cDoubleKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//FloatingPointType:
		//	"float" | "double";
		public ParserRule getRule() { return rule; }

		//"float" | "double"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"float"
		public Keyword getFloatKeyword_0() { return cFloatKeyword_0; }

		//"double"
		public Keyword getDoubleKeyword_1() { return cDoubleKeyword_1; }
	}

	public class IntegerLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerLiteral");
		private final RuleCall cINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//IntegerLiteral:
		//	INT;
		public ParserRule getRule() { return rule; }

		//INT
		public RuleCall getINTTerminalRuleCall() { return cINTTerminalRuleCall; }
	}

	public class FloatingPointLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FloatingPointLiteral");
		private final RuleCall cINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//FloatingPointLiteral: // TODO
		//	INT;
		public ParserRule getRule() { return rule; }

		//// TODO
		//INT
		public RuleCall getINTTerminalRuleCall() { return cINTTerminalRuleCall; }
	}

	public class CharacterLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CharacterLiteral");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//CharacterLiteral: // TODO
		//	STRING;
		public ParserRule getRule() { return rule; }

		//// TODO
		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}

	public class StringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringLiteral");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//StringLiteral:
		//	STRING;
		public ParserRule getRule() { return rule; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}

	public class BooleanLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//BooleanLiteral:
		//	"true" | "false";
		public ParserRule getRule() { return rule; }

		//"true" | "false"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"true"
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }

		//"false"
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}

	public class NullLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NullLiteral");
		private final Keyword cNullKeyword = (Keyword)rule.eContents().get(1);
		
		//NullLiteral:
		//	"null";
		public ParserRule getRule() { return rule; }

		//"null"
		public Keyword getNullKeyword() { return cNullKeyword; }
	}

	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntegerLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBooleanLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStringLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cNullLiteralParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Literal:
		//	IntegerLiteral | //    FloatingPointLiteral |
		//	BooleanLiteral | //    CharacterLiteral |
		//	StringLiteral | NullLiteral;
		public ParserRule getRule() { return rule; }

		//IntegerLiteral | //    FloatingPointLiteral |
		//BooleanLiteral | //    CharacterLiteral |
		//StringLiteral | NullLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//IntegerLiteral
		public RuleCall getIntegerLiteralParserRuleCall_0() { return cIntegerLiteralParserRuleCall_0; }

		////    FloatingPointLiteral |
		//BooleanLiteral
		public RuleCall getBooleanLiteralParserRuleCall_1() { return cBooleanLiteralParserRuleCall_1; }

		////    CharacterLiteral |
		//StringLiteral
		public RuleCall getStringLiteralParserRuleCall_2() { return cStringLiteralParserRuleCall_2; }

		//NullLiteral
		public RuleCall getNullLiteralParserRuleCall_3() { return cNullLiteralParserRuleCall_3; }
	}
	
	
	private SingleStringJDOQLElements pSingleStringJDOQL;
	private SelectElements pSelect;
	private ResultClauseElements pResultClause;
	private IntoClauseElements pIntoClause;
	private FromElements pFrom;
	private WhereElements pWhere;
	private ExcludeClauseElements pExcludeClause;
	private QualifiedIdentifierElements pQualifiedIdentifier;
	private CandidateClassNameElements pCandidateClassName;
	private ClassOrInterfaceNameElements pClassOrInterfaceName;
	private ResultSpecsElements pResultSpecs;
	private ResultSpecElements pResultSpec;
	private ResultNamingElements pResultNaming;
	private BooleanExpressionElements pBooleanExpression;
	private BooleanOpElements pBooleanOp;
	private ExpressionElements pExpression;
	private InfixOpElements pInfixOp;
	private UnaryExpressionElements pUnaryExpression;
	private CastElements pCast;
	private PrefixOpElements pPrefixOp;
	private PrimaryElements pPrimary;
	private TypeElements pType;
	private PrimitiveTypeElements pPrimitiveType;
	private NumericTypeElements pNumericType;
	private IntegralTypeElements pIntegralType;
	private FloatingPointTypeElements pFloatingPointType;
	private IntegerLiteralElements pIntegerLiteral;
	private FloatingPointLiteralElements pFloatingPointLiteral;
	private CharacterLiteralElements pCharacterLiteral;
	private StringLiteralElements pStringLiteral;
	private BooleanLiteralElements pBooleanLiteral;
	private NullLiteralElements pNullLiteral;
	private LiteralElements pLiteral;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public JDOQLGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//SingleStringJDOQL:
	//	select=Select from=From where=Where?;
	public SingleStringJDOQLElements getSingleStringJDOQLAccess() {
		return (pSingleStringJDOQL != null) ? pSingleStringJDOQL : (pSingleStringJDOQL = new SingleStringJDOQLElements());
	}
	
	public ParserRule getSingleStringJDOQLRule() {
		return getSingleStringJDOQLAccess().getRule();
	}

	//Select:
	//	"select" "unique"? resultClause=ResultClause? intoClause=IntoClause?;
	public SelectElements getSelectAccess() {
		return (pSelect != null) ? pSelect : (pSelect = new SelectElements());
	}
	
	public ParserRule getSelectRule() {
		return getSelectAccess().getRule();
	}

	//ResultClause:
	//	"distinct"? resultSpecs+=ResultSpecs ","?;
	public ResultClauseElements getResultClauseAccess() {
		return (pResultClause != null) ? pResultClause : (pResultClause = new ResultClauseElements());
	}
	
	public ParserRule getResultClauseRule() {
		return getResultClauseAccess().getRule();
	}

	//IntoClause:
	//	"into" resultClassName=ClassOrInterfaceName;
	public IntoClauseElements getIntoClauseAccess() {
		return (pIntoClause != null) ? pIntoClause : (pIntoClause = new IntoClauseElements());
	}
	
	public ParserRule getIntoClauseRule() {
		return getIntoClauseAccess().getRule();
	}

	//From:
	//	"from" candidateClassName=CandidateClassName excludeClause=ExcludeClause?;
	public FromElements getFromAccess() {
		return (pFrom != null) ? pFrom : (pFrom = new FromElements());
	}
	
	public ParserRule getFromRule() {
		return getFromAccess().getRule();
	}

	//Where:
	//	"where" e=BooleanExpression;
	public WhereElements getWhereAccess() {
		return (pWhere != null) ? pWhere : (pWhere = new WhereElements());
	}
	
	public ParserRule getWhereRule() {
		return getWhereAccess().getRule();
	}

	//ExcludeClause:
	//	excludeSubclasses="exclude subclasses";
	public ExcludeClauseElements getExcludeClauseAccess() {
		return (pExcludeClause != null) ? pExcludeClause : (pExcludeClause = new ExcludeClauseElements());
	}
	
	public ParserRule getExcludeClauseRule() {
		return getExcludeClauseAccess().getRule();
	}

	//QualifiedIdentifier:
	//	ID ("." ID)*;
	public QualifiedIdentifierElements getQualifiedIdentifierAccess() {
		return (pQualifiedIdentifier != null) ? pQualifiedIdentifier : (pQualifiedIdentifier = new QualifiedIdentifierElements());
	}
	
	public ParserRule getQualifiedIdentifierRule() {
		return getQualifiedIdentifierAccess().getRule();
	}

	//CandidateClassName:
	//	QualifiedIdentifier;
	public CandidateClassNameElements getCandidateClassNameAccess() {
		return (pCandidateClassName != null) ? pCandidateClassName : (pCandidateClassName = new CandidateClassNameElements());
	}
	
	public ParserRule getCandidateClassNameRule() {
		return getCandidateClassNameAccess().getRule();
	}

	//ClassOrInterfaceName:
	//	QualifiedIdentifier;
	public ClassOrInterfaceNameElements getClassOrInterfaceNameAccess() {
		return (pClassOrInterfaceName != null) ? pClassOrInterfaceName : (pClassOrInterfaceName = new ClassOrInterfaceNameElements());
	}
	
	public ParserRule getClassOrInterfaceNameRule() {
		return getClassOrInterfaceNameAccess().getRule();
	}

	//ResultSpecs:
	//	ResultSpec ","?;
	public ResultSpecsElements getResultSpecsAccess() {
		return (pResultSpecs != null) ? pResultSpecs : (pResultSpecs = new ResultSpecsElements());
	}
	
	public ParserRule getResultSpecsRule() {
		return getResultSpecsAccess().getRule();
	}

	//ResultSpec:
	//	Expression resultNaming=ResultNaming?;
	public ResultSpecElements getResultSpecAccess() {
		return (pResultSpec != null) ? pResultSpec : (pResultSpec = new ResultSpecElements());
	}
	
	public ParserRule getResultSpecRule() {
		return getResultSpecAccess().getRule();
	}

	//ResultNaming:
	//	"as" identifier=ID;
	public ResultNamingElements getResultNamingAccess() {
		return (pResultNaming != null) ? pResultNaming : (pResultNaming = new ResultNamingElements());
	}
	
	public ParserRule getResultNamingRule() {
		return getResultNamingAccess().getRule();
	}

	//BooleanExpression:
	//	left=Expression (op=BooleanOp right=Expression);
	public BooleanExpressionElements getBooleanExpressionAccess() {
		return (pBooleanExpression != null) ? pBooleanExpression : (pBooleanExpression = new BooleanExpressionElements());
	}
	
	public ParserRule getBooleanExpressionRule() {
		return getBooleanExpressionAccess().getRule();
	}

	//BooleanOp:
	//	">" | ">=" | "<" | "<=" | "instanceof" | "==" | "!=" | "&&" | "||";
	public BooleanOpElements getBooleanOpAccess() {
		return (pBooleanOp != null) ? pBooleanOp : (pBooleanOp = new BooleanOpElements());
	}
	
	public ParserRule getBooleanOpRule() {
		return getBooleanOpAccess().getRule();
	}

	//Expression:
	//	left=UnaryExpression (op=InfixOp right=UnaryExpression)?;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//InfixOp:
	//	"*" | "/" | "%" | "+" | "-" | "&" | "|";
	public InfixOpElements getInfixOpAccess() {
		return (pInfixOp != null) ? pInfixOp : (pInfixOp = new InfixOpElements());
	}
	
	public ParserRule getInfixOpRule() {
		return getInfixOpAccess().getRule();
	}

	//UnaryExpression:
	//	modifier=PrefixOp expression=Primary | cast=Cast expression=Primary | expression=Primary;
	public UnaryExpressionElements getUnaryExpressionAccess() {
		return (pUnaryExpression != null) ? pUnaryExpression : (pUnaryExpression = new UnaryExpressionElements());
	}
	
	public ParserRule getUnaryExpressionRule() {
		return getUnaryExpressionAccess().getRule();
	}

	//Cast:
	//	"(" Type ")";
	public CastElements getCastAccess() {
		return (pCast != null) ? pCast : (pCast = new CastElements());
	}
	
	public ParserRule getCastRule() {
		return getCastAccess().getRule();
	}

	//PrefixOp:
	//	"+" | "-" | "~" | "!";
	public PrefixOpElements getPrefixOpAccess() {
		return (pPrefixOp != null) ? pPrefixOp : (pPrefixOp = new PrefixOpElements());
	}
	
	public ParserRule getPrefixOpRule() {
		return getPrefixOpAccess().getRule();
	}

	////	| '(' subquery=Subquery ')' 
	////	| methodInvocation=MethodInvocation 
	////	| aggregateExpression=AggregateExpression
	////	| fieldAccess=FieldAccess 
	////	| variableName=VariableName
	////	| parameterName=ParameterName
	//Primary:
	//	literal=Literal | this="this" | classOrInterface=ClassOrInterfaceName | "(" expression=Expression ")";
	public PrimaryElements getPrimaryAccess() {
		return (pPrimary != null) ? pPrimary : (pPrimary = new PrimaryElements());
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}

	//Type:
	//	PrimitiveType | ClassOrInterfaceName;
	public TypeElements getTypeAccess() {
		return (pType != null) ? pType : (pType = new TypeElements());
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//PrimitiveType:
	//	NumericType | "boolean";
	public PrimitiveTypeElements getPrimitiveTypeAccess() {
		return (pPrimitiveType != null) ? pPrimitiveType : (pPrimitiveType = new PrimitiveTypeElements());
	}
	
	public ParserRule getPrimitiveTypeRule() {
		return getPrimitiveTypeAccess().getRule();
	}

	//NumericType:
	//	IntegralType | FloatingPointType;
	public NumericTypeElements getNumericTypeAccess() {
		return (pNumericType != null) ? pNumericType : (pNumericType = new NumericTypeElements());
	}
	
	public ParserRule getNumericTypeRule() {
		return getNumericTypeAccess().getRule();
	}

	//IntegralType:
	//	"byte" | "short" | "int" | "long" | "char";
	public IntegralTypeElements getIntegralTypeAccess() {
		return (pIntegralType != null) ? pIntegralType : (pIntegralType = new IntegralTypeElements());
	}
	
	public ParserRule getIntegralTypeRule() {
		return getIntegralTypeAccess().getRule();
	}

	//FloatingPointType:
	//	"float" | "double";
	public FloatingPointTypeElements getFloatingPointTypeAccess() {
		return (pFloatingPointType != null) ? pFloatingPointType : (pFloatingPointType = new FloatingPointTypeElements());
	}
	
	public ParserRule getFloatingPointTypeRule() {
		return getFloatingPointTypeAccess().getRule();
	}

	//IntegerLiteral:
	//	INT;
	public IntegerLiteralElements getIntegerLiteralAccess() {
		return (pIntegerLiteral != null) ? pIntegerLiteral : (pIntegerLiteral = new IntegerLiteralElements());
	}
	
	public ParserRule getIntegerLiteralRule() {
		return getIntegerLiteralAccess().getRule();
	}

	//FloatingPointLiteral: // TODO
	//	INT;
	public FloatingPointLiteralElements getFloatingPointLiteralAccess() {
		return (pFloatingPointLiteral != null) ? pFloatingPointLiteral : (pFloatingPointLiteral = new FloatingPointLiteralElements());
	}
	
	public ParserRule getFloatingPointLiteralRule() {
		return getFloatingPointLiteralAccess().getRule();
	}

	//CharacterLiteral: // TODO
	//	STRING;
	public CharacterLiteralElements getCharacterLiteralAccess() {
		return (pCharacterLiteral != null) ? pCharacterLiteral : (pCharacterLiteral = new CharacterLiteralElements());
	}
	
	public ParserRule getCharacterLiteralRule() {
		return getCharacterLiteralAccess().getRule();
	}

	//StringLiteral:
	//	STRING;
	public StringLiteralElements getStringLiteralAccess() {
		return (pStringLiteral != null) ? pStringLiteral : (pStringLiteral = new StringLiteralElements());
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}

	//BooleanLiteral:
	//	"true" | "false";
	public BooleanLiteralElements getBooleanLiteralAccess() {
		return (pBooleanLiteral != null) ? pBooleanLiteral : (pBooleanLiteral = new BooleanLiteralElements());
	}
	
	public ParserRule getBooleanLiteralRule() {
		return getBooleanLiteralAccess().getRule();
	}

	//NullLiteral:
	//	"null";
	public NullLiteralElements getNullLiteralAccess() {
		return (pNullLiteral != null) ? pNullLiteral : (pNullLiteral = new NullLiteralElements());
	}
	
	public ParserRule getNullLiteralRule() {
		return getNullLiteralAccess().getRule();
	}

	//Literal:
	//	IntegerLiteral | //    FloatingPointLiteral |
	//	BooleanLiteral | //    CharacterLiteral |
	//	StringLiteral | NullLiteral;
	public LiteralElements getLiteralAccess() {
		return (pLiteral != null) ? pLiteral : (pLiteral = new LiteralElements());
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
