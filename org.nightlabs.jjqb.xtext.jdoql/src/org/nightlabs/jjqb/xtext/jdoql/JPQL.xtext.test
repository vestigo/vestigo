grammar org.nightlabs.jjqb.xtext.jdoql.JPQL with org.eclipse.xtext.common.Terminals

generate jPQL "http://www.nightlabs.org/jjqb/xtext/jpql/JPQL"

SingleStringJDOQL:
	Select from=From
;

Select:
	'select ' ('unique ')? (resultClause=ResultClause)? (intoClause=IntoClause)?
;

ResultClause:
	('distinct')? resultSpecs+=ResultSpecs (',')?
;

IntoClause:
	'into' resultClassName=ClassOrInterfaceName
;

From:
	'from' candidateClassName=CandidateClassName (excludeClause=ExcludeClause)?
;

ExcludeClause:
	excludeSubclasses='exclude subclasses'
;

QualifiedIdentifier:
	ID |
	ID'.'ID
//	QualifiedIdentifier'.'ID
;

CandidateClassName:
	QualifiedIdentifier
;

ClassOrInterfaceName:
	QualifiedIdentifier
;


ResultSpecs:
	ResultSpec (',')?
;

ResultSpec:
	Expression (resultNaming=[ResultNaming])?
;

ResultNaming:
	'as' identifier=ID
;

Expression:
	left=UnaryExpression (op=InfixOp right=UnaryExpression)?
;

InfixOp:
	'*' | '/' | '%' | '+' | '-' | '>' | '>=' | '<' | '<=' | 'instanceof' | '==' | '!=' | '&' | '|' | '&&' | '||'
;

UnaryExpression:
	modifier=PrefixOp expression=Primary |
	cast=Cast expression=Primary |
	expression=Primary
;

Cast:
	'(' Type ')'
;

PrefixOp: 
	'+' | '-' | '~' | '!'
;

Primary:
	literal=Literal | 
	this='this' |
	classOrInterface = ClassOrInterfaceName |
	'(' expression=Expression ')' 
//	| '(' subquery=Subquery ')' 
//	| methodInvocation=MethodInvocation 
//	| aggregateExpression=AggregateExpression
//	| fieldAccess=FieldAccess 
//	| variableName=VariableName
//	| parameterName=ParameterName
;

Type:
	PrimitiveType |
	ClassOrInterfaceName
;

PrimitiveType:
	NumericType |
	'boolean'
;

NumericType:
	IntegralType |
	FloatingPointType
;

IntegralType:
	'byte' | 'short' | 'int' | 'long' | 'char'
;

FloatingPointType:
	'float' | 'double'
;

IntegerLiteral:                                        
	INT
;

FloatingPointLiteral:
	INT		// TODO
;                                 

CharacterLiteral:                                      
	STRING		// TODO
;

StringLiteral:
	STRING
;                                         

BooleanLiteral:
    'true' | 'false'
;

NullLiteral:
    'null'
;

Literal:
    IntegerLiteral |
    FloatingPointLiteral |
    BooleanLiteral |
    CharacterLiteral |
    StringLiteral |
    NullLiteral
;