grammar org.nightlabs.jjqb.xtext.jdoql.JDOQL with org.eclipse.xtext.common.Terminals

generate jDOQL 'http://www.nightlabs.org/jjqb/xtext/jdoql/JDOQL'

// http://db.apache.org/jdo/specifications.html
// Current spec: 3.0, chapter 26 JDOQL BNF, page 341ff

SingleStringJDOQL: 
	selectClause=SelectClause
	fromClause=FromClause
	(whereClause=WhereClause)?
	(variablesClause=VariablesClause)?
	(parametersClause=ParametersClause)?
	(importClause=ImportClause)?
	(groupByClause=GroupByClause)?
	(orderByClause=OrderByClause)?
	(rangeClause=RangeClause)?
;

SelectClause:
	{SelectClause} 'SELECT' (isUnique?='UNIQUE')? (resultClause=ResultClause)? (intoClause=IntoClause)?
;

ResultClause:
	(isDistinct?='DISTINCT')? resultSpecs+=ResultSpec (',' resultSpecs+=ResultSpec)*
;

IntoClause:
	'INTO' resultClassName=ClassOrInterfaceName
;

ResultSpec:
	ConditionalOrExpression (resultNaming=ResultNaming)?
;

ResultNaming:
	'AS' identifier=ID
;

FromClause:
	'FROM' candidateClassName=CandidateClassName (isExcludeSubclasses?='EXCLUDE' 'SUBCLASSES')?
;

WhereClause:
	'WHERE' filter=ConditionalOrExpression
;

VariablesClause:
	'VARIABLES' variableDeclarations+=VariableDeclaration (';' variableDeclarations+=VariableDeclaration)* ';'?
;

VariableDeclaration:
	type=Type variableName=VariableName
;

VariableName: ID;

ParametersClause:
	'PARAMETERS' parameterDeclarations+=ParameterDeclaration (',' parameterDeclarations+=ParameterDeclaration)* ','?
;

ParameterDeclaration:
	type=Type declaredParameterName=DeclaredParameterName
;

DeclaredParameterName:
	name=ParameterName
;

ParameterName: ID;

ImportClause:
	importDeclarations+=ImportDeclaration (';' importDeclarations+=ImportDeclaration)* ';'?
;

ImportDeclaration:
	'import' QualifiedIdentifier
;

GroupByClause:
	'GROUP' 'BY'
;

OrderByClause:
	'ORDER' 'BY'
;

RangeClause:
	'RANGE'
;

ConditionalOrExpression returns Expression:
	ConditionalAndExpression ({ConditionalOrExpression.left=current} '||' right=ConditionalAndExpression)*
;

ConditionalAndExpression returns Expression:
	SimpleOrExpression ({ConditionalAndExpression.left=current} '&&' right=SimpleOrExpression)*
;

SimpleOrExpression returns Expression:
	SimpleAndExpression ({SimpleOrExpression.left=current} '|' right=SimpleAndExpression)*
;

SimpleAndExpression returns Expression:
	ComparisonOperatorExpression ({SimpleAndExpression.left=current} '&' right=ComparisonOperatorExpression)*
;

ComparisonOperatorExpression returns Expression:
	AdditionExpression ({ComparisonOperatorExpression.left=current} operator=ComparisonOperator right=AdditionExpression)*
;

AdditionExpression returns Expression:
	MultiplicationExpression ({AdditionExpression.left=current} operator=AdditionOperator right=MultiplicationExpression)*
;

MultiplicationExpression returns Expression:
	UnaryExpression ({MultiplicationExpression.left=current} operator=MultiplicationOperator right=UnaryExpression)*
;

UnaryExpression returns Expression:
	(unaryOperator=UnaryOperator)? right=FieldAccessExpression
;

FieldAccessExpression returns Expression:
	ParameterOrFieldOrMethodExpression ({FieldAccessExpression.left=current} '.' right=FieldOrMethodExpression)*
;

ParameterOrFieldOrMethodExpression returns Expression:
	literal=Literal |
	this='this' |
//	declaredParameterName=[DeclaredParameterName] |
	id=ID |
	':' parameterName=ParameterName |
	ParenthesesExpression
;

FieldOrMethodExpression returns Expression:
	literal=Literal |
	this='this' |
	id=ID |
	ParenthesesExpression
;

ParenthesesExpression returns Expression:
	'(' ConditionalOrExpression ')'
;

Cast:
	'(' Type ')'
;

Type:
	PrimitiveType |
	ClassOrInterfaceName
;

PrimitiveType:
	NumericType |
	'boolean'
;

NumericType:
	IntegralType |
	FloatingPointType
;

IntegralType:
	'byte' | 'short' | 'int' | 'long' | 'char'
;

FloatingPointType:
	'float' | 'double'
;

IntegerLiteral:                                        
	INT
;

FloatingPointLiteral:
	INT		// TODO
;                                 

CharacterLiteral:                                      
	STRING		// TODO
;

StringLiteral:
	STRING
;                                         

BooleanLiteral:
    'true' | 'false'
;

NullLiteral:
    'null'
;

Literal:
    IntegerLiteral |
//    FloatingPointLiteral |
    BooleanLiteral |
//    CharacterLiteral |
    StringLiteral |
    NullLiteral
;

QualifiedIdentifier:
	ID ('.'ID)*
;

CandidateClassName:
	QualifiedIdentifier
;

ClassOrInterfaceName:
	QualifiedIdentifier
;

enum UnaryOperator: 
	positive='+' |
	negative='-' |
	bitwiseNot='~' |
	logicalNot='!'
;

enum AdditionOperator:
	add='+' |
	subtract='-'
;

enum MultiplicationOperator:
	multiply='*' |
	divide='/' |
	modulo='%'
;

enum ComparisonOperator:
	lessThen='<' | 
	greaterThen='>' | 
	lessEqual='<=' | 
	greaterEqual='>=' | 
	equal='==' | 
	notEqual='!=' |
	instanceof='instanceof'
;
