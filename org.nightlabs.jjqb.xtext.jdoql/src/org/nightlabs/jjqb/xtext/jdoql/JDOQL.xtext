grammar org.nightlabs.jjqb.xtext.jdoql.JDOQL with org.eclipse.xtext.common.Terminals

generate jDOQL 'http://www.nightlabs.org/jjqb/xtext/jdoql/JDOQL'

// http://db.apache.org/jdo/specifications.html
// Current spec: 3.0, chapter 26 JDOQL BNF, page 341ff

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

SingleStringJDOQL: 
	selectClause=SelectClause
	fromClause=FromClause
	(whereClause=WhereClause)?
	(variablesClause=VariablesClause)?
	(parametersClause=ParametersClause)?
	(importClause=ImportClause)?
	(groupByClause=GroupByClause)?
	(orderByClause=OrderByClause)?
	(rangeClause=RangeClause)?
;

SelectClause:
	{SelectClause} 'SELECT' (isUnique?='UNIQUE')? (resultClause=ResultClause)? (intoClause=IntoClause)?
;

ResultClause:
	(isDistinct?='DISTINCT')? resultSpecs+=ResultSpec (',' resultSpecs+=ResultSpec)*
;

IntoClause:
	'INTO' resultClassName=ClassOrInterfaceName
;

ResultSpec:
	ConditionalOrExpression (resultNaming=ResultNaming)?
;

ResultNaming:
	'AS' identifier=ID
;

FromClause:
	'FROM' candidateClassName=CandidateClassName (isExcludeSubclasses?='EXCLUDE' 'SUBCLASSES')?
;

WhereClause:
	'WHERE' filter=ConditionalOrExpression
;

VariablesClause:
	'VARIABLES' variableDeclarations+=VariableDeclaration (';' variableDeclarations+=VariableDeclaration)* ';'?
;

VariableDeclaration:
	type=Type variableName=VariableName
;

VariableName: ID;

ParametersClause:
	'PARAMETERS' parameterDeclarations+=ParameterDeclaration (',' parameterDeclarations+=ParameterDeclaration)* ','?
;

ParameterDeclaration:
	type=Type declaredParameterName=DeclaredParameterName
;

DeclaredParameterName: ParameterName;

ParameterName: ID;

ImportClause:
	importDeclarations+=ImportDeclaration (';' importDeclarations+=ImportDeclaration)* ';'?
;

ImportDeclaration:
	'import' QualifiedIdentifier
;

GroupByClause:
	'GROUP' 'BY' grouping+=ConditionalOrExpression (',' grouping+=ConditionalOrExpression)* ','? (havingClause=HavingClause)?
;

HavingClause:
	'HAVING' having=ConditionalOrExpression
;

OrderByClause:
	'ORDER' 'BY' ordering+=OrderBySpec (',' ordering+=OrderBySpec)* ','?
;

OrderBySpec:
	ConditionalOrExpression direction=OrderByDirection
;

enum OrderByDirection:
	asc='ASC' | ascending='ASCENDING' |
	desc='DESC' | descending='DESCENDING'
;

RangeClause:
	'RANGE' start=ConditionalOrExpression ',' end=ConditionalOrExpression
;

ConditionalOrExpression returns Expression:
	ConditionalAndExpression ({ConditionalOrExpression.left=current} '||' right=ConditionalAndExpression)*
;

ConditionalAndExpression returns Expression:
	SimpleOrExpression ({ConditionalAndExpression.left=current} '&&' right=SimpleOrExpression)*
;

SimpleOrExpression returns Expression:
	SimpleAndExpression ({SimpleOrExpression.left=current} '|' right=SimpleAndExpression)*
;

SimpleAndExpression returns Expression:
	ComparisonOperatorExpression ({SimpleAndExpression.left=current} '&' right=ComparisonOperatorExpression)*
;

ComparisonOperatorExpression returns Expression:
	AdditionExpression ({ComparisonOperatorExpression.left=current} operator=ComparisonOperator right=AdditionExpression)*
;

AdditionExpression returns Expression:
	MultiplicationExpression ({AdditionExpression.left=current} operator=AdditionOperator right=MultiplicationExpression)*
;

MultiplicationExpression returns Expression:
	UnaryExpression ({MultiplicationExpression.left=current} operator=MultiplicationOperator right=UnaryExpression)*
;

UnaryExpression returns Expression:
	(unaryOperator=UnaryOperator)? right=FieldAccessExpression
;

FieldAccessExpression returns Expression:
	StaticMethodExpression |
	ParameterOrFieldOrMethodExpression ({FieldAccessExpression.left=current} '.' right=FieldOrMethodExpression)*
;

ParameterOrFieldOrMethodExpression returns Expression:
	literal=Literal |
	this='this' |
//	declaredParameterName=[DeclaredParameterName] |
	id=ID |
	':' parameterName=ParameterName |
	ParenthesesExpression |
	method=MethodExpression
;

FieldOrMethodExpression returns Expression:
	literal=Literal |
	this='this' |
	id=ID |
	ParenthesesExpression |
	method=MethodExpression
;

StaticMethodExpression returns Expression:
	{Expression} 'java.lang.'? 'Math.abs' '(' numeric=ConditionalOrExpression ')' |
	{Expression} 'java.lang.'? 'Math.sqrt' '(' numeric=ConditionalOrExpression ')' |
	{Expression} 'javax.jdo.'? 'JDOHelper.getObjectId' '(' persistable=ConditionalOrExpression ')'
;

MethodExpression returns Expression:
	// BEGIN Collection methods
	{Expression} 'contains' '(' element=ConditionalOrExpression ')' |
	{Expression} 'isEmpty' '(' ')' |
	{Expression} 'size' '(' ')' |
	{Expression} 'get' '(' arg=ConditionalOrExpression ')' | // arg is the index in case of a List
	// END Collection methods

	// BEGIN Map methods
	{Expression} 'containsKey' '(' key=ConditionalOrExpression ')' |
	{Expression} 'containsValue' '(' value=ConditionalOrExpression ')' |
//	{Expression} 'isEmpty' '(' ')' | // already declared as Collection method - cannot redeclare
//	{Expression} 'size' '(' ')' | // already declared as Collection method - cannot redeclare
//	{Expression} 'get' '(' arg=ConditionalOrExpression ')' | // arg is the key, but already declared as Collection method - cannot redeclare
	// END Map methods
	
	// BEGIN String methods
	{Expression} 'startsWith' '(' string=ConditionalOrExpression ')' |
	{Expression} 'endsWith' '(' string=ConditionalOrExpression ')' |
	{Expression} 'matches' '(' regex=ConditionalOrExpression ')' |
	{Expression} 'toLowerCase' '(' ')' |
	{Expression} 'toUpperCase' '(' ')' |
	{Expression} 'indexOf' '(' string=ConditionalOrExpression (',' fromIndex=ConditionalOrExpression )? ')' |
	{Expression} 'substring' '(' beginIndex=ConditionalOrExpression (',' endIndex=ConditionalOrExpression)? ')'
	// END String methods
;

ParenthesesExpression returns Expression:
	'(' ConditionalOrExpression ')'
;

Cast:
	'(' Type ')'
;

Type:
	PrimitiveType |
	ClassOrInterfaceName
;

PrimitiveType:
	NumericType |
	'boolean'
;

NumericType:
	IntegralType |
	FloatingPointType
;

IntegralType:
	'byte' | 'short' | 'int' | 'long' | 'char'
;

FloatingPointType:
	'float' | 'double'
;

IntegerLiteral:
	INT
;                                 

StringLiteral:
	STRING
;                                         

BooleanLiteral:
	'true' | 'false'
;

NullLiteral:
	'null'
;

Literal:
	IntegerLiteral |
	BooleanLiteral |
	StringLiteral |
	NullLiteral
;

QualifiedIdentifier:
	ID ('.'ID)*
;

CandidateClassName:
	QualifiedIdentifier
;

ClassOrInterfaceName:
	QualifiedIdentifier
;

enum UnaryOperator: 
	positive='+' |
	negative='-' |
	bitwiseNot='~' |
	logicalNot='!'
;

enum AdditionOperator:
	add='+' |
	subtract='-'
;

enum MultiplicationOperator:
	multiply='*' |
	divide='/' |
	modulo='%'
;

enum ComparisonOperator:
	lessThen='<' | 
	greaterThen='>' | 
	lessEqual='<=' | 
	greaterEqual='>=' | 
	equal='==' | 
	notEqual='!=' |
	instanceof='instanceof'
;
