/*
* generated by Xtext
*/
parser grammar InternalJPQLParser;

options {
	tokenVocab=InternalJPQLLexer;
	superClass=AbstractInternalContentAssistParser;
	
}

@header {
package org.nightlabs.vestigo.xtext.jpql.ui.contentassist.antlr.internal; 

import java.util.Map;
import java.util.HashMap;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.nightlabs.vestigo.xtext.jpql.services.JPQLGrammarAccess;

}

@members {
 
 	private JPQLGrammarAccess grammarAccess;
 	
 	private final Map<String, String> tokenNameToValue = new HashMap<String, String>();
 	
 	{
		tokenNameToValue.put("KEYWORD_1", "'('");
		tokenNameToValue.put("KEYWORD_2", "')'");
		tokenNameToValue.put("KEYWORD_3", "'*'");
		tokenNameToValue.put("KEYWORD_4", "'+'");
		tokenNameToValue.put("KEYWORD_5", "','");
		tokenNameToValue.put("KEYWORD_6", "'-'");
		tokenNameToValue.put("KEYWORD_7", "'.'");
		tokenNameToValue.put("KEYWORD_8", "'/'");
		tokenNameToValue.put("KEYWORD_9", "':'");
		tokenNameToValue.put("KEYWORD_10", "'<'");
		tokenNameToValue.put("KEYWORD_11", "'='");
		tokenNameToValue.put("KEYWORD_12", "'>'");
		tokenNameToValue.put("KEYWORD_13", "'?'");
		tokenNameToValue.put("KEYWORD_14", "'<='");
		tokenNameToValue.put("KEYWORD_15", "'<>'");
		tokenNameToValue.put("KEYWORD_16", "'>='");
		tokenNameToValue.put("KEYWORD_17", "'AS'");
		tokenNameToValue.put("KEYWORD_18", "'BY'");
		tokenNameToValue.put("KEYWORD_19", "'IN'");
		tokenNameToValue.put("KEYWORD_20", "'IS'");
		tokenNameToValue.put("KEYWORD_21", "'OF'");
		tokenNameToValue.put("KEYWORD_22", "'OR'");
		tokenNameToValue.put("KEYWORD_23", "'ABS'");
		tokenNameToValue.put("KEYWORD_24", "'ALL'");
		tokenNameToValue.put("KEYWORD_25", "'AND'");
		tokenNameToValue.put("KEYWORD_26", "'ANY'");
		tokenNameToValue.put("KEYWORD_27", "'ASC'");
		tokenNameToValue.put("KEYWORD_28", "'AVG'");
		tokenNameToValue.put("KEYWORD_29", "'DAY'");
		tokenNameToValue.put("KEYWORD_30", "'MAX'");
		tokenNameToValue.put("KEYWORD_31", "'MIN'");
		tokenNameToValue.put("KEYWORD_32", "'MOD'");
		tokenNameToValue.put("KEYWORD_33", "'NEW'");
		tokenNameToValue.put("KEYWORD_34", "'NOT'");
		tokenNameToValue.put("KEYWORD_35", "'SET'");
		tokenNameToValue.put("KEYWORD_36", "'SUM'");
		tokenNameToValue.put("KEYWORD_37", "'BOTH'");
		tokenNameToValue.put("KEYWORD_38", "'DESC'");
		tokenNameToValue.put("KEYWORD_39", "'FROM'");
		tokenNameToValue.put("KEYWORD_40", "'HOUR'");
		tokenNameToValue.put("KEYWORD_41", "'JOIN'");
		tokenNameToValue.put("KEYWORD_42", "'LEFT'");
		tokenNameToValue.put("KEYWORD_43", "'LIKE'");
		tokenNameToValue.put("KEYWORD_44", "'NULL'");
		tokenNameToValue.put("KEYWORD_45", "'SIZE'");
		tokenNameToValue.put("KEYWORD_46", "'SOME'");
		tokenNameToValue.put("KEYWORD_47", "'SQRT'");
		tokenNameToValue.put("KEYWORD_48", "'TRIM'");
		tokenNameToValue.put("KEYWORD_49", "'TRUE'");
		tokenNameToValue.put("KEYWORD_50", "'YEAR'");
		tokenNameToValue.put("KEYWORD_51", "'COUNT'");
		tokenNameToValue.put("KEYWORD_52", "'EMPTY'");
		tokenNameToValue.put("KEYWORD_53", "'FALSE'");
		tokenNameToValue.put("KEYWORD_54", "'FETCH'");
		tokenNameToValue.put("KEYWORD_55", "'GROUP'");
		tokenNameToValue.put("KEYWORD_56", "'INDEX'");
		tokenNameToValue.put("KEYWORD_57", "'INNER'");
		tokenNameToValue.put("KEYWORD_58", "'LOWER'");
		tokenNameToValue.put("KEYWORD_59", "'MONTH'");
		tokenNameToValue.put("KEYWORD_60", "'ORDER'");
		tokenNameToValue.put("KEYWORD_61", "'OUTER'");
		tokenNameToValue.put("KEYWORD_62", "'UPPER'");
		tokenNameToValue.put("KEYWORD_63", "'WHERE'");
		tokenNameToValue.put("KEYWORD_64", "'CONCAT'");
		tokenNameToValue.put("KEYWORD_65", "'DELETE'");
		tokenNameToValue.put("KEYWORD_66", "'EXISTS'");
		tokenNameToValue.put("KEYWORD_67", "'HAVING'");
		tokenNameToValue.put("KEYWORD_68", "'LENGTH'");
		tokenNameToValue.put("KEYWORD_69", "'LOCATE'");
		tokenNameToValue.put("KEYWORD_70", "'MEMBER'");
		tokenNameToValue.put("KEYWORD_71", "'MINUTE'");
		tokenNameToValue.put("KEYWORD_72", "'SECOND'");
		tokenNameToValue.put("KEYWORD_73", "'SELECT'");
		tokenNameToValue.put("KEYWORD_74", "'UPDATE'");
		tokenNameToValue.put("KEYWORD_75", "'BETWEEN'");
		tokenNameToValue.put("KEYWORD_76", "'LEADING'");
		tokenNameToValue.put("KEYWORD_77", "'DISTINCT'");
		tokenNameToValue.put("KEYWORD_78", "'TRAILING'");
		tokenNameToValue.put("KEYWORD_79", "'SUBSTRING'");
		tokenNameToValue.put("KEYWORD_80", "'CURRENT_DATE'");
		tokenNameToValue.put("KEYWORD_81", "'CURRENT_TIME'");
		tokenNameToValue.put("KEYWORD_82", "'CURRENT_TIMESTAMP'");
 	}
 	
    public void setGrammarAccess(JPQLGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }

	@Override
    protected String getValueForTokenName(String tokenName) {
    	String result = tokenNameToValue.get(tokenName);
    	if (result == null)
    		result = tokenName;
    	return result;
    }
}




// Entry rule entryRuleJPQLQuery
entryRuleJPQLQuery 
:
{ before(grammarAccess.getJPQLQueryRule()); }
	 ruleJPQLQuery
{ after(grammarAccess.getJPQLQueryRule()); } 
	 EOF 
;

// Rule JPQLQuery
ruleJPQLQuery 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getJPQLQueryAccess().getAlternatives()); }
(rule__JPQLQuery__Alternatives)
{ after(grammarAccess.getJPQLQueryAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSelectStatement
entryRuleSelectStatement 
:
{ before(grammarAccess.getSelectStatementRule()); }
	 ruleSelectStatement
{ after(grammarAccess.getSelectStatementRule()); } 
	 EOF 
;

// Rule SelectStatement
ruleSelectStatement 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSelectStatementAccess().getGroup()); }
(rule__SelectStatement__Group__0)
{ after(grammarAccess.getSelectStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGroupByClause
entryRuleGroupByClause 
:
{ before(grammarAccess.getGroupByClauseRule()); }
	 ruleGroupByClause
{ after(grammarAccess.getGroupByClauseRule()); } 
	 EOF 
;

// Rule GroupByClause
ruleGroupByClause 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getGroupByClauseAccess().getGroup()); }
(rule__GroupByClause__Group__0)
{ after(grammarAccess.getGroupByClauseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleHavingClause
entryRuleHavingClause 
:
{ before(grammarAccess.getHavingClauseRule()); }
	 ruleHavingClause
{ after(grammarAccess.getHavingClauseRule()); } 
	 EOF 
;

// Rule HavingClause
ruleHavingClause 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getHavingClauseAccess().getGroup()); }
(rule__HavingClause__Group__0)
{ after(grammarAccess.getHavingClauseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOrderByClause
entryRuleOrderByClause 
:
{ before(grammarAccess.getOrderByClauseRule()); }
	 ruleOrderByClause
{ after(grammarAccess.getOrderByClauseRule()); } 
	 EOF 
;

// Rule OrderByClause
ruleOrderByClause 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getOrderByClauseAccess().getGroup()); }
(rule__OrderByClause__Group__0)
{ after(grammarAccess.getOrderByClauseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOrderBySpec
entryRuleOrderBySpec 
:
{ before(grammarAccess.getOrderBySpecRule()); }
	 ruleOrderBySpec
{ after(grammarAccess.getOrderBySpecRule()); } 
	 EOF 
;

// Rule OrderBySpec
ruleOrderBySpec 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getOrderBySpecAccess().getGroup()); }
(rule__OrderBySpec__Group__0)
{ after(grammarAccess.getOrderBySpecAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUpdateStatement
entryRuleUpdateStatement 
:
{ before(grammarAccess.getUpdateStatementRule()); }
	 ruleUpdateStatement
{ after(grammarAccess.getUpdateStatementRule()); } 
	 EOF 
;

// Rule UpdateStatement
ruleUpdateStatement 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getUpdateStatementAccess().getGroup()); }
(rule__UpdateStatement__Group__0)
{ after(grammarAccess.getUpdateStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUpdateClause
entryRuleUpdateClause 
:
{ before(grammarAccess.getUpdateClauseRule()); }
	 ruleUpdateClause
{ after(grammarAccess.getUpdateClauseRule()); } 
	 EOF 
;

// Rule UpdateClause
ruleUpdateClause 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getUpdateClauseAccess().getGroup()); }
(rule__UpdateClause__Group__0)
{ after(grammarAccess.getUpdateClauseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSetClause
entryRuleSetClause 
:
{ before(grammarAccess.getSetClauseRule()); }
	 ruleSetClause
{ after(grammarAccess.getSetClauseRule()); } 
	 EOF 
;

// Rule SetClause
ruleSetClause 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSetClauseAccess().getGroup()); }
(rule__SetClause__Group__0)
{ after(grammarAccess.getSetClauseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUpdateItem
entryRuleUpdateItem 
:
{ before(grammarAccess.getUpdateItemRule()); }
	 ruleUpdateItem
{ after(grammarAccess.getUpdateItemRule()); } 
	 EOF 
;

// Rule UpdateItem
ruleUpdateItem 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getUpdateItemAccess().getGroup()); }
(rule__UpdateItem__Group__0)
{ after(grammarAccess.getUpdateItemAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDeleteStatement
entryRuleDeleteStatement 
:
{ before(grammarAccess.getDeleteStatementRule()); }
	 ruleDeleteStatement
{ after(grammarAccess.getDeleteStatementRule()); } 
	 EOF 
;

// Rule DeleteStatement
ruleDeleteStatement 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getDeleteStatementAccess().getGroup()); }
(rule__DeleteStatement__Group__0)
{ after(grammarAccess.getDeleteStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDeleteClause
entryRuleDeleteClause 
:
{ before(grammarAccess.getDeleteClauseRule()); }
	 ruleDeleteClause
{ after(grammarAccess.getDeleteClauseRule()); } 
	 EOF 
;

// Rule DeleteClause
ruleDeleteClause 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getDeleteClauseAccess().getGroup()); }
(rule__DeleteClause__Group__0)
{ after(grammarAccess.getDeleteClauseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSelectClause
entryRuleSelectClause 
:
{ before(grammarAccess.getSelectClauseRule()); }
	 ruleSelectClause
{ after(grammarAccess.getSelectClauseRule()); } 
	 EOF 
;

// Rule SelectClause
ruleSelectClause 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSelectClauseAccess().getGroup()); }
(rule__SelectClause__Group__0)
{ after(grammarAccess.getSelectClauseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSelectExpression
entryRuleSelectExpression 
:
{ before(grammarAccess.getSelectExpressionRule()); }
	 ruleSelectExpression
{ after(grammarAccess.getSelectExpressionRule()); } 
	 EOF 
;

// Rule SelectExpression
ruleSelectExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSelectExpressionAccess().getAlternatives()); }
(rule__SelectExpression__Alternatives)
{ after(grammarAccess.getSelectExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSelectAggregateExpression
entryRuleSelectAggregateExpression 
:
{ before(grammarAccess.getSelectAggregateExpressionRule()); }
	 ruleSelectAggregateExpression
{ after(grammarAccess.getSelectAggregateExpressionRule()); } 
	 EOF 
;

// Rule SelectAggregateExpression
ruleSelectAggregateExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSelectAggregateExpressionAccess().getAlternatives()); }
(rule__SelectAggregateExpression__Alternatives)
{ after(grammarAccess.getSelectAggregateExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAvgAggregate
entryRuleAvgAggregate 
:
{ before(grammarAccess.getAvgAggregateRule()); }
	 ruleAvgAggregate
{ after(grammarAccess.getAvgAggregateRule()); } 
	 EOF 
;

// Rule AvgAggregate
ruleAvgAggregate 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getAvgAggregateAccess().getGroup()); }
(rule__AvgAggregate__Group__0)
{ after(grammarAccess.getAvgAggregateAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCountAggregate
entryRuleCountAggregate 
:
{ before(grammarAccess.getCountAggregateRule()); }
	 ruleCountAggregate
{ after(grammarAccess.getCountAggregateRule()); } 
	 EOF 
;

// Rule CountAggregate
ruleCountAggregate 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getCountAggregateAccess().getGroup()); }
(rule__CountAggregate__Group__0)
{ after(grammarAccess.getCountAggregateAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMaxAggregate
entryRuleMaxAggregate 
:
{ before(grammarAccess.getMaxAggregateRule()); }
	 ruleMaxAggregate
{ after(grammarAccess.getMaxAggregateRule()); } 
	 EOF 
;

// Rule MaxAggregate
ruleMaxAggregate 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getMaxAggregateAccess().getGroup()); }
(rule__MaxAggregate__Group__0)
{ after(grammarAccess.getMaxAggregateAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMinAggregate
entryRuleMinAggregate 
:
{ before(grammarAccess.getMinAggregateRule()); }
	 ruleMinAggregate
{ after(grammarAccess.getMinAggregateRule()); } 
	 EOF 
;

// Rule MinAggregate
ruleMinAggregate 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getMinAggregateAccess().getGroup()); }
(rule__MinAggregate__Group__0)
{ after(grammarAccess.getMinAggregateAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSumAggregate
entryRuleSumAggregate 
:
{ before(grammarAccess.getSumAggregateRule()); }
	 ruleSumAggregate
{ after(grammarAccess.getSumAggregateRule()); } 
	 EOF 
;

// Rule SumAggregate
ruleSumAggregate 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSumAggregateAccess().getGroup()); }
(rule__SumAggregate__Group__0)
{ after(grammarAccess.getSumAggregateAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSelectConstructorExpression
entryRuleSelectConstructorExpression 
:
{ before(grammarAccess.getSelectConstructorExpressionRule()); }
	 ruleSelectConstructorExpression
{ after(grammarAccess.getSelectConstructorExpressionRule()); } 
	 EOF 
;

// Rule SelectConstructorExpression
ruleSelectConstructorExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSelectConstructorExpressionAccess().getGroup()); }
(rule__SelectConstructorExpression__Group__0)
{ after(grammarAccess.getSelectConstructorExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFromClause
entryRuleFromClause 
:
{ before(grammarAccess.getFromClauseRule()); }
	 ruleFromClause
{ after(grammarAccess.getFromClauseRule()); } 
	 EOF 
;

// Rule FromClause
ruleFromClause 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getFromClauseAccess().getGroup()); }
(rule__FromClause__Group__0)
{ after(grammarAccess.getFromClauseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFromEntry
entryRuleFromEntry 
:
{ before(grammarAccess.getFromEntryRule()); }
	 ruleFromEntry
{ after(grammarAccess.getFromEntryRule()); } 
	 EOF 
;

// Rule FromEntry
ruleFromEntry 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getFromEntryAccess().getAlternatives()); }
(rule__FromEntry__Alternatives)
{ after(grammarAccess.getFromEntryAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariableDeclaration
entryRuleVariableDeclaration 
:
{ before(grammarAccess.getVariableDeclarationRule()); }
	 ruleVariableDeclaration
{ after(grammarAccess.getVariableDeclarationRule()); } 
	 EOF 
;

// Rule VariableDeclaration
ruleVariableDeclaration 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getVariableDeclarationAccess().getGroup()); }
(rule__VariableDeclaration__Group__0)
{ after(grammarAccess.getVariableDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFromClass
entryRuleFromClass 
:
{ before(grammarAccess.getFromClassRule()); }
	 ruleFromClass
{ after(grammarAccess.getFromClassRule()); } 
	 EOF 
;

// Rule FromClass
ruleFromClass 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getFromClassAccess().getAlternatives()); }
(rule__FromClass__Alternatives)
{ after(grammarAccess.getFromClassAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQualifiedIdentifier
entryRuleQualifiedIdentifier 
:
{ before(grammarAccess.getQualifiedIdentifierRule()); }
	 ruleQualifiedIdentifier
{ after(grammarAccess.getQualifiedIdentifierRule()); } 
	 EOF 
;

// Rule QualifiedIdentifier
ruleQualifiedIdentifier 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getQualifiedIdentifierAccess().getGroup()); }
(rule__QualifiedIdentifier__Group__0)
{ after(grammarAccess.getQualifiedIdentifierAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFromClassId
entryRuleFromClassId 
:
{ before(grammarAccess.getFromClassIdRule()); }
	 ruleFromClassId
{ after(grammarAccess.getFromClassIdRule()); } 
	 EOF 
;

// Rule FromClassId
ruleFromClassId 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getFromClassIdAccess().getTypeAssignment()); }
(rule__FromClassId__TypeAssignment)
{ after(grammarAccess.getFromClassIdAccess().getTypeAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFromClassVar
entryRuleFromClassVar 
:
{ before(grammarAccess.getFromClassVarRule()); }
	 ruleFromClassVar
{ after(grammarAccess.getFromClassVarRule()); } 
	 EOF 
;

// Rule FromClassVar
ruleFromClassVar 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getFromClassVarAccess().getGroup()); }
(rule__FromClassVar__Group__0)
{ after(grammarAccess.getFromClassVarAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFromCollection
entryRuleFromCollection 
:
{ before(grammarAccess.getFromCollectionRule()); }
	 ruleFromCollection
{ after(grammarAccess.getFromCollectionRule()); } 
	 EOF 
;

// Rule FromCollection
ruleFromCollection 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getFromCollectionAccess().getGroup()); }
(rule__FromCollection__Group__0)
{ after(grammarAccess.getFromCollectionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFromJoin
entryRuleFromJoin 
:
{ before(grammarAccess.getFromJoinRule()); }
	 ruleFromJoin
{ after(grammarAccess.getFromJoinRule()); } 
	 EOF 
;

// Rule FromJoin
ruleFromJoin 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getFromJoinAccess().getAlternatives()); }
(rule__FromJoin__Alternatives)
{ after(grammarAccess.getFromJoinAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleJoin
entryRuleJoin 
:
{ before(grammarAccess.getJoinRule()); }
	 ruleJoin
{ after(grammarAccess.getJoinRule()); } 
	 EOF 
;

// Rule Join
ruleJoin 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getJoinAccess().getGroup()); }
(rule__Join__Group__0)
{ after(grammarAccess.getJoinAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLeftJoin
entryRuleLeftJoin 
:
{ before(grammarAccess.getLeftJoinRule()); }
	 ruleLeftJoin
{ after(grammarAccess.getLeftJoinRule()); } 
	 EOF 
;

// Rule LeftJoin
ruleLeftJoin 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getLeftJoinAccess().getGroup()); }
(rule__LeftJoin__Group__0)
{ after(grammarAccess.getLeftJoinAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInnerJoin
entryRuleInnerJoin 
:
{ before(grammarAccess.getInnerJoinRule()); }
	 ruleInnerJoin
{ after(grammarAccess.getInnerJoinRule()); } 
	 EOF 
;

// Rule InnerJoin
ruleInnerJoin 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getInnerJoinAccess().getGroup()); }
(rule__InnerJoin__Group__0)
{ after(grammarAccess.getInnerJoinAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleWhereClause
entryRuleWhereClause 
:
{ before(grammarAccess.getWhereClauseRule()); }
	 ruleWhereClause
{ after(grammarAccess.getWhereClauseRule()); } 
	 EOF 
;

// Rule WhereClause
ruleWhereClause 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getWhereClauseAccess().getGroup()); }
(rule__WhereClause__Group__0)
{ after(grammarAccess.getWhereClauseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOrExpression
entryRuleOrExpression 
:
{ before(grammarAccess.getOrExpressionRule()); }
	 ruleOrExpression
{ after(grammarAccess.getOrExpressionRule()); } 
	 EOF 
;

// Rule OrExpression
ruleOrExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getOrExpressionAccess().getGroup()); }
(rule__OrExpression__Group__0)
{ after(grammarAccess.getOrExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAndExpression
entryRuleAndExpression 
:
{ before(grammarAccess.getAndExpressionRule()); }
	 ruleAndExpression
{ after(grammarAccess.getAndExpressionRule()); } 
	 EOF 
;

// Rule AndExpression
ruleAndExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getAndExpressionAccess().getGroup()); }
(rule__AndExpression__Group__0)
{ after(grammarAccess.getAndExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleComparisonOperatorExpression
entryRuleComparisonOperatorExpression 
:
{ before(grammarAccess.getComparisonOperatorExpressionRule()); }
	 ruleComparisonOperatorExpression
{ after(grammarAccess.getComparisonOperatorExpressionRule()); } 
	 EOF 
;

// Rule ComparisonOperatorExpression
ruleComparisonOperatorExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getComparisonOperatorExpressionAccess().getGroup()); }
(rule__ComparisonOperatorExpression__Group__0)
{ after(grammarAccess.getComparisonOperatorExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAdditionExpression
entryRuleAdditionExpression 
:
{ before(grammarAccess.getAdditionExpressionRule()); }
	 ruleAdditionExpression
{ after(grammarAccess.getAdditionExpressionRule()); } 
	 EOF 
;

// Rule AdditionExpression
ruleAdditionExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getAdditionExpressionAccess().getGroup()); }
(rule__AdditionExpression__Group__0)
{ after(grammarAccess.getAdditionExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMultiplicationExpression
entryRuleMultiplicationExpression 
:
{ before(grammarAccess.getMultiplicationExpressionRule()); }
	 ruleMultiplicationExpression
{ after(grammarAccess.getMultiplicationExpressionRule()); } 
	 EOF 
;

// Rule MultiplicationExpression
ruleMultiplicationExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getMultiplicationExpressionAccess().getGroup()); }
(rule__MultiplicationExpression__Group__0)
{ after(grammarAccess.getMultiplicationExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnaryExpression
entryRuleUnaryExpression 
:
{ before(grammarAccess.getUnaryExpressionRule()); }
	 ruleUnaryExpression
{ after(grammarAccess.getUnaryExpressionRule()); } 
	 EOF 
;

// Rule UnaryExpression
ruleUnaryExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getUnaryExpressionAccess().getGroup()); }
(rule__UnaryExpression__Group__0)
{ after(grammarAccess.getUnaryExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConcreteExpression
entryRuleConcreteExpression 
:
{ before(grammarAccess.getConcreteExpressionRule()); }
	 ruleConcreteExpression
{ after(grammarAccess.getConcreteExpressionRule()); } 
	 EOF 
;

// Rule ConcreteExpression
ruleConcreteExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getConcreteExpressionAccess().getAlternatives()); }
(rule__ConcreteExpression__Alternatives)
{ after(grammarAccess.getConcreteExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParenthesesExpression
entryRuleParenthesesExpression 
:
{ before(grammarAccess.getParenthesesExpressionRule()); }
	 ruleParenthesesExpression
{ after(grammarAccess.getParenthesesExpressionRule()); } 
	 EOF 
;

// Rule ParenthesesExpression
ruleParenthesesExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getParenthesesExpressionAccess().getGroup()); }
(rule__ParenthesesExpression__Group__0)
{ after(grammarAccess.getParenthesesExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExistsExpression
entryRuleExistsExpression 
:
{ before(grammarAccess.getExistsExpressionRule()); }
	 ruleExistsExpression
{ after(grammarAccess.getExistsExpressionRule()); } 
	 EOF 
;

// Rule ExistsExpression
ruleExistsExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getExistsExpressionAccess().getGroup()); }
(rule__ExistsExpression__Group__0)
{ after(grammarAccess.getExistsExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAllExpression
entryRuleAllExpression 
:
{ before(grammarAccess.getAllExpressionRule()); }
	 ruleAllExpression
{ after(grammarAccess.getAllExpressionRule()); } 
	 EOF 
;

// Rule AllExpression
ruleAllExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getAllExpressionAccess().getGroup()); }
(rule__AllExpression__Group__0)
{ after(grammarAccess.getAllExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAnyExpression
entryRuleAnyExpression 
:
{ before(grammarAccess.getAnyExpressionRule()); }
	 ruleAnyExpression
{ after(grammarAccess.getAnyExpressionRule()); } 
	 EOF 
;

// Rule AnyExpression
ruleAnyExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getAnyExpressionAccess().getGroup()); }
(rule__AnyExpression__Group__0)
{ after(grammarAccess.getAnyExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSomeExpression
entryRuleSomeExpression 
:
{ before(grammarAccess.getSomeExpressionRule()); }
	 ruleSomeExpression
{ after(grammarAccess.getSomeExpressionRule()); } 
	 EOF 
;

// Rule SomeExpression
ruleSomeExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSomeExpressionAccess().getGroup()); }
(rule__SomeExpression__Group__0)
{ after(grammarAccess.getSomeExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCollectionExpression
entryRuleCollectionExpression 
:
{ before(grammarAccess.getCollectionExpressionRule()); }
	 ruleCollectionExpression
{ after(grammarAccess.getCollectionExpressionRule()); } 
	 EOF 
;

// Rule CollectionExpression
ruleCollectionExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getCollectionExpressionAccess().getGroup()); }
(rule__CollectionExpression__Group__0)
{ after(grammarAccess.getCollectionExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNullComparisonExpression
entryRuleNullComparisonExpression 
:
{ before(grammarAccess.getNullComparisonExpressionRule()); }
	 ruleNullComparisonExpression
{ after(grammarAccess.getNullComparisonExpressionRule()); } 
	 EOF 
;

// Rule NullComparisonExpression
ruleNullComparisonExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getNullComparisonExpressionAccess().getGroup()); }
(rule__NullComparisonExpression__Group__0)
{ after(grammarAccess.getNullComparisonExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEmptyComparisonExpression
entryRuleEmptyComparisonExpression 
:
{ before(grammarAccess.getEmptyComparisonExpressionRule()); }
	 ruleEmptyComparisonExpression
{ after(grammarAccess.getEmptyComparisonExpressionRule()); } 
	 EOF 
;

// Rule EmptyComparisonExpression
ruleEmptyComparisonExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getEmptyComparisonExpressionAccess().getGroup()); }
(rule__EmptyComparisonExpression__Group__0)
{ after(grammarAccess.getEmptyComparisonExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLikeExpression
entryRuleLikeExpression 
:
{ before(grammarAccess.getLikeExpressionRule()); }
	 ruleLikeExpression
{ after(grammarAccess.getLikeExpressionRule()); } 
	 EOF 
;

// Rule LikeExpression
ruleLikeExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getLikeExpressionAccess().getGroup()); }
(rule__LikeExpression__Group__0)
{ after(grammarAccess.getLikeExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInExpression
entryRuleInExpression 
:
{ before(grammarAccess.getInExpressionRule()); }
	 ruleInExpression
{ after(grammarAccess.getInExpressionRule()); } 
	 EOF 
;

// Rule InExpression
ruleInExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getInExpressionAccess().getAlternatives()); }
(rule__InExpression__Alternatives)
{ after(grammarAccess.getInExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInSeqExpression
entryRuleInSeqExpression 
:
{ before(grammarAccess.getInSeqExpressionRule()); }
	 ruleInSeqExpression
{ after(grammarAccess.getInSeqExpressionRule()); } 
	 EOF 
;

// Rule InSeqExpression
ruleInSeqExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getInSeqExpressionAccess().getGroup()); }
(rule__InSeqExpression__Group__0)
{ after(grammarAccess.getInSeqExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInQueryExpression
entryRuleInQueryExpression 
:
{ before(grammarAccess.getInQueryExpressionRule()); }
	 ruleInQueryExpression
{ after(grammarAccess.getInQueryExpressionRule()); } 
	 EOF 
;

// Rule InQueryExpression
ruleInQueryExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getInQueryExpressionAccess().getGroup()); }
(rule__InQueryExpression__Group__0)
{ after(grammarAccess.getInQueryExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBetweenExpression
entryRuleBetweenExpression 
:
{ before(grammarAccess.getBetweenExpressionRule()); }
	 ruleBetweenExpression
{ after(grammarAccess.getBetweenExpressionRule()); } 
	 EOF 
;

// Rule BetweenExpression
ruleBetweenExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getBetweenExpressionAccess().getGroup()); }
(rule__BetweenExpression__Group__0)
{ after(grammarAccess.getBetweenExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariable
entryRuleVariable 
:
{ before(grammarAccess.getVariableRule()); }
	 ruleVariable
{ after(grammarAccess.getVariableRule()); } 
	 EOF 
;

// Rule Variable
ruleVariable 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getVariableAccess().getAlternatives()); }
(rule__Variable__Alternatives)
{ after(grammarAccess.getVariableAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpressionTerm
entryRuleExpressionTerm 
:
{ before(grammarAccess.getExpressionTermRule()); }
	 ruleExpressionTerm
{ after(grammarAccess.getExpressionTermRule()); } 
	 EOF 
;

// Rule ExpressionTerm
ruleExpressionTerm 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getExpressionTermAccess().getAlternatives()); }
(rule__ExpressionTerm__Alternatives)
{ after(grammarAccess.getExpressionTermAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAliasAttributeExpression
entryRuleAliasAttributeExpression 
:
{ before(grammarAccess.getAliasAttributeExpressionRule()); }
	 ruleAliasAttributeExpression
{ after(grammarAccess.getAliasAttributeExpressionRule()); } 
	 EOF 
;

// Rule AliasAttributeExpression
ruleAliasAttributeExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getAliasAttributeExpressionAccess().getGroup()); }
(rule__AliasAttributeExpression__Group__0)
{ after(grammarAccess.getAliasAttributeExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParameterExpression
entryRuleParameterExpression 
:
{ before(grammarAccess.getParameterExpressionRule()); }
	 ruleParameterExpression
{ after(grammarAccess.getParameterExpressionRule()); } 
	 EOF 
;

// Rule ParameterExpression
ruleParameterExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getParameterExpressionAccess().getAlternatives()); }
(rule__ParameterExpression__Alternatives)
{ after(grammarAccess.getParameterExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunctionExpression
entryRuleFunctionExpression 
:
{ before(grammarAccess.getFunctionExpressionRule()); }
	 ruleFunctionExpression
{ after(grammarAccess.getFunctionExpressionRule()); } 
	 EOF 
;

// Rule FunctionExpression
ruleFunctionExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getFunctionExpressionAccess().getAlternatives()); }
(rule__FunctionExpression__Alternatives)
{ after(grammarAccess.getFunctionExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStringFunctionExpression
entryRuleStringFunctionExpression 
:
{ before(grammarAccess.getStringFunctionExpressionRule()); }
	 ruleStringFunctionExpression
{ after(grammarAccess.getStringFunctionExpressionRule()); } 
	 EOF 
;

// Rule StringFunctionExpression
ruleStringFunctionExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getStringFunctionExpressionAccess().getAlternatives()); }
(rule__StringFunctionExpression__Alternatives)
{ after(grammarAccess.getStringFunctionExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleArithmeticFunctionExpression
entryRuleArithmeticFunctionExpression 
:
{ before(grammarAccess.getArithmeticFunctionExpressionRule()); }
	 ruleArithmeticFunctionExpression
{ after(grammarAccess.getArithmeticFunctionExpressionRule()); } 
	 EOF 
;

// Rule ArithmeticFunctionExpression
ruleArithmeticFunctionExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getArithmeticFunctionExpressionAccess().getAlternatives()); }
(rule__ArithmeticFunctionExpression__Alternatives)
{ after(grammarAccess.getArithmeticFunctionExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCollectionFunctionExpression
entryRuleCollectionFunctionExpression 
:
{ before(grammarAccess.getCollectionFunctionExpressionRule()); }
	 ruleCollectionFunctionExpression
{ after(grammarAccess.getCollectionFunctionExpressionRule()); } 
	 EOF 
;

// Rule CollectionFunctionExpression
ruleCollectionFunctionExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getCollectionFunctionExpressionAccess().getAlternatives()); }
(rule__CollectionFunctionExpression__Alternatives)
{ after(grammarAccess.getCollectionFunctionExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTemporalFunctionExpression
entryRuleTemporalFunctionExpression 
:
{ before(grammarAccess.getTemporalFunctionExpressionRule()); }
	 ruleTemporalFunctionExpression
{ after(grammarAccess.getTemporalFunctionExpressionRule()); } 
	 EOF 
;

// Rule TemporalFunctionExpression
ruleTemporalFunctionExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getTemporalFunctionExpressionAccess().getAlternatives()); }
(rule__TemporalFunctionExpression__Alternatives)
{ after(grammarAccess.getTemporalFunctionExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParameterName
entryRuleParameterName 
:
{ before(grammarAccess.getParameterNameRule()); }
	 ruleParameterName
{ after(grammarAccess.getParameterNameRule()); } 
	 EOF 
;

// Rule ParameterName
ruleParameterName 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getParameterNameAccess().getIDTerminalRuleCall()); }
	RULE_ID
{ after(grammarAccess.getParameterNameAccess().getIDTerminalRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLiteral
entryRuleLiteral 
:
{ before(grammarAccess.getLiteralRule()); }
	 ruleLiteral
{ after(grammarAccess.getLiteralRule()); } 
	 EOF 
;

// Rule Literal
ruleLiteral 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getLiteralAccess().getAlternatives()); }
(rule__Literal__Alternatives)
{ after(grammarAccess.getLiteralAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIntegerLiteral
entryRuleIntegerLiteral 
:
{ before(grammarAccess.getIntegerLiteralRule()); }
	 ruleIntegerLiteral
{ after(grammarAccess.getIntegerLiteralRule()); } 
	 EOF 
;

// Rule IntegerLiteral
ruleIntegerLiteral 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getIntegerLiteralAccess().getValueAssignment()); }
(rule__IntegerLiteral__ValueAssignment)
{ after(grammarAccess.getIntegerLiteralAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFloatLiteral
entryRuleFloatLiteral 
:
{ before(grammarAccess.getFloatLiteralRule()); }
	 ruleFloatLiteral
{ after(grammarAccess.getFloatLiteralRule()); } 
	 EOF 
;

// Rule FloatLiteral
ruleFloatLiteral 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getFloatLiteralAccess().getValueAssignment()); }
(rule__FloatLiteral__ValueAssignment)
{ after(grammarAccess.getFloatLiteralAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFloat
entryRuleFloat 
:
{ before(grammarAccess.getFloatRule()); }
	 ruleFloat
{ after(grammarAccess.getFloatRule()); } 
	 EOF 
;

// Rule Float
ruleFloat 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getFloatAccess().getGroup()); }
(rule__Float__Group__0)
{ after(grammarAccess.getFloatAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStringLiteral
entryRuleStringLiteral 
:
{ before(grammarAccess.getStringLiteralRule()); }
	 ruleStringLiteral
{ after(grammarAccess.getStringLiteralRule()); } 
	 EOF 
;

// Rule StringLiteral
ruleStringLiteral 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getStringLiteralAccess().getValueAssignment()); }
(rule__StringLiteral__ValueAssignment)
{ after(grammarAccess.getStringLiteralAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNullLiteral
entryRuleNullLiteral 
:
{ before(grammarAccess.getNullLiteralRule()); }
	 ruleNullLiteral
{ after(grammarAccess.getNullLiteralRule()); } 
	 EOF 
;

// Rule NullLiteral
ruleNullLiteral 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getNullLiteralAccess().getValueAssignment()); }
(rule__NullLiteral__ValueAssignment)
{ after(grammarAccess.getNullLiteralAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBooleanLiteral
entryRuleBooleanLiteral 
:
{ before(grammarAccess.getBooleanLiteralRule()); }
	 ruleBooleanLiteral
{ after(grammarAccess.getBooleanLiteralRule()); } 
	 EOF 
;

// Rule BooleanLiteral
ruleBooleanLiteral 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getBooleanLiteralAccess().getValueAssignment()); }
(rule__BooleanLiteral__ValueAssignment)
{ after(grammarAccess.getBooleanLiteralAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSubquery
entryRuleSubquery 
:
{ before(grammarAccess.getSubqueryRule()); }
	 ruleSubquery
{ after(grammarAccess.getSubqueryRule()); } 
	 EOF 
;

// Rule Subquery
ruleSubquery 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSubqueryAccess().getGroup()); }
(rule__Subquery__Group__0)
{ after(grammarAccess.getSubqueryAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule OrderByDirection
ruleOrderByDirection
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderByDirectionAccess().getAlternatives()); }
(rule__OrderByDirection__Alternatives)
{ after(grammarAccess.getOrderByDirectionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule TrimSpec
ruleTrimSpec
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTrimSpecAccess().getAlternatives()); }
(rule__TrimSpec__Alternatives)
{ after(grammarAccess.getTrimSpecAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule UnaryOperator
ruleUnaryOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperatorAccess().getAlternatives()); }
(rule__UnaryOperator__Alternatives)
{ after(grammarAccess.getUnaryOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule AdditionOperator
ruleAdditionOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionOperatorAccess().getAlternatives()); }
(rule__AdditionOperator__Alternatives)
{ after(grammarAccess.getAdditionOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule MultiplicationOperator
ruleMultiplicationOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationOperatorAccess().getAlternatives()); }
(rule__MultiplicationOperator__Alternatives)
{ after(grammarAccess.getMultiplicationOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule ComparisonOperator
ruleComparisonOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonOperatorAccess().getAlternatives()); }
(rule__ComparisonOperator__Alternatives)
{ after(grammarAccess.getComparisonOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__JPQLQuery__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJPQLQueryAccess().getSelectStatementParserRuleCall_0()); }
	ruleSelectStatement
{ after(grammarAccess.getJPQLQueryAccess().getSelectStatementParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getJPQLQueryAccess().getUpdateStatementParserRuleCall_1()); }
	ruleUpdateStatement
{ after(grammarAccess.getJPQLQueryAccess().getUpdateStatementParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getJPQLQueryAccess().getDeleteStatementParserRuleCall_2()); }
	ruleDeleteStatement
{ after(grammarAccess.getJPQLQueryAccess().getDeleteStatementParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectExpressionAccess().getOrExpressionParserRuleCall_0()); }
	ruleOrExpression
{ after(grammarAccess.getSelectExpressionAccess().getOrExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getSelectExpressionAccess().getSelectAggregateExpressionParserRuleCall_1()); }
	ruleSelectAggregateExpression
{ after(grammarAccess.getSelectExpressionAccess().getSelectAggregateExpressionParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getSelectExpressionAccess().getSelectConstructorExpressionParserRuleCall_2()); }
	ruleSelectConstructorExpression
{ after(grammarAccess.getSelectExpressionAccess().getSelectConstructorExpressionParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectAggregateExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectAggregateExpressionAccess().getAvgAggregateParserRuleCall_0()); }
	ruleAvgAggregate
{ after(grammarAccess.getSelectAggregateExpressionAccess().getAvgAggregateParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getSelectAggregateExpressionAccess().getCountAggregateParserRuleCall_1()); }
	ruleCountAggregate
{ after(grammarAccess.getSelectAggregateExpressionAccess().getCountAggregateParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getSelectAggregateExpressionAccess().getMaxAggregateParserRuleCall_2()); }
	ruleMaxAggregate
{ after(grammarAccess.getSelectAggregateExpressionAccess().getMaxAggregateParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getSelectAggregateExpressionAccess().getMinAggregateParserRuleCall_3()); }
	ruleMinAggregate
{ after(grammarAccess.getSelectAggregateExpressionAccess().getMinAggregateParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getSelectAggregateExpressionAccess().getSumAggregateParserRuleCall_4()); }
	ruleSumAggregate
{ after(grammarAccess.getSelectAggregateExpressionAccess().getSumAggregateParserRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FromEntry__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromEntryAccess().getFromClassParserRuleCall_0()); }
	ruleFromClass
{ after(grammarAccess.getFromEntryAccess().getFromClassParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getFromEntryAccess().getFromCollectionParserRuleCall_1()); }
	ruleFromCollection
{ after(grammarAccess.getFromEntryAccess().getFromCollectionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FromClass__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromClassAccess().getFromClassIdParserRuleCall_0()); }
	ruleFromClassId
{ after(grammarAccess.getFromClassAccess().getFromClassIdParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getFromClassAccess().getFromClassVarParserRuleCall_1()); }
	ruleFromClassVar
{ after(grammarAccess.getFromClassAccess().getFromClassVarParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FromJoin__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromJoinAccess().getJoinParserRuleCall_0()); }
	ruleJoin
{ after(grammarAccess.getFromJoinAccess().getJoinParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getFromJoinAccess().getLeftJoinParserRuleCall_1()); }
	ruleLeftJoin
{ after(grammarAccess.getFromJoinAccess().getLeftJoinParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getFromJoinAccess().getInnerJoinParserRuleCall_2()); }
	ruleInnerJoin
{ after(grammarAccess.getFromJoinAccess().getInnerJoinParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConcreteExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcreteExpressionAccess().getParenthesesExpressionParserRuleCall_0()); }
	ruleParenthesesExpression
{ after(grammarAccess.getConcreteExpressionAccess().getParenthesesExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getConcreteExpressionAccess().getExistsExpressionParserRuleCall_1()); }
	ruleExistsExpression
{ after(grammarAccess.getConcreteExpressionAccess().getExistsExpressionParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getConcreteExpressionAccess().getAllExpressionParserRuleCall_2()); }
	ruleAllExpression
{ after(grammarAccess.getConcreteExpressionAccess().getAllExpressionParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getConcreteExpressionAccess().getAnyExpressionParserRuleCall_3()); }
	ruleAnyExpression
{ after(grammarAccess.getConcreteExpressionAccess().getAnyExpressionParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getConcreteExpressionAccess().getSomeExpressionParserRuleCall_4()); }
	ruleSomeExpression
{ after(grammarAccess.getConcreteExpressionAccess().getSomeExpressionParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getConcreteExpressionAccess().getCollectionExpressionParserRuleCall_5()); }
	ruleCollectionExpression
{ after(grammarAccess.getConcreteExpressionAccess().getCollectionExpressionParserRuleCall_5()); }
)

    |(
{ before(grammarAccess.getConcreteExpressionAccess().getNullComparisonExpressionParserRuleCall_6()); }
	ruleNullComparisonExpression
{ after(grammarAccess.getConcreteExpressionAccess().getNullComparisonExpressionParserRuleCall_6()); }
)

    |(
{ before(grammarAccess.getConcreteExpressionAccess().getEmptyComparisonExpressionParserRuleCall_7()); }
	ruleEmptyComparisonExpression
{ after(grammarAccess.getConcreteExpressionAccess().getEmptyComparisonExpressionParserRuleCall_7()); }
)

    |(
{ before(grammarAccess.getConcreteExpressionAccess().getLikeExpressionParserRuleCall_8()); }
	ruleLikeExpression
{ after(grammarAccess.getConcreteExpressionAccess().getLikeExpressionParserRuleCall_8()); }
)

    |(
{ before(grammarAccess.getConcreteExpressionAccess().getInExpressionParserRuleCall_9()); }
	ruleInExpression
{ after(grammarAccess.getConcreteExpressionAccess().getInExpressionParserRuleCall_9()); }
)

    |(
{ before(grammarAccess.getConcreteExpressionAccess().getBetweenExpressionParserRuleCall_10()); }
	ruleBetweenExpression
{ after(grammarAccess.getConcreteExpressionAccess().getBetweenExpressionParserRuleCall_10()); }
)

    |(
{ before(grammarAccess.getConcreteExpressionAccess().getFunctionExpressionParserRuleCall_11()); }
	ruleFunctionExpression
{ after(grammarAccess.getConcreteExpressionAccess().getFunctionExpressionParserRuleCall_11()); }
)

    |(
{ before(grammarAccess.getConcreteExpressionAccess().getVariableParserRuleCall_12()); }
	ruleVariable
{ after(grammarAccess.getConcreteExpressionAccess().getVariableParserRuleCall_12()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInExpressionAccess().getInSeqExpressionParserRuleCall_0()); }
	ruleInSeqExpression
{ after(grammarAccess.getInExpressionAccess().getInSeqExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getInExpressionAccess().getInQueryExpressionParserRuleCall_1()); }
	ruleInQueryExpression
{ after(grammarAccess.getInExpressionAccess().getInQueryExpressionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAccess().getAliasAttributeExpressionParserRuleCall_0()); }
	ruleAliasAttributeExpression
{ after(grammarAccess.getVariableAccess().getAliasAttributeExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getVariableAccess().getParameterExpressionParserRuleCall_1()); }
	ruleParameterExpression
{ after(grammarAccess.getVariableAccess().getParameterExpressionParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getVariableAccess().getLiteralParserRuleCall_2()); }
	ruleLiteral
{ after(grammarAccess.getVariableAccess().getLiteralParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionTerm__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionTermAccess().getVariableParserRuleCall_0()); }
	ruleVariable
{ after(grammarAccess.getExpressionTermAccess().getVariableParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getExpressionTermAccess().getSubqueryParserRuleCall_1()); }
	ruleSubquery
{ after(grammarAccess.getExpressionTermAccess().getSubqueryParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterExpressionAccess().getGroup_0()); }
(rule__ParameterExpression__Group_0__0)
{ after(grammarAccess.getParameterExpressionAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getParameterExpressionAccess().getGroup_1()); }
(rule__ParameterExpression__Group_1__0)
{ after(grammarAccess.getParameterExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionExpressionAccess().getArithmeticFunctionExpressionParserRuleCall_0()); }
	ruleArithmeticFunctionExpression
{ after(grammarAccess.getFunctionExpressionAccess().getArithmeticFunctionExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getFunctionExpressionAccess().getCollectionFunctionExpressionParserRuleCall_1()); }
	ruleCollectionFunctionExpression
{ after(grammarAccess.getFunctionExpressionAccess().getCollectionFunctionExpressionParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getFunctionExpressionAccess().getStringFunctionExpressionParserRuleCall_2()); }
	ruleStringFunctionExpression
{ after(grammarAccess.getFunctionExpressionAccess().getStringFunctionExpressionParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getFunctionExpressionAccess().getTemporalFunctionExpressionParserRuleCall_3()); }
	ruleTemporalFunctionExpression
{ after(grammarAccess.getFunctionExpressionAccess().getTemporalFunctionExpressionParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringFunctionExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringFunctionExpressionAccess().getGroup_0()); }
(rule__StringFunctionExpression__Group_0__0)
{ after(grammarAccess.getStringFunctionExpressionAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getStringFunctionExpressionAccess().getGroup_1()); }
(rule__StringFunctionExpression__Group_1__0)
{ after(grammarAccess.getStringFunctionExpressionAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getStringFunctionExpressionAccess().getGroup_2()); }
(rule__StringFunctionExpression__Group_2__0)
{ after(grammarAccess.getStringFunctionExpressionAccess().getGroup_2()); }
)

    |(
{ before(grammarAccess.getStringFunctionExpressionAccess().getGroup_3()); }
(rule__StringFunctionExpression__Group_3__0)
{ after(grammarAccess.getStringFunctionExpressionAccess().getGroup_3()); }
)

    |(
{ before(grammarAccess.getStringFunctionExpressionAccess().getGroup_4()); }
(rule__StringFunctionExpression__Group_4__0)
{ after(grammarAccess.getStringFunctionExpressionAccess().getGroup_4()); }
)

    |(
{ before(grammarAccess.getStringFunctionExpressionAccess().getGroup_5()); }
(rule__StringFunctionExpression__Group_5__0)
{ after(grammarAccess.getStringFunctionExpressionAccess().getGroup_5()); }
)

    |(
{ before(grammarAccess.getStringFunctionExpressionAccess().getGroup_6()); }
(rule__StringFunctionExpression__Group_6__0)
{ after(grammarAccess.getStringFunctionExpressionAccess().getGroup_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticFunctionExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArithmeticFunctionExpressionAccess().getGroup_0()); }
(rule__ArithmeticFunctionExpression__Group_0__0)
{ after(grammarAccess.getArithmeticFunctionExpressionAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getArithmeticFunctionExpressionAccess().getGroup_1()); }
(rule__ArithmeticFunctionExpression__Group_1__0)
{ after(grammarAccess.getArithmeticFunctionExpressionAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getArithmeticFunctionExpressionAccess().getGroup_2()); }
(rule__ArithmeticFunctionExpression__Group_2__0)
{ after(grammarAccess.getArithmeticFunctionExpressionAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionFunctionExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectionFunctionExpressionAccess().getGroup_0()); }
(rule__CollectionFunctionExpression__Group_0__0)
{ after(grammarAccess.getCollectionFunctionExpressionAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getCollectionFunctionExpressionAccess().getGroup_1()); }
(rule__CollectionFunctionExpression__Group_1__0)
{ after(grammarAccess.getCollectionFunctionExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalFunctionExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemporalFunctionExpressionAccess().getGroup_0()); }
(rule__TemporalFunctionExpression__Group_0__0)
{ after(grammarAccess.getTemporalFunctionExpressionAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getTemporalFunctionExpressionAccess().getGroup_1()); }
(rule__TemporalFunctionExpression__Group_1__0)
{ after(grammarAccess.getTemporalFunctionExpressionAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getTemporalFunctionExpressionAccess().getGroup_2()); }
(rule__TemporalFunctionExpression__Group_2__0)
{ after(grammarAccess.getTemporalFunctionExpressionAccess().getGroup_2()); }
)

    |(
{ before(grammarAccess.getTemporalFunctionExpressionAccess().getGroup_3()); }
(rule__TemporalFunctionExpression__Group_3__0)
{ after(grammarAccess.getTemporalFunctionExpressionAccess().getGroup_3()); }
)

    |(
{ before(grammarAccess.getTemporalFunctionExpressionAccess().getGroup_4()); }
(rule__TemporalFunctionExpression__Group_4__0)
{ after(grammarAccess.getTemporalFunctionExpressionAccess().getGroup_4()); }
)

    |(
{ before(grammarAccess.getTemporalFunctionExpressionAccess().getGroup_5()); }
(rule__TemporalFunctionExpression__Group_5__0)
{ after(grammarAccess.getTemporalFunctionExpressionAccess().getGroup_5()); }
)

    |(
{ before(grammarAccess.getTemporalFunctionExpressionAccess().getGroup_6()); }
(rule__TemporalFunctionExpression__Group_6__0)
{ after(grammarAccess.getTemporalFunctionExpressionAccess().getGroup_6()); }
)

    |(
{ before(grammarAccess.getTemporalFunctionExpressionAccess().getGroup_7()); }
(rule__TemporalFunctionExpression__Group_7__0)
{ after(grammarAccess.getTemporalFunctionExpressionAccess().getGroup_7()); }
)

    |(
{ before(grammarAccess.getTemporalFunctionExpressionAccess().getGroup_8()); }
(rule__TemporalFunctionExpression__Group_8__0)
{ after(grammarAccess.getTemporalFunctionExpressionAccess().getGroup_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getIntegerLiteralParserRuleCall_0()); }
	ruleIntegerLiteral
{ after(grammarAccess.getLiteralAccess().getIntegerLiteralParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getFloatLiteralParserRuleCall_1()); }
	ruleFloatLiteral
{ after(grammarAccess.getLiteralAccess().getFloatLiteralParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_2()); }
	ruleStringLiteral
{ after(grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getNullLiteralParserRuleCall_3()); }
	ruleNullLiteral
{ after(grammarAccess.getLiteralAccess().getNullLiteralParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getBooleanLiteralParserRuleCall_4()); }
	ruleBooleanLiteral
{ after(grammarAccess.getLiteralAccess().getBooleanLiteralParserRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanLiteral__ValueAlternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanLiteralAccess().getValueTRUEKeyword_0_0()); }

	KEYWORD_49 

{ after(grammarAccess.getBooleanLiteralAccess().getValueTRUEKeyword_0_0()); }
)

    |(
{ before(grammarAccess.getBooleanLiteralAccess().getValueFALSEKeyword_0_1()); }

	KEYWORD_53 

{ after(grammarAccess.getBooleanLiteralAccess().getValueFALSEKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByDirection__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderByDirectionAccess().getAscEnumLiteralDeclaration_0()); }
(	KEYWORD_27
)
{ after(grammarAccess.getOrderByDirectionAccess().getAscEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getOrderByDirectionAccess().getDescEnumLiteralDeclaration_1()); }
(	KEYWORD_38
)
{ after(grammarAccess.getOrderByDirectionAccess().getDescEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TrimSpec__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTrimSpecAccess().getLeadingEnumLiteralDeclaration_0()); }
(	KEYWORD_76
)
{ after(grammarAccess.getTrimSpecAccess().getLeadingEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getTrimSpecAccess().getTrailingEnumLiteralDeclaration_1()); }
(	KEYWORD_78
)
{ after(grammarAccess.getTrimSpecAccess().getTrailingEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getTrimSpecAccess().getBothEnumLiteralDeclaration_2()); }
(	KEYWORD_37
)
{ after(grammarAccess.getTrimSpecAccess().getBothEnumLiteralDeclaration_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperatorAccess().getPositiveEnumLiteralDeclaration_0()); }
(	KEYWORD_4
)
{ after(grammarAccess.getUnaryOperatorAccess().getPositiveEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getUnaryOperatorAccess().getNegativeEnumLiteralDeclaration_1()); }
(	KEYWORD_6
)
{ after(grammarAccess.getUnaryOperatorAccess().getNegativeEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getUnaryOperatorAccess().getLogicalNotEnumLiteralDeclaration_2()); }
(	KEYWORD_34
)
{ after(grammarAccess.getUnaryOperatorAccess().getLogicalNotEnumLiteralDeclaration_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionOperatorAccess().getAddEnumLiteralDeclaration_0()); }
(	KEYWORD_4
)
{ after(grammarAccess.getAdditionOperatorAccess().getAddEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getAdditionOperatorAccess().getSubtractEnumLiteralDeclaration_1()); }
(	KEYWORD_6
)
{ after(grammarAccess.getAdditionOperatorAccess().getSubtractEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationOperatorAccess().getMultiplyEnumLiteralDeclaration_0()); }
(	KEYWORD_3
)
{ after(grammarAccess.getMultiplicationOperatorAccess().getMultiplyEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getMultiplicationOperatorAccess().getDivideEnumLiteralDeclaration_1()); }
(	KEYWORD_8
)
{ after(grammarAccess.getMultiplicationOperatorAccess().getDivideEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonOperatorAccess().getLessThenEnumLiteralDeclaration_0()); }
(	KEYWORD_10
)
{ after(grammarAccess.getComparisonOperatorAccess().getLessThenEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getComparisonOperatorAccess().getGreaterThenEnumLiteralDeclaration_1()); }
(	KEYWORD_12
)
{ after(grammarAccess.getComparisonOperatorAccess().getGreaterThenEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getComparisonOperatorAccess().getLessEqualEnumLiteralDeclaration_2()); }
(	KEYWORD_14
)
{ after(grammarAccess.getComparisonOperatorAccess().getLessEqualEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getComparisonOperatorAccess().getGreaterEqualEnumLiteralDeclaration_3()); }
(	KEYWORD_16
)
{ after(grammarAccess.getComparisonOperatorAccess().getGreaterEqualEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getComparisonOperatorAccess().getEqualEnumLiteralDeclaration_4()); }
(	KEYWORD_11
)
{ after(grammarAccess.getComparisonOperatorAccess().getEqualEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getComparisonOperatorAccess().getNotEqualEnumLiteralDeclaration_5()); }
(	KEYWORD_15
)
{ after(grammarAccess.getComparisonOperatorAccess().getNotEqualEnumLiteralDeclaration_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__SelectStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectStatement__Group__0__Impl
	rule__SelectStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectStatementAccess().getSelectClauseAssignment_0()); }
(rule__SelectStatement__SelectClauseAssignment_0)?
{ after(grammarAccess.getSelectStatementAccess().getSelectClauseAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectStatement__Group__1__Impl
	rule__SelectStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectStatementAccess().getFromClauseAssignment_1()); }
(rule__SelectStatement__FromClauseAssignment_1)
{ after(grammarAccess.getSelectStatementAccess().getFromClauseAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectStatement__Group__2__Impl
	rule__SelectStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectStatementAccess().getWhereClauseAssignment_2()); }
(rule__SelectStatement__WhereClauseAssignment_2)?
{ after(grammarAccess.getSelectStatementAccess().getWhereClauseAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectStatement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectStatement__Group__3__Impl
	rule__SelectStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectStatement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectStatementAccess().getGroupByClauseAssignment_3()); }
(rule__SelectStatement__GroupByClauseAssignment_3)?
{ after(grammarAccess.getSelectStatementAccess().getGroupByClauseAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectStatement__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectStatement__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectStatement__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectStatementAccess().getOrderByClauseAssignment_4()); }
(rule__SelectStatement__OrderByClauseAssignment_4)?
{ after(grammarAccess.getSelectStatementAccess().getOrderByClauseAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__GroupByClause__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroupByClause__Group__0__Impl
	rule__GroupByClause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupByClause__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupByClauseAccess().getGROUPKeyword_0()); }

	KEYWORD_55 

{ after(grammarAccess.getGroupByClauseAccess().getGROUPKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GroupByClause__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroupByClause__Group__1__Impl
	rule__GroupByClause__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupByClause__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupByClauseAccess().getBYKeyword_1()); }

	KEYWORD_18 

{ after(grammarAccess.getGroupByClauseAccess().getBYKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GroupByClause__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroupByClause__Group__2__Impl
	rule__GroupByClause__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupByClause__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupByClauseAccess().getGroupingAssignment_2()); }
(rule__GroupByClause__GroupingAssignment_2)
{ after(grammarAccess.getGroupByClauseAccess().getGroupingAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GroupByClause__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroupByClause__Group__3__Impl
	rule__GroupByClause__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupByClause__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupByClauseAccess().getGroup_3()); }
(rule__GroupByClause__Group_3__0)*
{ after(grammarAccess.getGroupByClauseAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GroupByClause__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroupByClause__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupByClause__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupByClauseAccess().getHavingClauseAssignment_4()); }
(rule__GroupByClause__HavingClauseAssignment_4)?
{ after(grammarAccess.getGroupByClauseAccess().getHavingClauseAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__GroupByClause__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroupByClause__Group_3__0__Impl
	rule__GroupByClause__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupByClause__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupByClauseAccess().getCommaKeyword_3_0()); }

	KEYWORD_5 

{ after(grammarAccess.getGroupByClauseAccess().getCommaKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GroupByClause__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroupByClause__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupByClause__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupByClauseAccess().getGroupingAssignment_3_1()); }
(rule__GroupByClause__GroupingAssignment_3_1)
{ after(grammarAccess.getGroupByClauseAccess().getGroupingAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__HavingClause__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HavingClause__Group__0__Impl
	rule__HavingClause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__HavingClause__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHavingClauseAccess().getHAVINGKeyword_0()); }

	KEYWORD_67 

{ after(grammarAccess.getHavingClauseAccess().getHAVINGKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__HavingClause__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HavingClause__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__HavingClause__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHavingClauseAccess().getHavingAssignment_1()); }
(rule__HavingClause__HavingAssignment_1)
{ after(grammarAccess.getHavingClauseAccess().getHavingAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OrderByClause__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrderByClause__Group__0__Impl
	rule__OrderByClause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByClause__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderByClauseAccess().getORDERKeyword_0()); }

	KEYWORD_60 

{ after(grammarAccess.getOrderByClauseAccess().getORDERKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrderByClause__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrderByClause__Group__1__Impl
	rule__OrderByClause__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByClause__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderByClauseAccess().getBYKeyword_1()); }

	KEYWORD_18 

{ after(grammarAccess.getOrderByClauseAccess().getBYKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrderByClause__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrderByClause__Group__2__Impl
	rule__OrderByClause__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByClause__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderByClauseAccess().getOrderingAssignment_2()); }
(rule__OrderByClause__OrderingAssignment_2)
{ after(grammarAccess.getOrderByClauseAccess().getOrderingAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrderByClause__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrderByClause__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByClause__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderByClauseAccess().getGroup_3()); }
(rule__OrderByClause__Group_3__0)*
{ after(grammarAccess.getOrderByClauseAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__OrderByClause__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrderByClause__Group_3__0__Impl
	rule__OrderByClause__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByClause__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderByClauseAccess().getCommaKeyword_3_0()); }

	KEYWORD_5 

{ after(grammarAccess.getOrderByClauseAccess().getCommaKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrderByClause__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrderByClause__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByClause__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderByClauseAccess().getOrderingAssignment_3_1()); }
(rule__OrderByClause__OrderingAssignment_3_1)
{ after(grammarAccess.getOrderByClauseAccess().getOrderingAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OrderBySpec__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrderBySpec__Group__0__Impl
	rule__OrderBySpec__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderBySpec__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderBySpecAccess().getAliasAttributeExpressionParserRuleCall_0()); }
	ruleAliasAttributeExpression
{ after(grammarAccess.getOrderBySpecAccess().getAliasAttributeExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrderBySpec__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrderBySpec__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderBySpec__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderBySpecAccess().getDirectionAssignment_1()); }
(rule__OrderBySpec__DirectionAssignment_1)
{ after(grammarAccess.getOrderBySpecAccess().getDirectionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UpdateStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UpdateStatement__Group__0__Impl
	rule__UpdateStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUpdateStatementAccess().getUpdateClauseAssignment_0()); }
(rule__UpdateStatement__UpdateClauseAssignment_0)
{ after(grammarAccess.getUpdateStatementAccess().getUpdateClauseAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UpdateStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UpdateStatement__Group__1__Impl
	rule__UpdateStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUpdateStatementAccess().getSetClauseAssignment_1()); }
(rule__UpdateStatement__SetClauseAssignment_1)
{ after(grammarAccess.getUpdateStatementAccess().getSetClauseAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UpdateStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UpdateStatement__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUpdateStatementAccess().getWhereClauseAssignment_2()); }
(rule__UpdateStatement__WhereClauseAssignment_2)?
{ after(grammarAccess.getUpdateStatementAccess().getWhereClauseAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__UpdateClause__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UpdateClause__Group__0__Impl
	rule__UpdateClause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateClause__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUpdateClauseAccess().getUPDATEKeyword_0()); }

	KEYWORD_74 

{ after(grammarAccess.getUpdateClauseAccess().getUPDATEKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UpdateClause__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UpdateClause__Group__1__Impl
	rule__UpdateClause__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateClause__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUpdateClauseAccess().getFromEntriesAssignment_1()); }
(rule__UpdateClause__FromEntriesAssignment_1)
{ after(grammarAccess.getUpdateClauseAccess().getFromEntriesAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UpdateClause__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UpdateClause__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateClause__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUpdateClauseAccess().getGroup_2()); }
(rule__UpdateClause__Group_2__0)*
{ after(grammarAccess.getUpdateClauseAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__UpdateClause__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UpdateClause__Group_2__0__Impl
	rule__UpdateClause__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateClause__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUpdateClauseAccess().getCommaKeyword_2_0()); }

	KEYWORD_5 

{ after(grammarAccess.getUpdateClauseAccess().getCommaKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UpdateClause__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UpdateClause__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateClause__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUpdateClauseAccess().getFromEntriesAssignment_2_1()); }
(rule__UpdateClause__FromEntriesAssignment_2_1)
{ after(grammarAccess.getUpdateClauseAccess().getFromEntriesAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SetClause__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetClause__Group__0__Impl
	rule__SetClause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SetClause__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetClauseAccess().getSETKeyword_0()); }

	KEYWORD_35 

{ after(grammarAccess.getSetClauseAccess().getSETKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SetClause__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetClause__Group__1__Impl
	rule__SetClause__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SetClause__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetClauseAccess().getItemsAssignment_1()); }
(rule__SetClause__ItemsAssignment_1)
{ after(grammarAccess.getSetClauseAccess().getItemsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SetClause__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetClause__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SetClause__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetClauseAccess().getGroup_2()); }
(rule__SetClause__Group_2__0)*
{ after(grammarAccess.getSetClauseAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SetClause__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetClause__Group_2__0__Impl
	rule__SetClause__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SetClause__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetClauseAccess().getCommaKeyword_2_0()); }

	KEYWORD_5 

{ after(grammarAccess.getSetClauseAccess().getCommaKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SetClause__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetClause__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SetClause__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetClauseAccess().getItemsAssignment_2_1()); }
(rule__SetClause__ItemsAssignment_2_1)
{ after(grammarAccess.getSetClauseAccess().getItemsAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UpdateItem__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UpdateItem__Group__0__Impl
	rule__UpdateItem__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateItem__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUpdateItemAccess().getAliasAssignment_0()); }
(rule__UpdateItem__AliasAssignment_0)
{ after(grammarAccess.getUpdateItemAccess().getAliasAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UpdateItem__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UpdateItem__Group__1__Impl
	rule__UpdateItem__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateItem__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUpdateItemAccess().getEqualsSignKeyword_1()); }

	KEYWORD_11 

{ after(grammarAccess.getUpdateItemAccess().getEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UpdateItem__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UpdateItem__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateItem__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUpdateItemAccess().getValueAssignment_2()); }
(rule__UpdateItem__ValueAssignment_2)
{ after(grammarAccess.getUpdateItemAccess().getValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__DeleteStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DeleteStatement__Group__0__Impl
	rule__DeleteStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DeleteStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeleteStatementAccess().getDeleteClauseAssignment_0()); }
(rule__DeleteStatement__DeleteClauseAssignment_0)
{ after(grammarAccess.getDeleteStatementAccess().getDeleteClauseAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DeleteStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DeleteStatement__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DeleteStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeleteStatementAccess().getWhereClauseAssignment_1()); }
(rule__DeleteStatement__WhereClauseAssignment_1)?
{ after(grammarAccess.getDeleteStatementAccess().getWhereClauseAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DeleteClause__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DeleteClause__Group__0__Impl
	rule__DeleteClause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DeleteClause__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeleteClauseAccess().getDELETEKeyword_0()); }

	KEYWORD_65 

{ after(grammarAccess.getDeleteClauseAccess().getDELETEKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DeleteClause__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DeleteClause__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DeleteClause__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeleteClauseAccess().getFromClauseAssignment_1()); }
(rule__DeleteClause__FromClauseAssignment_1)
{ after(grammarAccess.getDeleteClauseAccess().getFromClauseAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SelectClause__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectClause__Group__0__Impl
	rule__SelectClause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectClause__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectClauseAccess().getSELECTKeyword_0()); }

	KEYWORD_73 

{ after(grammarAccess.getSelectClauseAccess().getSELECTKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectClause__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectClause__Group__1__Impl
	rule__SelectClause__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectClause__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectClauseAccess().getIsDistinctAssignment_1()); }
(rule__SelectClause__IsDistinctAssignment_1)?
{ after(grammarAccess.getSelectClauseAccess().getIsDistinctAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectClause__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectClause__Group__2__Impl
	rule__SelectClause__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectClause__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectClauseAccess().getExpressionsAssignment_2()); }
(rule__SelectClause__ExpressionsAssignment_2)
{ after(grammarAccess.getSelectClauseAccess().getExpressionsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectClause__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectClause__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectClause__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectClauseAccess().getGroup_3()); }
(rule__SelectClause__Group_3__0)*
{ after(grammarAccess.getSelectClauseAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__SelectClause__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectClause__Group_3__0__Impl
	rule__SelectClause__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectClause__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectClauseAccess().getCommaKeyword_3_0()); }

	KEYWORD_5 

{ after(grammarAccess.getSelectClauseAccess().getCommaKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectClause__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectClause__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectClause__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectClauseAccess().getExpressionsAssignment_3_1()); }
(rule__SelectClause__ExpressionsAssignment_3_1)
{ after(grammarAccess.getSelectClauseAccess().getExpressionsAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AvgAggregate__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AvgAggregate__Group__0__Impl
	rule__AvgAggregate__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AvgAggregate__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAvgAggregateAccess().getAVGKeyword_0()); }

	KEYWORD_28 

{ after(grammarAccess.getAvgAggregateAccess().getAVGKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AvgAggregate__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AvgAggregate__Group__1__Impl
	rule__AvgAggregate__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AvgAggregate__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAvgAggregateAccess().getLeftParenthesisKeyword_1()); }

	KEYWORD_1 

{ after(grammarAccess.getAvgAggregateAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AvgAggregate__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AvgAggregate__Group__2__Impl
	rule__AvgAggregate__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AvgAggregate__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAvgAggregateAccess().getIsDistinctAssignment_2()); }
(rule__AvgAggregate__IsDistinctAssignment_2)?
{ after(grammarAccess.getAvgAggregateAccess().getIsDistinctAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AvgAggregate__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AvgAggregate__Group__3__Impl
	rule__AvgAggregate__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__AvgAggregate__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAvgAggregateAccess().getItemAssignment_3()); }
(rule__AvgAggregate__ItemAssignment_3)
{ after(grammarAccess.getAvgAggregateAccess().getItemAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AvgAggregate__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AvgAggregate__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AvgAggregate__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAvgAggregateAccess().getRightParenthesisKeyword_4()); }

	KEYWORD_2 

{ after(grammarAccess.getAvgAggregateAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__CountAggregate__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CountAggregate__Group__0__Impl
	rule__CountAggregate__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CountAggregate__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCountAggregateAccess().getCOUNTKeyword_0()); }

	KEYWORD_51 

{ after(grammarAccess.getCountAggregateAccess().getCOUNTKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CountAggregate__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CountAggregate__Group__1__Impl
	rule__CountAggregate__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CountAggregate__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCountAggregateAccess().getLeftParenthesisKeyword_1()); }

	KEYWORD_1 

{ after(grammarAccess.getCountAggregateAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CountAggregate__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CountAggregate__Group__2__Impl
	rule__CountAggregate__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CountAggregate__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCountAggregateAccess().getIsDistinctAssignment_2()); }
(rule__CountAggregate__IsDistinctAssignment_2)?
{ after(grammarAccess.getCountAggregateAccess().getIsDistinctAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CountAggregate__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CountAggregate__Group__3__Impl
	rule__CountAggregate__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__CountAggregate__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCountAggregateAccess().getItemAssignment_3()); }
(rule__CountAggregate__ItemAssignment_3)
{ after(grammarAccess.getCountAggregateAccess().getItemAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CountAggregate__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CountAggregate__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CountAggregate__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCountAggregateAccess().getRightParenthesisKeyword_4()); }

	KEYWORD_2 

{ after(grammarAccess.getCountAggregateAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__MaxAggregate__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MaxAggregate__Group__0__Impl
	rule__MaxAggregate__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MaxAggregate__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMaxAggregateAccess().getMAXKeyword_0()); }

	KEYWORD_30 

{ after(grammarAccess.getMaxAggregateAccess().getMAXKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MaxAggregate__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MaxAggregate__Group__1__Impl
	rule__MaxAggregate__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MaxAggregate__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMaxAggregateAccess().getLeftParenthesisKeyword_1()); }

	KEYWORD_1 

{ after(grammarAccess.getMaxAggregateAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MaxAggregate__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MaxAggregate__Group__2__Impl
	rule__MaxAggregate__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MaxAggregate__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMaxAggregateAccess().getIsDistinctAssignment_2()); }
(rule__MaxAggregate__IsDistinctAssignment_2)?
{ after(grammarAccess.getMaxAggregateAccess().getIsDistinctAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MaxAggregate__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MaxAggregate__Group__3__Impl
	rule__MaxAggregate__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__MaxAggregate__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMaxAggregateAccess().getItemAssignment_3()); }
(rule__MaxAggregate__ItemAssignment_3)
{ after(grammarAccess.getMaxAggregateAccess().getItemAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MaxAggregate__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MaxAggregate__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MaxAggregate__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMaxAggregateAccess().getRightParenthesisKeyword_4()); }

	KEYWORD_2 

{ after(grammarAccess.getMaxAggregateAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__MinAggregate__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MinAggregate__Group__0__Impl
	rule__MinAggregate__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MinAggregate__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMinAggregateAccess().getMINKeyword_0()); }

	KEYWORD_31 

{ after(grammarAccess.getMinAggregateAccess().getMINKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MinAggregate__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MinAggregate__Group__1__Impl
	rule__MinAggregate__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MinAggregate__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMinAggregateAccess().getLeftParenthesisKeyword_1()); }

	KEYWORD_1 

{ after(grammarAccess.getMinAggregateAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MinAggregate__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MinAggregate__Group__2__Impl
	rule__MinAggregate__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MinAggregate__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMinAggregateAccess().getIsDistinctAssignment_2()); }
(rule__MinAggregate__IsDistinctAssignment_2)?
{ after(grammarAccess.getMinAggregateAccess().getIsDistinctAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MinAggregate__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MinAggregate__Group__3__Impl
	rule__MinAggregate__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__MinAggregate__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMinAggregateAccess().getItemAssignment_3()); }
(rule__MinAggregate__ItemAssignment_3)
{ after(grammarAccess.getMinAggregateAccess().getItemAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MinAggregate__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MinAggregate__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MinAggregate__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMinAggregateAccess().getRightParenthesisKeyword_4()); }

	KEYWORD_2 

{ after(grammarAccess.getMinAggregateAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__SumAggregate__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SumAggregate__Group__0__Impl
	rule__SumAggregate__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SumAggregate__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSumAggregateAccess().getSUMKeyword_0()); }

	KEYWORD_36 

{ after(grammarAccess.getSumAggregateAccess().getSUMKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SumAggregate__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SumAggregate__Group__1__Impl
	rule__SumAggregate__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SumAggregate__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSumAggregateAccess().getLeftParenthesisKeyword_1()); }

	KEYWORD_1 

{ after(grammarAccess.getSumAggregateAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SumAggregate__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SumAggregate__Group__2__Impl
	rule__SumAggregate__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SumAggregate__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSumAggregateAccess().getIsDistinctAssignment_2()); }
(rule__SumAggregate__IsDistinctAssignment_2)?
{ after(grammarAccess.getSumAggregateAccess().getIsDistinctAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SumAggregate__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SumAggregate__Group__3__Impl
	rule__SumAggregate__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SumAggregate__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSumAggregateAccess().getItemAssignment_3()); }
(rule__SumAggregate__ItemAssignment_3)
{ after(grammarAccess.getSumAggregateAccess().getItemAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SumAggregate__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SumAggregate__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SumAggregate__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSumAggregateAccess().getRightParenthesisKeyword_4()); }

	KEYWORD_2 

{ after(grammarAccess.getSumAggregateAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__SelectConstructorExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectConstructorExpression__Group__0__Impl
	rule__SelectConstructorExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectConstructorExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectConstructorExpressionAccess().getNEWKeyword_0()); }

	KEYWORD_33 

{ after(grammarAccess.getSelectConstructorExpressionAccess().getNEWKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectConstructorExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectConstructorExpression__Group__1__Impl
	rule__SelectConstructorExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectConstructorExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectConstructorExpressionAccess().getNameAssignment_1()); }
(rule__SelectConstructorExpression__NameAssignment_1)
{ after(grammarAccess.getSelectConstructorExpressionAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectConstructorExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectConstructorExpression__Group__2__Impl
	rule__SelectConstructorExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectConstructorExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectConstructorExpressionAccess().getLeftParenthesisKeyword_2()); }

	KEYWORD_1 

{ after(grammarAccess.getSelectConstructorExpressionAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectConstructorExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectConstructorExpression__Group__3__Impl
	rule__SelectConstructorExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectConstructorExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectConstructorExpressionAccess().getItemsAssignment_3()); }
(rule__SelectConstructorExpression__ItemsAssignment_3)
{ after(grammarAccess.getSelectConstructorExpressionAccess().getItemsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectConstructorExpression__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectConstructorExpression__Group__4__Impl
	rule__SelectConstructorExpression__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectConstructorExpression__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectConstructorExpressionAccess().getGroup_4()); }
(rule__SelectConstructorExpression__Group_4__0)*
{ after(grammarAccess.getSelectConstructorExpressionAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectConstructorExpression__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectConstructorExpression__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectConstructorExpression__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectConstructorExpressionAccess().getRightParenthesisKeyword_5()); }

	KEYWORD_2 

{ after(grammarAccess.getSelectConstructorExpressionAccess().getRightParenthesisKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__SelectConstructorExpression__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectConstructorExpression__Group_4__0__Impl
	rule__SelectConstructorExpression__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectConstructorExpression__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectConstructorExpressionAccess().getCommaKeyword_4_0()); }

	KEYWORD_5 

{ after(grammarAccess.getSelectConstructorExpressionAccess().getCommaKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectConstructorExpression__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectConstructorExpression__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectConstructorExpression__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectConstructorExpressionAccess().getItemsAssignment_4_1()); }
(rule__SelectConstructorExpression__ItemsAssignment_4_1)
{ after(grammarAccess.getSelectConstructorExpressionAccess().getItemsAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FromClause__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FromClause__Group__0__Impl
	rule__FromClause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FromClause__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromClauseAccess().getFROMKeyword_0()); }

	KEYWORD_39 

{ after(grammarAccess.getFromClauseAccess().getFROMKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FromClause__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FromClause__Group__1__Impl
	rule__FromClause__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FromClause__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromClauseAccess().getFromEntriesAssignment_1()); }
(rule__FromClause__FromEntriesAssignment_1)
{ after(grammarAccess.getFromClauseAccess().getFromEntriesAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FromClause__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FromClause__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FromClause__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromClauseAccess().getGroup_2()); }
(rule__FromClause__Group_2__0)*
{ after(grammarAccess.getFromClauseAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__FromClause__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FromClause__Group_2__0__Impl
	rule__FromClause__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FromClause__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromClauseAccess().getCommaKeyword_2_0()); }

	KEYWORD_5 

{ after(grammarAccess.getFromClauseAccess().getCommaKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FromClause__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FromClause__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FromClause__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromClauseAccess().getFromEntriesAssignment_2_1()); }
(rule__FromClause__FromEntriesAssignment_2_1)
{ after(grammarAccess.getFromClauseAccess().getFromEntriesAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__VariableDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group__0__Impl
	rule__VariableDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getASKeyword_0()); }
(
	KEYWORD_17 
)?
{ after(grammarAccess.getVariableDeclarationAccess().getASKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getNameAssignment_1()); }
(rule__VariableDeclaration__NameAssignment_1)
{ after(grammarAccess.getVariableDeclarationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedIdentifier__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedIdentifier__Group__0__Impl
	rule__QualifiedIdentifier__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedIdentifier__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedIdentifierAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getQualifiedIdentifierAccess().getIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedIdentifier__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedIdentifier__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedIdentifier__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedIdentifierAccess().getGroup_1()); }
(rule__QualifiedIdentifier__Group_1__0)*
{ after(grammarAccess.getQualifiedIdentifierAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedIdentifier__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedIdentifier__Group_1__0__Impl
	rule__QualifiedIdentifier__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedIdentifier__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedIdentifierAccess().getFullStopKeyword_1_0()); }

	KEYWORD_7 

{ after(grammarAccess.getQualifiedIdentifierAccess().getFullStopKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedIdentifier__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedIdentifier__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedIdentifier__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedIdentifierAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
{ after(grammarAccess.getQualifiedIdentifierAccess().getIDTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FromClassVar__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FromClassVar__Group__0__Impl
	rule__FromClassVar__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FromClassVar__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromClassVarAccess().getTypeAssignment_0()); }
(rule__FromClassVar__TypeAssignment_0)
{ after(grammarAccess.getFromClassVarAccess().getTypeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FromClassVar__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FromClassVar__Group__1__Impl
	rule__FromClassVar__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FromClassVar__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromClassVarAccess().getVariableAssignment_1()); }
(rule__FromClassVar__VariableAssignment_1)
{ after(grammarAccess.getFromClassVarAccess().getVariableAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FromClassVar__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FromClassVar__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FromClassVar__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromClassVarAccess().getJoinsAssignment_2()); }
(rule__FromClassVar__JoinsAssignment_2)*
{ after(grammarAccess.getFromClassVarAccess().getJoinsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__FromCollection__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FromCollection__Group__0__Impl
	rule__FromCollection__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FromCollection__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromCollectionAccess().getINKeyword_0()); }

	KEYWORD_19 

{ after(grammarAccess.getFromCollectionAccess().getINKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FromCollection__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FromCollection__Group__1__Impl
	rule__FromCollection__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FromCollection__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromCollectionAccess().getLeftParenthesisKeyword_1()); }

	KEYWORD_1 

{ after(grammarAccess.getFromCollectionAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FromCollection__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FromCollection__Group__2__Impl
	rule__FromCollection__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FromCollection__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromCollectionAccess().getPathAssignment_2()); }
(rule__FromCollection__PathAssignment_2)
{ after(grammarAccess.getFromCollectionAccess().getPathAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FromCollection__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FromCollection__Group__3__Impl
	rule__FromCollection__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FromCollection__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromCollectionAccess().getRightParenthesisKeyword_3()); }

	KEYWORD_2 

{ after(grammarAccess.getFromCollectionAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FromCollection__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FromCollection__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FromCollection__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromCollectionAccess().getVariableAssignment_4()); }
(rule__FromCollection__VariableAssignment_4)
{ after(grammarAccess.getFromCollectionAccess().getVariableAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Join__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Join__Group__0__Impl
	rule__Join__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Join__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJoinAccess().getJOINKeyword_0()); }

	KEYWORD_41 

{ after(grammarAccess.getJoinAccess().getJOINKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Join__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Join__Group__1__Impl
	rule__Join__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Join__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJoinAccess().getIsFetchAssignment_1()); }
(rule__Join__IsFetchAssignment_1)?
{ after(grammarAccess.getJoinAccess().getIsFetchAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Join__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Join__Group__2__Impl
	rule__Join__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Join__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJoinAccess().getPathAssignment_2()); }
(rule__Join__PathAssignment_2)
{ after(grammarAccess.getJoinAccess().getPathAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Join__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Join__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Join__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJoinAccess().getVariableAssignment_3()); }
(rule__Join__VariableAssignment_3)
{ after(grammarAccess.getJoinAccess().getVariableAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__LeftJoin__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LeftJoin__Group__0__Impl
	rule__LeftJoin__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LeftJoin__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLeftJoinAccess().getLEFTKeyword_0()); }

	KEYWORD_42 

{ after(grammarAccess.getLeftJoinAccess().getLEFTKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LeftJoin__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LeftJoin__Group__1__Impl
	rule__LeftJoin__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LeftJoin__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLeftJoinAccess().getIsOuterAssignment_1()); }
(rule__LeftJoin__IsOuterAssignment_1)?
{ after(grammarAccess.getLeftJoinAccess().getIsOuterAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LeftJoin__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LeftJoin__Group__2__Impl
	rule__LeftJoin__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LeftJoin__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLeftJoinAccess().getJOINKeyword_2()); }

	KEYWORD_41 

{ after(grammarAccess.getLeftJoinAccess().getJOINKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LeftJoin__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LeftJoin__Group__3__Impl
	rule__LeftJoin__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__LeftJoin__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLeftJoinAccess().getIsFetchAssignment_3()); }
(rule__LeftJoin__IsFetchAssignment_3)?
{ after(grammarAccess.getLeftJoinAccess().getIsFetchAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LeftJoin__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LeftJoin__Group__4__Impl
	rule__LeftJoin__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__LeftJoin__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLeftJoinAccess().getPathAssignment_4()); }
(rule__LeftJoin__PathAssignment_4)
{ after(grammarAccess.getLeftJoinAccess().getPathAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LeftJoin__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LeftJoin__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LeftJoin__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLeftJoinAccess().getVariableAssignment_5()); }
(rule__LeftJoin__VariableAssignment_5)
{ after(grammarAccess.getLeftJoinAccess().getVariableAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__InnerJoin__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InnerJoin__Group__0__Impl
	rule__InnerJoin__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InnerJoin__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInnerJoinAccess().getINNERKeyword_0()); }

	KEYWORD_57 

{ after(grammarAccess.getInnerJoinAccess().getINNERKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InnerJoin__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InnerJoin__Group__1__Impl
	rule__InnerJoin__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__InnerJoin__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInnerJoinAccess().getJOINKeyword_1()); }

	KEYWORD_41 

{ after(grammarAccess.getInnerJoinAccess().getJOINKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InnerJoin__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InnerJoin__Group__2__Impl
	rule__InnerJoin__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__InnerJoin__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInnerJoinAccess().getIsFetchAssignment_2()); }
(rule__InnerJoin__IsFetchAssignment_2)?
{ after(grammarAccess.getInnerJoinAccess().getIsFetchAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InnerJoin__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InnerJoin__Group__3__Impl
	rule__InnerJoin__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__InnerJoin__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInnerJoinAccess().getPathAssignment_3()); }
(rule__InnerJoin__PathAssignment_3)
{ after(grammarAccess.getInnerJoinAccess().getPathAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InnerJoin__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InnerJoin__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InnerJoin__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInnerJoinAccess().getVariableAssignment_4()); }
(rule__InnerJoin__VariableAssignment_4)
{ after(grammarAccess.getInnerJoinAccess().getVariableAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__WhereClause__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhereClause__Group__0__Impl
	rule__WhereClause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WhereClause__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhereClauseAccess().getWHEREKeyword_0()); }

	KEYWORD_63 

{ after(grammarAccess.getWhereClauseAccess().getWHEREKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WhereClause__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhereClause__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WhereClause__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhereClauseAccess().getWhereEntryAssignment_1()); }
(rule__WhereClause__WhereEntryAssignment_1)
{ after(grammarAccess.getWhereClauseAccess().getWhereEntryAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OrExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group__0__Impl
	rule__OrExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0()); }
	ruleAndExpression
{ after(grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getGroup_1()); }
(rule__OrExpression__Group_1__0)*
{ after(grammarAccess.getOrExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OrExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group_1__0__Impl
	rule__OrExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getOrExpressionEntriesAction_1_0()); }
(

)
{ after(grammarAccess.getOrExpressionAccess().getOrExpressionEntriesAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group_1__1__Impl
	rule__OrExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getORKeyword_1_1()); }

	KEYWORD_22 

{ after(grammarAccess.getOrExpressionAccess().getORKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getEntriesAssignment_1_2()); }
(rule__OrExpression__EntriesAssignment_1_2)
{ after(grammarAccess.getOrExpressionAccess().getEntriesAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AndExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group__0__Impl
	rule__AndExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getComparisonOperatorExpressionParserRuleCall_0()); }
	ruleComparisonOperatorExpression
{ after(grammarAccess.getAndExpressionAccess().getComparisonOperatorExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getGroup_1()); }
(rule__AndExpression__Group_1__0)*
{ after(grammarAccess.getAndExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AndExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group_1__0__Impl
	rule__AndExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getAndExpressionEntriesAction_1_0()); }
(

)
{ after(grammarAccess.getAndExpressionAccess().getAndExpressionEntriesAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group_1__1__Impl
	rule__AndExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getANDKeyword_1_1()); }

	KEYWORD_25 

{ after(grammarAccess.getAndExpressionAccess().getANDKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getEntriesAssignment_1_2()); }
(rule__AndExpression__EntriesAssignment_1_2)
{ after(grammarAccess.getAndExpressionAccess().getEntriesAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ComparisonOperatorExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComparisonOperatorExpression__Group__0__Impl
	rule__ComparisonOperatorExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonOperatorExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonOperatorExpressionAccess().getAdditionExpressionParserRuleCall_0()); }
	ruleAdditionExpression
{ after(grammarAccess.getComparisonOperatorExpressionAccess().getAdditionExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComparisonOperatorExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComparisonOperatorExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonOperatorExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonOperatorExpressionAccess().getGroup_1()); }
(rule__ComparisonOperatorExpression__Group_1__0)*
{ after(grammarAccess.getComparisonOperatorExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ComparisonOperatorExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComparisonOperatorExpression__Group_1__0__Impl
	rule__ComparisonOperatorExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonOperatorExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonOperatorExpressionAccess().getComparisonOperatorExpressionLeftAction_1_0()); }
(

)
{ after(grammarAccess.getComparisonOperatorExpressionAccess().getComparisonOperatorExpressionLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComparisonOperatorExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComparisonOperatorExpression__Group_1__1__Impl
	rule__ComparisonOperatorExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonOperatorExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonOperatorExpressionAccess().getOperatorAssignment_1_1()); }
(rule__ComparisonOperatorExpression__OperatorAssignment_1_1)
{ after(grammarAccess.getComparisonOperatorExpressionAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComparisonOperatorExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComparisonOperatorExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonOperatorExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonOperatorExpressionAccess().getRightAssignment_1_2()); }
(rule__ComparisonOperatorExpression__RightAssignment_1_2)
{ after(grammarAccess.getComparisonOperatorExpressionAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AdditionExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditionExpression__Group__0__Impl
	rule__AdditionExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionExpressionAccess().getMultiplicationExpressionParserRuleCall_0()); }
	ruleMultiplicationExpression
{ after(grammarAccess.getAdditionExpressionAccess().getMultiplicationExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AdditionExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditionExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionExpressionAccess().getGroup_1()); }
(rule__AdditionExpression__Group_1__0)*
{ after(grammarAccess.getAdditionExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AdditionExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditionExpression__Group_1__0__Impl
	rule__AdditionExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionExpressionAccess().getAdditionExpressionLeftAction_1_0()); }
(

)
{ after(grammarAccess.getAdditionExpressionAccess().getAdditionExpressionLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AdditionExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditionExpression__Group_1__1__Impl
	rule__AdditionExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionExpressionAccess().getOperatorAssignment_1_1()); }
(rule__AdditionExpression__OperatorAssignment_1_1)
{ after(grammarAccess.getAdditionExpressionAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AdditionExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditionExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionExpressionAccess().getRightAssignment_1_2()); }
(rule__AdditionExpression__RightAssignment_1_2)
{ after(grammarAccess.getAdditionExpressionAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__MultiplicationExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicationExpression__Group__0__Impl
	rule__MultiplicationExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationExpressionAccess().getUnaryExpressionParserRuleCall_0()); }
	ruleUnaryExpression
{ after(grammarAccess.getMultiplicationExpressionAccess().getUnaryExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicationExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicationExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationExpressionAccess().getGroup_1()); }
(rule__MultiplicationExpression__Group_1__0)*
{ after(grammarAccess.getMultiplicationExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MultiplicationExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicationExpression__Group_1__0__Impl
	rule__MultiplicationExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationExpressionAccess().getMultiplicationExpressionLeftAction_1_0()); }
(

)
{ after(grammarAccess.getMultiplicationExpressionAccess().getMultiplicationExpressionLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicationExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicationExpression__Group_1__1__Impl
	rule__MultiplicationExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationExpressionAccess().getOperatorAssignment_1_1()); }
(rule__MultiplicationExpression__OperatorAssignment_1_1)
{ after(grammarAccess.getMultiplicationExpressionAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicationExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicationExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationExpressionAccess().getRightAssignment_1_2()); }
(rule__MultiplicationExpression__RightAssignment_1_2)
{ after(grammarAccess.getMultiplicationExpressionAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__UnaryExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryExpression__Group__0__Impl
	rule__UnaryExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getUnaryOperatorAssignment_0()); }
(rule__UnaryExpression__UnaryOperatorAssignment_0)?
{ after(grammarAccess.getUnaryExpressionAccess().getUnaryOperatorAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getRightAssignment_1()); }
(rule__UnaryExpression__RightAssignment_1)
{ after(grammarAccess.getUnaryExpressionAccess().getRightAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ParenthesesExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParenthesesExpression__Group__0__Impl
	rule__ParenthesesExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesesExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenthesesExpressionAccess().getLeftParenthesisKeyword_0()); }

	KEYWORD_1 

{ after(grammarAccess.getParenthesesExpressionAccess().getLeftParenthesisKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParenthesesExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParenthesesExpression__Group__1__Impl
	rule__ParenthesesExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesesExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenthesesExpressionAccess().getExpressionTermParserRuleCall_1()); }
	ruleExpressionTerm
{ after(grammarAccess.getParenthesesExpressionAccess().getExpressionTermParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParenthesesExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParenthesesExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesesExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenthesesExpressionAccess().getRightParenthesisKeyword_2()); }

	KEYWORD_2 

{ after(grammarAccess.getParenthesesExpressionAccess().getRightParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ExistsExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExistsExpression__Group__0__Impl
	rule__ExistsExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExistsExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExistsExpressionAccess().getEXISTSKeyword_0()); }

	KEYWORD_66 

{ after(grammarAccess.getExistsExpressionAccess().getEXISTSKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExistsExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExistsExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExistsExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExistsExpressionAccess().getRightAssignment_1()); }
(rule__ExistsExpression__RightAssignment_1)
{ after(grammarAccess.getExistsExpressionAccess().getRightAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AllExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AllExpression__Group__0__Impl
	rule__AllExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AllExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAllExpressionAccess().getALLKeyword_0()); }

	KEYWORD_24 

{ after(grammarAccess.getAllExpressionAccess().getALLKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AllExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AllExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AllExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAllExpressionAccess().getRightAssignment_1()); }
(rule__AllExpression__RightAssignment_1)
{ after(grammarAccess.getAllExpressionAccess().getRightAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AnyExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AnyExpression__Group__0__Impl
	rule__AnyExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AnyExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnyExpressionAccess().getANYKeyword_0()); }

	KEYWORD_26 

{ after(grammarAccess.getAnyExpressionAccess().getANYKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AnyExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AnyExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AnyExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnyExpressionAccess().getRightAssignment_1()); }
(rule__AnyExpression__RightAssignment_1)
{ after(grammarAccess.getAnyExpressionAccess().getRightAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SomeExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SomeExpression__Group__0__Impl
	rule__SomeExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SomeExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSomeExpressionAccess().getSOMEKeyword_0()); }

	KEYWORD_46 

{ after(grammarAccess.getSomeExpressionAccess().getSOMEKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SomeExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SomeExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SomeExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSomeExpressionAccess().getRightAssignment_1()); }
(rule__SomeExpression__RightAssignment_1)
{ after(grammarAccess.getSomeExpressionAccess().getRightAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__CollectionExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CollectionExpression__Group__0__Impl
	rule__CollectionExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectionExpressionAccess().getLeftAssignment_0()); }
(rule__CollectionExpression__LeftAssignment_0)
{ after(grammarAccess.getCollectionExpressionAccess().getLeftAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CollectionExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CollectionExpression__Group__1__Impl
	rule__CollectionExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectionExpressionAccess().getIsNotAssignment_1()); }
(rule__CollectionExpression__IsNotAssignment_1)?
{ after(grammarAccess.getCollectionExpressionAccess().getIsNotAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CollectionExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CollectionExpression__Group__2__Impl
	rule__CollectionExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectionExpressionAccess().getMEMBERKeyword_2()); }

	KEYWORD_70 

{ after(grammarAccess.getCollectionExpressionAccess().getMEMBERKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CollectionExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CollectionExpression__Group__3__Impl
	rule__CollectionExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectionExpressionAccess().getOFKeyword_3()); }
(
	KEYWORD_21 
)?
{ after(grammarAccess.getCollectionExpressionAccess().getOFKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CollectionExpression__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CollectionExpression__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionExpression__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectionExpressionAccess().getRightAssignment_4()); }
(rule__CollectionExpression__RightAssignment_4)
{ after(grammarAccess.getCollectionExpressionAccess().getRightAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__NullComparisonExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NullComparisonExpression__Group__0__Impl
	rule__NullComparisonExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NullComparisonExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNullComparisonExpressionAccess().getLeftAssignment_0()); }
(rule__NullComparisonExpression__LeftAssignment_0)
{ after(grammarAccess.getNullComparisonExpressionAccess().getLeftAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NullComparisonExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NullComparisonExpression__Group__1__Impl
	rule__NullComparisonExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NullComparisonExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNullComparisonExpressionAccess().getISKeyword_1()); }

	KEYWORD_20 

{ after(grammarAccess.getNullComparisonExpressionAccess().getISKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NullComparisonExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NullComparisonExpression__Group__2__Impl
	rule__NullComparisonExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__NullComparisonExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNullComparisonExpressionAccess().getIsNotAssignment_2()); }
(rule__NullComparisonExpression__IsNotAssignment_2)?
{ after(grammarAccess.getNullComparisonExpressionAccess().getIsNotAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NullComparisonExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NullComparisonExpression__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NullComparisonExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNullComparisonExpressionAccess().getNULLKeyword_3()); }

	KEYWORD_44 

{ after(grammarAccess.getNullComparisonExpressionAccess().getNULLKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__EmptyComparisonExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EmptyComparisonExpression__Group__0__Impl
	rule__EmptyComparisonExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EmptyComparisonExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEmptyComparisonExpressionAccess().getLeftAssignment_0()); }
(rule__EmptyComparisonExpression__LeftAssignment_0)
{ after(grammarAccess.getEmptyComparisonExpressionAccess().getLeftAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EmptyComparisonExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EmptyComparisonExpression__Group__1__Impl
	rule__EmptyComparisonExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EmptyComparisonExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEmptyComparisonExpressionAccess().getISKeyword_1()); }

	KEYWORD_20 

{ after(grammarAccess.getEmptyComparisonExpressionAccess().getISKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EmptyComparisonExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EmptyComparisonExpression__Group__2__Impl
	rule__EmptyComparisonExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__EmptyComparisonExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEmptyComparisonExpressionAccess().getIsNotAssignment_2()); }
(rule__EmptyComparisonExpression__IsNotAssignment_2)?
{ after(grammarAccess.getEmptyComparisonExpressionAccess().getIsNotAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EmptyComparisonExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EmptyComparisonExpression__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EmptyComparisonExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEmptyComparisonExpressionAccess().getEMPTYKeyword_3()); }

	KEYWORD_52 

{ after(grammarAccess.getEmptyComparisonExpressionAccess().getEMPTYKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__LikeExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LikeExpression__Group__0__Impl
	rule__LikeExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LikeExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLikeExpressionAccess().getLeftAssignment_0()); }
(rule__LikeExpression__LeftAssignment_0)
{ after(grammarAccess.getLikeExpressionAccess().getLeftAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LikeExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LikeExpression__Group__1__Impl
	rule__LikeExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LikeExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLikeExpressionAccess().getIsNotAssignment_1()); }
(rule__LikeExpression__IsNotAssignment_1)?
{ after(grammarAccess.getLikeExpressionAccess().getIsNotAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LikeExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LikeExpression__Group__2__Impl
	rule__LikeExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LikeExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLikeExpressionAccess().getLIKEKeyword_2()); }

	KEYWORD_43 

{ after(grammarAccess.getLikeExpressionAccess().getLIKEKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LikeExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LikeExpression__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LikeExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLikeExpressionAccess().getRightAssignment_3()); }
(rule__LikeExpression__RightAssignment_3)
{ after(grammarAccess.getLikeExpressionAccess().getRightAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__InSeqExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InSeqExpression__Group__0__Impl
	rule__InSeqExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InSeqExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInSeqExpressionAccess().getLeftAssignment_0()); }
(rule__InSeqExpression__LeftAssignment_0)
{ after(grammarAccess.getInSeqExpressionAccess().getLeftAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InSeqExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InSeqExpression__Group__1__Impl
	rule__InSeqExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__InSeqExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInSeqExpressionAccess().getIsNotAssignment_1()); }
(rule__InSeqExpression__IsNotAssignment_1)?
{ after(grammarAccess.getInSeqExpressionAccess().getIsNotAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InSeqExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InSeqExpression__Group__2__Impl
	rule__InSeqExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__InSeqExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInSeqExpressionAccess().getINKeyword_2()); }

	KEYWORD_19 

{ after(grammarAccess.getInSeqExpressionAccess().getINKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InSeqExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InSeqExpression__Group__3__Impl
	rule__InSeqExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__InSeqExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInSeqExpressionAccess().getLeftParenthesisKeyword_3()); }

	KEYWORD_1 

{ after(grammarAccess.getInSeqExpressionAccess().getLeftParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InSeqExpression__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InSeqExpression__Group__4__Impl
	rule__InSeqExpression__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__InSeqExpression__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInSeqExpressionAccess().getItemsAssignment_4()); }
(rule__InSeqExpression__ItemsAssignment_4)
{ after(grammarAccess.getInSeqExpressionAccess().getItemsAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InSeqExpression__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InSeqExpression__Group__5__Impl
	rule__InSeqExpression__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__InSeqExpression__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInSeqExpressionAccess().getGroup_5()); }
(rule__InSeqExpression__Group_5__0)*
{ after(grammarAccess.getInSeqExpressionAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InSeqExpression__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InSeqExpression__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InSeqExpression__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInSeqExpressionAccess().getRightParenthesisKeyword_6()); }

	KEYWORD_2 

{ after(grammarAccess.getInSeqExpressionAccess().getRightParenthesisKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__InSeqExpression__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InSeqExpression__Group_5__0__Impl
	rule__InSeqExpression__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InSeqExpression__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInSeqExpressionAccess().getCommaKeyword_5_0()); }

	KEYWORD_5 

{ after(grammarAccess.getInSeqExpressionAccess().getCommaKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InSeqExpression__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InSeqExpression__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InSeqExpression__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInSeqExpressionAccess().getItemsAssignment_5_1()); }
(rule__InSeqExpression__ItemsAssignment_5_1)
{ after(grammarAccess.getInSeqExpressionAccess().getItemsAssignment_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__InQueryExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InQueryExpression__Group__0__Impl
	rule__InQueryExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InQueryExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInQueryExpressionAccess().getLeftAssignment_0()); }
(rule__InQueryExpression__LeftAssignment_0)
{ after(grammarAccess.getInQueryExpressionAccess().getLeftAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InQueryExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InQueryExpression__Group__1__Impl
	rule__InQueryExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__InQueryExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInQueryExpressionAccess().getIsNotAssignment_1()); }
(rule__InQueryExpression__IsNotAssignment_1)?
{ after(grammarAccess.getInQueryExpressionAccess().getIsNotAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InQueryExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InQueryExpression__Group__2__Impl
	rule__InQueryExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__InQueryExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInQueryExpressionAccess().getINKeyword_2()); }

	KEYWORD_19 

{ after(grammarAccess.getInQueryExpressionAccess().getINKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InQueryExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InQueryExpression__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InQueryExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInQueryExpressionAccess().getQueryAssignment_3()); }
(rule__InQueryExpression__QueryAssignment_3)
{ after(grammarAccess.getInQueryExpressionAccess().getQueryAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__BetweenExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BetweenExpression__Group__0__Impl
	rule__BetweenExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BetweenExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBetweenExpressionAccess().getLeftAssignment_0()); }
(rule__BetweenExpression__LeftAssignment_0)
{ after(grammarAccess.getBetweenExpressionAccess().getLeftAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BetweenExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BetweenExpression__Group__1__Impl
	rule__BetweenExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BetweenExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBetweenExpressionAccess().getIsNotAssignment_1()); }
(rule__BetweenExpression__IsNotAssignment_1)?
{ after(grammarAccess.getBetweenExpressionAccess().getIsNotAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BetweenExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BetweenExpression__Group__2__Impl
	rule__BetweenExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BetweenExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBetweenExpressionAccess().getBETWEENKeyword_2()); }

	KEYWORD_75 

{ after(grammarAccess.getBetweenExpressionAccess().getBETWEENKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BetweenExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BetweenExpression__Group__3__Impl
	rule__BetweenExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__BetweenExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBetweenExpressionAccess().getMinAssignment_3()); }
(rule__BetweenExpression__MinAssignment_3)
{ after(grammarAccess.getBetweenExpressionAccess().getMinAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BetweenExpression__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BetweenExpression__Group__4__Impl
	rule__BetweenExpression__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__BetweenExpression__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBetweenExpressionAccess().getANDKeyword_4()); }

	KEYWORD_25 

{ after(grammarAccess.getBetweenExpressionAccess().getANDKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BetweenExpression__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BetweenExpression__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BetweenExpression__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBetweenExpressionAccess().getMaxAssignment_5()); }
(rule__BetweenExpression__MaxAssignment_5)
{ after(grammarAccess.getBetweenExpressionAccess().getMaxAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__AliasAttributeExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AliasAttributeExpression__Group__0__Impl
	rule__AliasAttributeExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AliasAttributeExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAliasAttributeExpressionAccess().getAliasAssignment_0()); }
(rule__AliasAttributeExpression__AliasAssignment_0)
{ after(grammarAccess.getAliasAttributeExpressionAccess().getAliasAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AliasAttributeExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AliasAttributeExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AliasAttributeExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAliasAttributeExpressionAccess().getGroup_1()); }
(rule__AliasAttributeExpression__Group_1__0)*
{ after(grammarAccess.getAliasAttributeExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AliasAttributeExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AliasAttributeExpression__Group_1__0__Impl
	rule__AliasAttributeExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AliasAttributeExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAliasAttributeExpressionAccess().getFullStopKeyword_1_0()); }

	KEYWORD_7 

{ after(grammarAccess.getAliasAttributeExpressionAccess().getFullStopKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AliasAttributeExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AliasAttributeExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AliasAttributeExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAliasAttributeExpressionAccess().getAttributesAssignment_1_1()); }
(rule__AliasAttributeExpression__AttributesAssignment_1_1)
{ after(grammarAccess.getAliasAttributeExpressionAccess().getAttributesAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ParameterExpression__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterExpression__Group_0__0__Impl
	rule__ParameterExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterExpression__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterExpressionAccess().getColonKeyword_0_0()); }

	KEYWORD_9 

{ after(grammarAccess.getParameterExpressionAccess().getColonKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterExpression__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterExpression__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterExpression__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterExpressionAccess().getNameAssignment_0_1()); }
(rule__ParameterExpression__NameAssignment_0_1)
{ after(grammarAccess.getParameterExpressionAccess().getNameAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ParameterExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterExpression__Group_1__0__Impl
	rule__ParameterExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterExpressionAccess().getQuestionMarkKeyword_1_0()); }

	KEYWORD_13 

{ after(grammarAccess.getParameterExpressionAccess().getQuestionMarkKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterExpressionAccess().getIndexAssignment_1_1()); }
(rule__ParameterExpression__IndexAssignment_1_1)
{ after(grammarAccess.getParameterExpressionAccess().getIndexAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__StringFunctionExpression__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringFunctionExpression__Group_0__0__Impl
	rule__StringFunctionExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StringFunctionExpression__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringFunctionExpressionAccess().getNameAssignment_0_0()); }
(rule__StringFunctionExpression__NameAssignment_0_0)
{ after(grammarAccess.getStringFunctionExpressionAccess().getNameAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringFunctionExpression__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringFunctionExpression__Group_0__1__Impl
	rule__StringFunctionExpression__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StringFunctionExpression__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringFunctionExpressionAccess().getLeftParenthesisKeyword_0_1()); }

	KEYWORD_1 

{ after(grammarAccess.getStringFunctionExpressionAccess().getLeftParenthesisKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringFunctionExpression__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringFunctionExpression__Group_0__2__Impl
	rule__StringFunctionExpression__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__StringFunctionExpression__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringFunctionExpressionAccess().getFieldsAssignment_0_2()); }
(rule__StringFunctionExpression__FieldsAssignment_0_2)
{ after(grammarAccess.getStringFunctionExpressionAccess().getFieldsAssignment_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringFunctionExpression__Group_0__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringFunctionExpression__Group_0__3__Impl
	rule__StringFunctionExpression__Group_0__4
;
finally {
	restoreStackSize(stackSize);
}

rule__StringFunctionExpression__Group_0__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringFunctionExpressionAccess().getGroup_0_3()); }
(rule__StringFunctionExpression__Group_0_3__0)*
{ after(grammarAccess.getStringFunctionExpressionAccess().getGroup_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringFunctionExpression__Group_0__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringFunctionExpression__Group_0__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StringFunctionExpression__Group_0__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringFunctionExpressionAccess().getRightParenthesisKeyword_0_4()); }

	KEYWORD_2 

{ after(grammarAccess.getStringFunctionExpressionAccess().getRightParenthesisKeyword_0_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__StringFunctionExpression__Group_0_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringFunctionExpression__Group_0_3__0__Impl
	rule__StringFunctionExpression__Group_0_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StringFunctionExpression__Group_0_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringFunctionExpressionAccess().getCommaKeyword_0_3_0()); }

	KEYWORD_5 

{ after(grammarAccess.getStringFunctionExpressionAccess().getCommaKeyword_0_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringFunctionExpression__Group_0_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringFunctionExpression__Group_0_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StringFunctionExpression__Group_0_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringFunctionExpressionAccess().getFieldsAssignment_0_3_1()); }
(rule__StringFunctionExpression__FieldsAssignment_0_3_1)
{ after(grammarAccess.getStringFunctionExpressionAccess().getFieldsAssignment_0_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__StringFunctionExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringFunctionExpression__Group_1__0__Impl
	rule__StringFunctionExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StringFunctionExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringFunctionExpressionAccess().getNameAssignment_1_0()); }
(rule__StringFunctionExpression__NameAssignment_1_0)
{ after(grammarAccess.getStringFunctionExpressionAccess().getNameAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringFunctionExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringFunctionExpression__Group_1__1__Impl
	rule__StringFunctionExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StringFunctionExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringFunctionExpressionAccess().getLeftParenthesisKeyword_1_1()); }

	KEYWORD_1 

{ after(grammarAccess.getStringFunctionExpressionAccess().getLeftParenthesisKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringFunctionExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringFunctionExpression__Group_1__2__Impl
	rule__StringFunctionExpression__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__StringFunctionExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringFunctionExpressionAccess().getFieldAssignment_1_2()); }
(rule__StringFunctionExpression__FieldAssignment_1_2)
{ after(grammarAccess.getStringFunctionExpressionAccess().getFieldAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringFunctionExpression__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringFunctionExpression__Group_1__3__Impl
	rule__StringFunctionExpression__Group_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__StringFunctionExpression__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringFunctionExpressionAccess().getCommaKeyword_1_3()); }

	KEYWORD_5 

{ after(grammarAccess.getStringFunctionExpressionAccess().getCommaKeyword_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringFunctionExpression__Group_1__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringFunctionExpression__Group_1__4__Impl
	rule__StringFunctionExpression__Group_1__5
;
finally {
	restoreStackSize(stackSize);
}

rule__StringFunctionExpression__Group_1__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringFunctionExpressionAccess().getStartPosAssignment_1_4()); }
(rule__StringFunctionExpression__StartPosAssignment_1_4)
{ after(grammarAccess.getStringFunctionExpressionAccess().getStartPosAssignment_1_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringFunctionExpression__Group_1__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringFunctionExpression__Group_1__5__Impl
	rule__StringFunctionExpression__Group_1__6
;
finally {
	restoreStackSize(stackSize);
}

rule__StringFunctionExpression__Group_1__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringFunctionExpressionAccess().getGroup_1_5()); }
(rule__StringFunctionExpression__Group_1_5__0)?
{ after(grammarAccess.getStringFunctionExpressionAccess().getGroup_1_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringFunctionExpression__Group_1__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringFunctionExpression__Group_1__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StringFunctionExpression__Group_1__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringFunctionExpressionAccess().getRightParenthesisKeyword_1_6()); }

	KEYWORD_2 

{ after(grammarAccess.getStringFunctionExpressionAccess().getRightParenthesisKeyword_1_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__StringFunctionExpression__Group_1_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringFunctionExpression__Group_1_5__0__Impl
	rule__StringFunctionExpression__Group_1_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StringFunctionExpression__Group_1_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringFunctionExpressionAccess().getCommaKeyword_1_5_0()); }

	KEYWORD_5 

{ after(grammarAccess.getStringFunctionExpressionAccess().getCommaKeyword_1_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringFunctionExpression__Group_1_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringFunctionExpression__Group_1_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StringFunctionExpression__Group_1_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringFunctionExpressionAccess().getLengthAssignment_1_5_1()); }
(rule__StringFunctionExpression__LengthAssignment_1_5_1)
{ after(grammarAccess.getStringFunctionExpressionAccess().getLengthAssignment_1_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__StringFunctionExpression__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringFunctionExpression__Group_2__0__Impl
	rule__StringFunctionExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StringFunctionExpression__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringFunctionExpressionAccess().getNameAssignment_2_0()); }
(rule__StringFunctionExpression__NameAssignment_2_0)
{ after(grammarAccess.getStringFunctionExpressionAccess().getNameAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringFunctionExpression__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringFunctionExpression__Group_2__1__Impl
	rule__StringFunctionExpression__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StringFunctionExpression__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringFunctionExpressionAccess().getLeftParenthesisKeyword_2_1()); }

	KEYWORD_1 

{ after(grammarAccess.getStringFunctionExpressionAccess().getLeftParenthesisKeyword_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringFunctionExpression__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringFunctionExpression__Group_2__2__Impl
	rule__StringFunctionExpression__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__StringFunctionExpression__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringFunctionExpressionAccess().getTrimSpecAssignment_2_2()); }
(rule__StringFunctionExpression__TrimSpecAssignment_2_2)?
{ after(grammarAccess.getStringFunctionExpressionAccess().getTrimSpecAssignment_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringFunctionExpression__Group_2__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringFunctionExpression__Group_2__3__Impl
	rule__StringFunctionExpression__Group_2__4
;
finally {
	restoreStackSize(stackSize);
}

rule__StringFunctionExpression__Group_2__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringFunctionExpressionAccess().getTrimCharAssignment_2_3()); }
(rule__StringFunctionExpression__TrimCharAssignment_2_3)?
{ after(grammarAccess.getStringFunctionExpressionAccess().getTrimCharAssignment_2_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringFunctionExpression__Group_2__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringFunctionExpression__Group_2__4__Impl
	rule__StringFunctionExpression__Group_2__5
;
finally {
	restoreStackSize(stackSize);
}

rule__StringFunctionExpression__Group_2__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringFunctionExpressionAccess().getFROMKeyword_2_4()); }
(
	KEYWORD_39 
)?
{ after(grammarAccess.getStringFunctionExpressionAccess().getFROMKeyword_2_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringFunctionExpression__Group_2__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringFunctionExpression__Group_2__5__Impl
	rule__StringFunctionExpression__Group_2__6
;
finally {
	restoreStackSize(stackSize);
}

rule__StringFunctionExpression__Group_2__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringFunctionExpressionAccess().getFieldAssignment_2_5()); }
(rule__StringFunctionExpression__FieldAssignment_2_5)
{ after(grammarAccess.getStringFunctionExpressionAccess().getFieldAssignment_2_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringFunctionExpression__Group_2__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringFunctionExpression__Group_2__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StringFunctionExpression__Group_2__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringFunctionExpressionAccess().getRightParenthesisKeyword_2_6()); }

	KEYWORD_2 

{ after(grammarAccess.getStringFunctionExpressionAccess().getRightParenthesisKeyword_2_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__StringFunctionExpression__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringFunctionExpression__Group_3__0__Impl
	rule__StringFunctionExpression__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StringFunctionExpression__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringFunctionExpressionAccess().getNameAssignment_3_0()); }
(rule__StringFunctionExpression__NameAssignment_3_0)
{ after(grammarAccess.getStringFunctionExpressionAccess().getNameAssignment_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringFunctionExpression__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringFunctionExpression__Group_3__1__Impl
	rule__StringFunctionExpression__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StringFunctionExpression__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringFunctionExpressionAccess().getLeftParenthesisKeyword_3_1()); }

	KEYWORD_1 

{ after(grammarAccess.getStringFunctionExpressionAccess().getLeftParenthesisKeyword_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringFunctionExpression__Group_3__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringFunctionExpression__Group_3__2__Impl
	rule__StringFunctionExpression__Group_3__3
;
finally {
	restoreStackSize(stackSize);
}

rule__StringFunctionExpression__Group_3__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringFunctionExpressionAccess().getFieldAssignment_3_2()); }
(rule__StringFunctionExpression__FieldAssignment_3_2)
{ after(grammarAccess.getStringFunctionExpressionAccess().getFieldAssignment_3_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringFunctionExpression__Group_3__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringFunctionExpression__Group_3__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StringFunctionExpression__Group_3__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringFunctionExpressionAccess().getRightParenthesisKeyword_3_3()); }

	KEYWORD_2 

{ after(grammarAccess.getStringFunctionExpressionAccess().getRightParenthesisKeyword_3_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__StringFunctionExpression__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringFunctionExpression__Group_4__0__Impl
	rule__StringFunctionExpression__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StringFunctionExpression__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringFunctionExpressionAccess().getNameAssignment_4_0()); }
(rule__StringFunctionExpression__NameAssignment_4_0)
{ after(grammarAccess.getStringFunctionExpressionAccess().getNameAssignment_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringFunctionExpression__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringFunctionExpression__Group_4__1__Impl
	rule__StringFunctionExpression__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StringFunctionExpression__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringFunctionExpressionAccess().getLeftParenthesisKeyword_4_1()); }

	KEYWORD_1 

{ after(grammarAccess.getStringFunctionExpressionAccess().getLeftParenthesisKeyword_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringFunctionExpression__Group_4__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringFunctionExpression__Group_4__2__Impl
	rule__StringFunctionExpression__Group_4__3
;
finally {
	restoreStackSize(stackSize);
}

rule__StringFunctionExpression__Group_4__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringFunctionExpressionAccess().getFieldAssignment_4_2()); }
(rule__StringFunctionExpression__FieldAssignment_4_2)
{ after(grammarAccess.getStringFunctionExpressionAccess().getFieldAssignment_4_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringFunctionExpression__Group_4__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringFunctionExpression__Group_4__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StringFunctionExpression__Group_4__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringFunctionExpressionAccess().getRightParenthesisKeyword_4_3()); }

	KEYWORD_2 

{ after(grammarAccess.getStringFunctionExpressionAccess().getRightParenthesisKeyword_4_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__StringFunctionExpression__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringFunctionExpression__Group_5__0__Impl
	rule__StringFunctionExpression__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StringFunctionExpression__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringFunctionExpressionAccess().getNameAssignment_5_0()); }
(rule__StringFunctionExpression__NameAssignment_5_0)
{ after(grammarAccess.getStringFunctionExpressionAccess().getNameAssignment_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringFunctionExpression__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringFunctionExpression__Group_5__1__Impl
	rule__StringFunctionExpression__Group_5__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StringFunctionExpression__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringFunctionExpressionAccess().getLeftParenthesisKeyword_5_1()); }

	KEYWORD_1 

{ after(grammarAccess.getStringFunctionExpressionAccess().getLeftParenthesisKeyword_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringFunctionExpression__Group_5__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringFunctionExpression__Group_5__2__Impl
	rule__StringFunctionExpression__Group_5__3
;
finally {
	restoreStackSize(stackSize);
}

rule__StringFunctionExpression__Group_5__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringFunctionExpressionAccess().getFieldAssignment_5_2()); }
(rule__StringFunctionExpression__FieldAssignment_5_2)
{ after(grammarAccess.getStringFunctionExpressionAccess().getFieldAssignment_5_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringFunctionExpression__Group_5__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringFunctionExpression__Group_5__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StringFunctionExpression__Group_5__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringFunctionExpressionAccess().getRightParenthesisKeyword_5_3()); }

	KEYWORD_2 

{ after(grammarAccess.getStringFunctionExpressionAccess().getRightParenthesisKeyword_5_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__StringFunctionExpression__Group_6__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringFunctionExpression__Group_6__0__Impl
	rule__StringFunctionExpression__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StringFunctionExpression__Group_6__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringFunctionExpressionAccess().getNameAssignment_6_0()); }
(rule__StringFunctionExpression__NameAssignment_6_0)
{ after(grammarAccess.getStringFunctionExpressionAccess().getNameAssignment_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringFunctionExpression__Group_6__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringFunctionExpression__Group_6__1__Impl
	rule__StringFunctionExpression__Group_6__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StringFunctionExpression__Group_6__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringFunctionExpressionAccess().getLeftParenthesisKeyword_6_1()); }

	KEYWORD_1 

{ after(grammarAccess.getStringFunctionExpressionAccess().getLeftParenthesisKeyword_6_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringFunctionExpression__Group_6__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringFunctionExpression__Group_6__2__Impl
	rule__StringFunctionExpression__Group_6__3
;
finally {
	restoreStackSize(stackSize);
}

rule__StringFunctionExpression__Group_6__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringFunctionExpressionAccess().getFieldsAssignment_6_2()); }
(rule__StringFunctionExpression__FieldsAssignment_6_2)
{ after(grammarAccess.getStringFunctionExpressionAccess().getFieldsAssignment_6_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringFunctionExpression__Group_6__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringFunctionExpression__Group_6__3__Impl
	rule__StringFunctionExpression__Group_6__4
;
finally {
	restoreStackSize(stackSize);
}

rule__StringFunctionExpression__Group_6__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringFunctionExpressionAccess().getCommaKeyword_6_3()); }

	KEYWORD_5 

{ after(grammarAccess.getStringFunctionExpressionAccess().getCommaKeyword_6_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringFunctionExpression__Group_6__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringFunctionExpression__Group_6__4__Impl
	rule__StringFunctionExpression__Group_6__5
;
finally {
	restoreStackSize(stackSize);
}

rule__StringFunctionExpression__Group_6__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringFunctionExpressionAccess().getFieldsAssignment_6_4()); }
(rule__StringFunctionExpression__FieldsAssignment_6_4)
{ after(grammarAccess.getStringFunctionExpressionAccess().getFieldsAssignment_6_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringFunctionExpression__Group_6__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringFunctionExpression__Group_6__5__Impl
	rule__StringFunctionExpression__Group_6__6
;
finally {
	restoreStackSize(stackSize);
}

rule__StringFunctionExpression__Group_6__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringFunctionExpressionAccess().getGroup_6_5()); }
(rule__StringFunctionExpression__Group_6_5__0)?
{ after(grammarAccess.getStringFunctionExpressionAccess().getGroup_6_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringFunctionExpression__Group_6__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringFunctionExpression__Group_6__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StringFunctionExpression__Group_6__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringFunctionExpressionAccess().getRightParenthesisKeyword_6_6()); }

	KEYWORD_2 

{ after(grammarAccess.getStringFunctionExpressionAccess().getRightParenthesisKeyword_6_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__StringFunctionExpression__Group_6_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringFunctionExpression__Group_6_5__0__Impl
	rule__StringFunctionExpression__Group_6_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StringFunctionExpression__Group_6_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringFunctionExpressionAccess().getCommaKeyword_6_5_0()); }

	KEYWORD_5 

{ after(grammarAccess.getStringFunctionExpressionAccess().getCommaKeyword_6_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringFunctionExpression__Group_6_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringFunctionExpression__Group_6_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StringFunctionExpression__Group_6_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringFunctionExpressionAccess().getStartPosAssignment_6_5_1()); }
(rule__StringFunctionExpression__StartPosAssignment_6_5_1)
{ after(grammarAccess.getStringFunctionExpressionAccess().getStartPosAssignment_6_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ArithmeticFunctionExpression__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArithmeticFunctionExpression__Group_0__0__Impl
	rule__ArithmeticFunctionExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticFunctionExpression__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArithmeticFunctionExpressionAccess().getNameAssignment_0_0()); }
(rule__ArithmeticFunctionExpression__NameAssignment_0_0)
{ after(grammarAccess.getArithmeticFunctionExpressionAccess().getNameAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArithmeticFunctionExpression__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArithmeticFunctionExpression__Group_0__1__Impl
	rule__ArithmeticFunctionExpression__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticFunctionExpression__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArithmeticFunctionExpressionAccess().getLeftParenthesisKeyword_0_1()); }

	KEYWORD_1 

{ after(grammarAccess.getArithmeticFunctionExpressionAccess().getLeftParenthesisKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArithmeticFunctionExpression__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArithmeticFunctionExpression__Group_0__2__Impl
	rule__ArithmeticFunctionExpression__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticFunctionExpression__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArithmeticFunctionExpressionAccess().getFieldAssignment_0_2()); }
(rule__ArithmeticFunctionExpression__FieldAssignment_0_2)
{ after(grammarAccess.getArithmeticFunctionExpressionAccess().getFieldAssignment_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArithmeticFunctionExpression__Group_0__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArithmeticFunctionExpression__Group_0__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticFunctionExpression__Group_0__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArithmeticFunctionExpressionAccess().getRightParenthesisKeyword_0_3()); }

	KEYWORD_2 

{ after(grammarAccess.getArithmeticFunctionExpressionAccess().getRightParenthesisKeyword_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ArithmeticFunctionExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArithmeticFunctionExpression__Group_1__0__Impl
	rule__ArithmeticFunctionExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticFunctionExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArithmeticFunctionExpressionAccess().getNameAssignment_1_0()); }
(rule__ArithmeticFunctionExpression__NameAssignment_1_0)
{ after(grammarAccess.getArithmeticFunctionExpressionAccess().getNameAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArithmeticFunctionExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArithmeticFunctionExpression__Group_1__1__Impl
	rule__ArithmeticFunctionExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticFunctionExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArithmeticFunctionExpressionAccess().getLeftParenthesisKeyword_1_1()); }

	KEYWORD_1 

{ after(grammarAccess.getArithmeticFunctionExpressionAccess().getLeftParenthesisKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArithmeticFunctionExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArithmeticFunctionExpression__Group_1__2__Impl
	rule__ArithmeticFunctionExpression__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticFunctionExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArithmeticFunctionExpressionAccess().getFieldAssignment_1_2()); }
(rule__ArithmeticFunctionExpression__FieldAssignment_1_2)
{ after(grammarAccess.getArithmeticFunctionExpressionAccess().getFieldAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArithmeticFunctionExpression__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArithmeticFunctionExpression__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticFunctionExpression__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArithmeticFunctionExpressionAccess().getRightParenthesisKeyword_1_3()); }

	KEYWORD_2 

{ after(grammarAccess.getArithmeticFunctionExpressionAccess().getRightParenthesisKeyword_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ArithmeticFunctionExpression__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArithmeticFunctionExpression__Group_2__0__Impl
	rule__ArithmeticFunctionExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticFunctionExpression__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArithmeticFunctionExpressionAccess().getNameAssignment_2_0()); }
(rule__ArithmeticFunctionExpression__NameAssignment_2_0)
{ after(grammarAccess.getArithmeticFunctionExpressionAccess().getNameAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArithmeticFunctionExpression__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArithmeticFunctionExpression__Group_2__1__Impl
	rule__ArithmeticFunctionExpression__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticFunctionExpression__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArithmeticFunctionExpressionAccess().getLeftParenthesisKeyword_2_1()); }

	KEYWORD_1 

{ after(grammarAccess.getArithmeticFunctionExpressionAccess().getLeftParenthesisKeyword_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArithmeticFunctionExpression__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArithmeticFunctionExpression__Group_2__2__Impl
	rule__ArithmeticFunctionExpression__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticFunctionExpression__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArithmeticFunctionExpressionAccess().getFieldsAssignment_2_2()); }
(rule__ArithmeticFunctionExpression__FieldsAssignment_2_2)
{ after(grammarAccess.getArithmeticFunctionExpressionAccess().getFieldsAssignment_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArithmeticFunctionExpression__Group_2__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArithmeticFunctionExpression__Group_2__3__Impl
	rule__ArithmeticFunctionExpression__Group_2__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticFunctionExpression__Group_2__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArithmeticFunctionExpressionAccess().getCommaKeyword_2_3()); }

	KEYWORD_5 

{ after(grammarAccess.getArithmeticFunctionExpressionAccess().getCommaKeyword_2_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArithmeticFunctionExpression__Group_2__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArithmeticFunctionExpression__Group_2__4__Impl
	rule__ArithmeticFunctionExpression__Group_2__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticFunctionExpression__Group_2__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArithmeticFunctionExpressionAccess().getFieldsAssignment_2_4()); }
(rule__ArithmeticFunctionExpression__FieldsAssignment_2_4)
{ after(grammarAccess.getArithmeticFunctionExpressionAccess().getFieldsAssignment_2_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArithmeticFunctionExpression__Group_2__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArithmeticFunctionExpression__Group_2__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticFunctionExpression__Group_2__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArithmeticFunctionExpressionAccess().getRightParenthesisKeyword_2_5()); }

	KEYWORD_2 

{ after(grammarAccess.getArithmeticFunctionExpressionAccess().getRightParenthesisKeyword_2_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__CollectionFunctionExpression__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CollectionFunctionExpression__Group_0__0__Impl
	rule__CollectionFunctionExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionFunctionExpression__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectionFunctionExpressionAccess().getNameAssignment_0_0()); }
(rule__CollectionFunctionExpression__NameAssignment_0_0)
{ after(grammarAccess.getCollectionFunctionExpressionAccess().getNameAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CollectionFunctionExpression__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CollectionFunctionExpression__Group_0__1__Impl
	rule__CollectionFunctionExpression__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionFunctionExpression__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectionFunctionExpressionAccess().getLeftParenthesisKeyword_0_1()); }

	KEYWORD_1 

{ after(grammarAccess.getCollectionFunctionExpressionAccess().getLeftParenthesisKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CollectionFunctionExpression__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CollectionFunctionExpression__Group_0__2__Impl
	rule__CollectionFunctionExpression__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionFunctionExpression__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectionFunctionExpressionAccess().getFieldAssignment_0_2()); }
(rule__CollectionFunctionExpression__FieldAssignment_0_2)
{ after(grammarAccess.getCollectionFunctionExpressionAccess().getFieldAssignment_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CollectionFunctionExpression__Group_0__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CollectionFunctionExpression__Group_0__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionFunctionExpression__Group_0__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectionFunctionExpressionAccess().getRightParenthesisKeyword_0_3()); }

	KEYWORD_2 

{ after(grammarAccess.getCollectionFunctionExpressionAccess().getRightParenthesisKeyword_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__CollectionFunctionExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CollectionFunctionExpression__Group_1__0__Impl
	rule__CollectionFunctionExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionFunctionExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectionFunctionExpressionAccess().getNameAssignment_1_0()); }
(rule__CollectionFunctionExpression__NameAssignment_1_0)
{ after(grammarAccess.getCollectionFunctionExpressionAccess().getNameAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CollectionFunctionExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CollectionFunctionExpression__Group_1__1__Impl
	rule__CollectionFunctionExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionFunctionExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectionFunctionExpressionAccess().getLeftParenthesisKeyword_1_1()); }

	KEYWORD_1 

{ after(grammarAccess.getCollectionFunctionExpressionAccess().getLeftParenthesisKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CollectionFunctionExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CollectionFunctionExpression__Group_1__2__Impl
	rule__CollectionFunctionExpression__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionFunctionExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectionFunctionExpressionAccess().getFieldAssignment_1_2()); }
(rule__CollectionFunctionExpression__FieldAssignment_1_2)
{ after(grammarAccess.getCollectionFunctionExpressionAccess().getFieldAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CollectionFunctionExpression__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CollectionFunctionExpression__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionFunctionExpression__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectionFunctionExpressionAccess().getRightParenthesisKeyword_1_3()); }

	KEYWORD_2 

{ after(grammarAccess.getCollectionFunctionExpressionAccess().getRightParenthesisKeyword_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__TemporalFunctionExpression__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TemporalFunctionExpression__Group_0__0__Impl
	rule__TemporalFunctionExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalFunctionExpression__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemporalFunctionExpressionAccess().getNameAssignment_0_0()); }
(rule__TemporalFunctionExpression__NameAssignment_0_0)
{ after(grammarAccess.getTemporalFunctionExpressionAccess().getNameAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TemporalFunctionExpression__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TemporalFunctionExpression__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalFunctionExpression__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemporalFunctionExpressionAccess().getGroup_0_1()); }
(rule__TemporalFunctionExpression__Group_0_1__0)?
{ after(grammarAccess.getTemporalFunctionExpressionAccess().getGroup_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TemporalFunctionExpression__Group_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TemporalFunctionExpression__Group_0_1__0__Impl
	rule__TemporalFunctionExpression__Group_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalFunctionExpression__Group_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemporalFunctionExpressionAccess().getLeftParenthesisKeyword_0_1_0()); }

	KEYWORD_1 

{ after(grammarAccess.getTemporalFunctionExpressionAccess().getLeftParenthesisKeyword_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TemporalFunctionExpression__Group_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TemporalFunctionExpression__Group_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalFunctionExpression__Group_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemporalFunctionExpressionAccess().getRightParenthesisKeyword_0_1_1()); }

	KEYWORD_2 

{ after(grammarAccess.getTemporalFunctionExpressionAccess().getRightParenthesisKeyword_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TemporalFunctionExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TemporalFunctionExpression__Group_1__0__Impl
	rule__TemporalFunctionExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalFunctionExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemporalFunctionExpressionAccess().getNameAssignment_1_0()); }
(rule__TemporalFunctionExpression__NameAssignment_1_0)
{ after(grammarAccess.getTemporalFunctionExpressionAccess().getNameAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TemporalFunctionExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TemporalFunctionExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalFunctionExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemporalFunctionExpressionAccess().getGroup_1_1()); }
(rule__TemporalFunctionExpression__Group_1_1__0)?
{ after(grammarAccess.getTemporalFunctionExpressionAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TemporalFunctionExpression__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TemporalFunctionExpression__Group_1_1__0__Impl
	rule__TemporalFunctionExpression__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalFunctionExpression__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemporalFunctionExpressionAccess().getLeftParenthesisKeyword_1_1_0()); }

	KEYWORD_1 

{ after(grammarAccess.getTemporalFunctionExpressionAccess().getLeftParenthesisKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TemporalFunctionExpression__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TemporalFunctionExpression__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalFunctionExpression__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemporalFunctionExpressionAccess().getRightParenthesisKeyword_1_1_1()); }

	KEYWORD_2 

{ after(grammarAccess.getTemporalFunctionExpressionAccess().getRightParenthesisKeyword_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TemporalFunctionExpression__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TemporalFunctionExpression__Group_2__0__Impl
	rule__TemporalFunctionExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalFunctionExpression__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemporalFunctionExpressionAccess().getNameAssignment_2_0()); }
(rule__TemporalFunctionExpression__NameAssignment_2_0)
{ after(grammarAccess.getTemporalFunctionExpressionAccess().getNameAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TemporalFunctionExpression__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TemporalFunctionExpression__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalFunctionExpression__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemporalFunctionExpressionAccess().getGroup_2_1()); }
(rule__TemporalFunctionExpression__Group_2_1__0)?
{ after(grammarAccess.getTemporalFunctionExpressionAccess().getGroup_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TemporalFunctionExpression__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TemporalFunctionExpression__Group_2_1__0__Impl
	rule__TemporalFunctionExpression__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalFunctionExpression__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemporalFunctionExpressionAccess().getLeftParenthesisKeyword_2_1_0()); }

	KEYWORD_1 

{ after(grammarAccess.getTemporalFunctionExpressionAccess().getLeftParenthesisKeyword_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TemporalFunctionExpression__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TemporalFunctionExpression__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalFunctionExpression__Group_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemporalFunctionExpressionAccess().getRightParenthesisKeyword_2_1_1()); }

	KEYWORD_2 

{ after(grammarAccess.getTemporalFunctionExpressionAccess().getRightParenthesisKeyword_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TemporalFunctionExpression__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TemporalFunctionExpression__Group_3__0__Impl
	rule__TemporalFunctionExpression__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalFunctionExpression__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemporalFunctionExpressionAccess().getNameAssignment_3_0()); }
(rule__TemporalFunctionExpression__NameAssignment_3_0)
{ after(grammarAccess.getTemporalFunctionExpressionAccess().getNameAssignment_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TemporalFunctionExpression__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TemporalFunctionExpression__Group_3__1__Impl
	rule__TemporalFunctionExpression__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalFunctionExpression__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemporalFunctionExpressionAccess().getLeftParenthesisKeyword_3_1()); }

	KEYWORD_1 

{ after(grammarAccess.getTemporalFunctionExpressionAccess().getLeftParenthesisKeyword_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TemporalFunctionExpression__Group_3__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TemporalFunctionExpression__Group_3__2__Impl
	rule__TemporalFunctionExpression__Group_3__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalFunctionExpression__Group_3__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemporalFunctionExpressionAccess().getFieldAssignment_3_2()); }
(rule__TemporalFunctionExpression__FieldAssignment_3_2)
{ after(grammarAccess.getTemporalFunctionExpressionAccess().getFieldAssignment_3_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TemporalFunctionExpression__Group_3__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TemporalFunctionExpression__Group_3__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalFunctionExpression__Group_3__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemporalFunctionExpressionAccess().getRightParenthesisKeyword_3_3()); }

	KEYWORD_2 

{ after(grammarAccess.getTemporalFunctionExpressionAccess().getRightParenthesisKeyword_3_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__TemporalFunctionExpression__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TemporalFunctionExpression__Group_4__0__Impl
	rule__TemporalFunctionExpression__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalFunctionExpression__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemporalFunctionExpressionAccess().getNameAssignment_4_0()); }
(rule__TemporalFunctionExpression__NameAssignment_4_0)
{ after(grammarAccess.getTemporalFunctionExpressionAccess().getNameAssignment_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TemporalFunctionExpression__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TemporalFunctionExpression__Group_4__1__Impl
	rule__TemporalFunctionExpression__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalFunctionExpression__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemporalFunctionExpressionAccess().getLeftParenthesisKeyword_4_1()); }

	KEYWORD_1 

{ after(grammarAccess.getTemporalFunctionExpressionAccess().getLeftParenthesisKeyword_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TemporalFunctionExpression__Group_4__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TemporalFunctionExpression__Group_4__2__Impl
	rule__TemporalFunctionExpression__Group_4__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalFunctionExpression__Group_4__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemporalFunctionExpressionAccess().getFieldAssignment_4_2()); }
(rule__TemporalFunctionExpression__FieldAssignment_4_2)
{ after(grammarAccess.getTemporalFunctionExpressionAccess().getFieldAssignment_4_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TemporalFunctionExpression__Group_4__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TemporalFunctionExpression__Group_4__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalFunctionExpression__Group_4__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemporalFunctionExpressionAccess().getRightParenthesisKeyword_4_3()); }

	KEYWORD_2 

{ after(grammarAccess.getTemporalFunctionExpressionAccess().getRightParenthesisKeyword_4_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__TemporalFunctionExpression__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TemporalFunctionExpression__Group_5__0__Impl
	rule__TemporalFunctionExpression__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalFunctionExpression__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemporalFunctionExpressionAccess().getNameAssignment_5_0()); }
(rule__TemporalFunctionExpression__NameAssignment_5_0)
{ after(grammarAccess.getTemporalFunctionExpressionAccess().getNameAssignment_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TemporalFunctionExpression__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TemporalFunctionExpression__Group_5__1__Impl
	rule__TemporalFunctionExpression__Group_5__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalFunctionExpression__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemporalFunctionExpressionAccess().getLeftParenthesisKeyword_5_1()); }

	KEYWORD_1 

{ after(grammarAccess.getTemporalFunctionExpressionAccess().getLeftParenthesisKeyword_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TemporalFunctionExpression__Group_5__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TemporalFunctionExpression__Group_5__2__Impl
	rule__TemporalFunctionExpression__Group_5__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalFunctionExpression__Group_5__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemporalFunctionExpressionAccess().getFieldAssignment_5_2()); }
(rule__TemporalFunctionExpression__FieldAssignment_5_2)
{ after(grammarAccess.getTemporalFunctionExpressionAccess().getFieldAssignment_5_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TemporalFunctionExpression__Group_5__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TemporalFunctionExpression__Group_5__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalFunctionExpression__Group_5__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemporalFunctionExpressionAccess().getRightParenthesisKeyword_5_3()); }

	KEYWORD_2 

{ after(grammarAccess.getTemporalFunctionExpressionAccess().getRightParenthesisKeyword_5_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__TemporalFunctionExpression__Group_6__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TemporalFunctionExpression__Group_6__0__Impl
	rule__TemporalFunctionExpression__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalFunctionExpression__Group_6__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemporalFunctionExpressionAccess().getNameAssignment_6_0()); }
(rule__TemporalFunctionExpression__NameAssignment_6_0)
{ after(grammarAccess.getTemporalFunctionExpressionAccess().getNameAssignment_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TemporalFunctionExpression__Group_6__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TemporalFunctionExpression__Group_6__1__Impl
	rule__TemporalFunctionExpression__Group_6__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalFunctionExpression__Group_6__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemporalFunctionExpressionAccess().getLeftParenthesisKeyword_6_1()); }

	KEYWORD_1 

{ after(grammarAccess.getTemporalFunctionExpressionAccess().getLeftParenthesisKeyword_6_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TemporalFunctionExpression__Group_6__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TemporalFunctionExpression__Group_6__2__Impl
	rule__TemporalFunctionExpression__Group_6__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalFunctionExpression__Group_6__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemporalFunctionExpressionAccess().getFieldAssignment_6_2()); }
(rule__TemporalFunctionExpression__FieldAssignment_6_2)
{ after(grammarAccess.getTemporalFunctionExpressionAccess().getFieldAssignment_6_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TemporalFunctionExpression__Group_6__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TemporalFunctionExpression__Group_6__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalFunctionExpression__Group_6__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemporalFunctionExpressionAccess().getRightParenthesisKeyword_6_3()); }

	KEYWORD_2 

{ after(grammarAccess.getTemporalFunctionExpressionAccess().getRightParenthesisKeyword_6_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__TemporalFunctionExpression__Group_7__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TemporalFunctionExpression__Group_7__0__Impl
	rule__TemporalFunctionExpression__Group_7__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalFunctionExpression__Group_7__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemporalFunctionExpressionAccess().getNameAssignment_7_0()); }
(rule__TemporalFunctionExpression__NameAssignment_7_0)
{ after(grammarAccess.getTemporalFunctionExpressionAccess().getNameAssignment_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TemporalFunctionExpression__Group_7__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TemporalFunctionExpression__Group_7__1__Impl
	rule__TemporalFunctionExpression__Group_7__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalFunctionExpression__Group_7__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemporalFunctionExpressionAccess().getLeftParenthesisKeyword_7_1()); }

	KEYWORD_1 

{ after(grammarAccess.getTemporalFunctionExpressionAccess().getLeftParenthesisKeyword_7_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TemporalFunctionExpression__Group_7__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TemporalFunctionExpression__Group_7__2__Impl
	rule__TemporalFunctionExpression__Group_7__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalFunctionExpression__Group_7__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemporalFunctionExpressionAccess().getFieldAssignment_7_2()); }
(rule__TemporalFunctionExpression__FieldAssignment_7_2)
{ after(grammarAccess.getTemporalFunctionExpressionAccess().getFieldAssignment_7_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TemporalFunctionExpression__Group_7__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TemporalFunctionExpression__Group_7__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalFunctionExpression__Group_7__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemporalFunctionExpressionAccess().getRightParenthesisKeyword_7_3()); }

	KEYWORD_2 

{ after(grammarAccess.getTemporalFunctionExpressionAccess().getRightParenthesisKeyword_7_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__TemporalFunctionExpression__Group_8__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TemporalFunctionExpression__Group_8__0__Impl
	rule__TemporalFunctionExpression__Group_8__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalFunctionExpression__Group_8__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemporalFunctionExpressionAccess().getNameAssignment_8_0()); }
(rule__TemporalFunctionExpression__NameAssignment_8_0)
{ after(grammarAccess.getTemporalFunctionExpressionAccess().getNameAssignment_8_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TemporalFunctionExpression__Group_8__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TemporalFunctionExpression__Group_8__1__Impl
	rule__TemporalFunctionExpression__Group_8__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalFunctionExpression__Group_8__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemporalFunctionExpressionAccess().getLeftParenthesisKeyword_8_1()); }

	KEYWORD_1 

{ after(grammarAccess.getTemporalFunctionExpressionAccess().getLeftParenthesisKeyword_8_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TemporalFunctionExpression__Group_8__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TemporalFunctionExpression__Group_8__2__Impl
	rule__TemporalFunctionExpression__Group_8__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalFunctionExpression__Group_8__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemporalFunctionExpressionAccess().getFieldAssignment_8_2()); }
(rule__TemporalFunctionExpression__FieldAssignment_8_2)
{ after(grammarAccess.getTemporalFunctionExpressionAccess().getFieldAssignment_8_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TemporalFunctionExpression__Group_8__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TemporalFunctionExpression__Group_8__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalFunctionExpression__Group_8__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemporalFunctionExpressionAccess().getRightParenthesisKeyword_8_3()); }

	KEYWORD_2 

{ after(grammarAccess.getTemporalFunctionExpressionAccess().getRightParenthesisKeyword_8_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Float__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Float__Group__0__Impl
	rule__Float__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Float__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFloatAccess().getIntegerValueAssignment_0()); }
(rule__Float__IntegerValueAssignment_0)
{ after(grammarAccess.getFloatAccess().getIntegerValueAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Float__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Float__Group__1__Impl
	rule__Float__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Float__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFloatAccess().getFullStopKeyword_1()); }

	KEYWORD_7 

{ after(grammarAccess.getFloatAccess().getFullStopKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Float__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Float__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Float__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFloatAccess().getFractionValueAssignment_2()); }
(rule__Float__FractionValueAssignment_2)
{ after(grammarAccess.getFloatAccess().getFractionValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Subquery__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Subquery__Group__0__Impl
	rule__Subquery__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Subquery__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubqueryAccess().getLeftParenthesisKeyword_0()); }

	KEYWORD_1 

{ after(grammarAccess.getSubqueryAccess().getLeftParenthesisKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Subquery__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Subquery__Group__1__Impl
	rule__Subquery__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Subquery__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubqueryAccess().getSelectStatementParserRuleCall_1()); }
	ruleSelectStatement
{ after(grammarAccess.getSubqueryAccess().getSelectStatementParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Subquery__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Subquery__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Subquery__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubqueryAccess().getRightParenthesisKeyword_2()); }

	KEYWORD_2 

{ after(grammarAccess.getSubqueryAccess().getRightParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__SelectStatement__SelectClauseAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectStatementAccess().getSelectClauseSelectClauseParserRuleCall_0_0()); }
	ruleSelectClause{ after(grammarAccess.getSelectStatementAccess().getSelectClauseSelectClauseParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectStatement__FromClauseAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectStatementAccess().getFromClauseFromClauseParserRuleCall_1_0()); }
	ruleFromClause{ after(grammarAccess.getSelectStatementAccess().getFromClauseFromClauseParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectStatement__WhereClauseAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectStatementAccess().getWhereClauseWhereClauseParserRuleCall_2_0()); }
	ruleWhereClause{ after(grammarAccess.getSelectStatementAccess().getWhereClauseWhereClauseParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectStatement__GroupByClauseAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectStatementAccess().getGroupByClauseGroupByClauseParserRuleCall_3_0()); }
	ruleGroupByClause{ after(grammarAccess.getSelectStatementAccess().getGroupByClauseGroupByClauseParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectStatement__OrderByClauseAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectStatementAccess().getOrderByClauseOrderByClauseParserRuleCall_4_0()); }
	ruleOrderByClause{ after(grammarAccess.getSelectStatementAccess().getOrderByClauseOrderByClauseParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GroupByClause__GroupingAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupByClauseAccess().getGroupingAliasAttributeExpressionParserRuleCall_2_0()); }
	ruleAliasAttributeExpression{ after(grammarAccess.getGroupByClauseAccess().getGroupingAliasAttributeExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GroupByClause__GroupingAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupByClauseAccess().getGroupingAliasAttributeExpressionParserRuleCall_3_1_0()); }
	ruleAliasAttributeExpression{ after(grammarAccess.getGroupByClauseAccess().getGroupingAliasAttributeExpressionParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GroupByClause__HavingClauseAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupByClauseAccess().getHavingClauseHavingClauseParserRuleCall_4_0()); }
	ruleHavingClause{ after(grammarAccess.getGroupByClauseAccess().getHavingClauseHavingClauseParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__HavingClause__HavingAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHavingClauseAccess().getHavingOrExpressionParserRuleCall_1_0()); }
	ruleOrExpression{ after(grammarAccess.getHavingClauseAccess().getHavingOrExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByClause__OrderingAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderByClauseAccess().getOrderingOrderBySpecParserRuleCall_2_0()); }
	ruleOrderBySpec{ after(grammarAccess.getOrderByClauseAccess().getOrderingOrderBySpecParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByClause__OrderingAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderByClauseAccess().getOrderingOrderBySpecParserRuleCall_3_1_0()); }
	ruleOrderBySpec{ after(grammarAccess.getOrderByClauseAccess().getOrderingOrderBySpecParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrderBySpec__DirectionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderBySpecAccess().getDirectionOrderByDirectionEnumRuleCall_1_0()); }
	ruleOrderByDirection{ after(grammarAccess.getOrderBySpecAccess().getDirectionOrderByDirectionEnumRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateStatement__UpdateClauseAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUpdateStatementAccess().getUpdateClauseUpdateClauseParserRuleCall_0_0()); }
	ruleUpdateClause{ after(grammarAccess.getUpdateStatementAccess().getUpdateClauseUpdateClauseParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateStatement__SetClauseAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUpdateStatementAccess().getSetClauseSetClauseParserRuleCall_1_0()); }
	ruleSetClause{ after(grammarAccess.getUpdateStatementAccess().getSetClauseSetClauseParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateStatement__WhereClauseAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUpdateStatementAccess().getWhereClauseWhereClauseParserRuleCall_2_0()); }
	ruleWhereClause{ after(grammarAccess.getUpdateStatementAccess().getWhereClauseWhereClauseParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateClause__FromEntriesAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUpdateClauseAccess().getFromEntriesFromEntryParserRuleCall_1_0()); }
	ruleFromEntry{ after(grammarAccess.getUpdateClauseAccess().getFromEntriesFromEntryParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateClause__FromEntriesAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUpdateClauseAccess().getFromEntriesFromEntryParserRuleCall_2_1_0()); }
	ruleFromEntry{ after(grammarAccess.getUpdateClauseAccess().getFromEntriesFromEntryParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SetClause__ItemsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetClauseAccess().getItemsUpdateItemParserRuleCall_1_0()); }
	ruleUpdateItem{ after(grammarAccess.getSetClauseAccess().getItemsUpdateItemParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SetClause__ItemsAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetClauseAccess().getItemsUpdateItemParserRuleCall_2_1_0()); }
	ruleUpdateItem{ after(grammarAccess.getSetClauseAccess().getItemsUpdateItemParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateItem__AliasAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUpdateItemAccess().getAliasAliasAttributeExpressionParserRuleCall_0_0()); }
	ruleAliasAttributeExpression{ after(grammarAccess.getUpdateItemAccess().getAliasAliasAttributeExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateItem__ValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUpdateItemAccess().getValueLiteralParserRuleCall_2_0()); }
	ruleLiteral{ after(grammarAccess.getUpdateItemAccess().getValueLiteralParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DeleteStatement__DeleteClauseAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeleteStatementAccess().getDeleteClauseDeleteClauseParserRuleCall_0_0()); }
	ruleDeleteClause{ after(grammarAccess.getDeleteStatementAccess().getDeleteClauseDeleteClauseParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DeleteStatement__WhereClauseAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeleteStatementAccess().getWhereClauseWhereClauseParserRuleCall_1_0()); }
	ruleWhereClause{ after(grammarAccess.getDeleteStatementAccess().getWhereClauseWhereClauseParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DeleteClause__FromClauseAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeleteClauseAccess().getFromClauseFromClauseParserRuleCall_1_0()); }
	ruleFromClause{ after(grammarAccess.getDeleteClauseAccess().getFromClauseFromClauseParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectClause__IsDistinctAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectClauseAccess().getIsDistinctDISTINCTKeyword_1_0()); }
(
{ before(grammarAccess.getSelectClauseAccess().getIsDistinctDISTINCTKeyword_1_0()); }

	KEYWORD_77 

{ after(grammarAccess.getSelectClauseAccess().getIsDistinctDISTINCTKeyword_1_0()); }
)

{ after(grammarAccess.getSelectClauseAccess().getIsDistinctDISTINCTKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectClause__ExpressionsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectClauseAccess().getExpressionsSelectExpressionParserRuleCall_2_0()); }
	ruleSelectExpression{ after(grammarAccess.getSelectClauseAccess().getExpressionsSelectExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectClause__ExpressionsAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectClauseAccess().getExpressionsSelectExpressionParserRuleCall_3_1_0()); }
	ruleSelectExpression{ after(grammarAccess.getSelectClauseAccess().getExpressionsSelectExpressionParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AvgAggregate__IsDistinctAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAvgAggregateAccess().getIsDistinctDISTINCTKeyword_2_0()); }
(
{ before(grammarAccess.getAvgAggregateAccess().getIsDistinctDISTINCTKeyword_2_0()); }

	KEYWORD_77 

{ after(grammarAccess.getAvgAggregateAccess().getIsDistinctDISTINCTKeyword_2_0()); }
)

{ after(grammarAccess.getAvgAggregateAccess().getIsDistinctDISTINCTKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AvgAggregate__ItemAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAvgAggregateAccess().getItemAliasAttributeExpressionParserRuleCall_3_0()); }
	ruleAliasAttributeExpression{ after(grammarAccess.getAvgAggregateAccess().getItemAliasAttributeExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CountAggregate__IsDistinctAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCountAggregateAccess().getIsDistinctDISTINCTKeyword_2_0()); }
(
{ before(grammarAccess.getCountAggregateAccess().getIsDistinctDISTINCTKeyword_2_0()); }

	KEYWORD_77 

{ after(grammarAccess.getCountAggregateAccess().getIsDistinctDISTINCTKeyword_2_0()); }
)

{ after(grammarAccess.getCountAggregateAccess().getIsDistinctDISTINCTKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CountAggregate__ItemAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCountAggregateAccess().getItemAliasAttributeExpressionParserRuleCall_3_0()); }
	ruleAliasAttributeExpression{ after(grammarAccess.getCountAggregateAccess().getItemAliasAttributeExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MaxAggregate__IsDistinctAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMaxAggregateAccess().getIsDistinctDISTINCTKeyword_2_0()); }
(
{ before(grammarAccess.getMaxAggregateAccess().getIsDistinctDISTINCTKeyword_2_0()); }

	KEYWORD_77 

{ after(grammarAccess.getMaxAggregateAccess().getIsDistinctDISTINCTKeyword_2_0()); }
)

{ after(grammarAccess.getMaxAggregateAccess().getIsDistinctDISTINCTKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MaxAggregate__ItemAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMaxAggregateAccess().getItemAliasAttributeExpressionParserRuleCall_3_0()); }
	ruleAliasAttributeExpression{ after(grammarAccess.getMaxAggregateAccess().getItemAliasAttributeExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MinAggregate__IsDistinctAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMinAggregateAccess().getIsDistinctDISTINCTKeyword_2_0()); }
(
{ before(grammarAccess.getMinAggregateAccess().getIsDistinctDISTINCTKeyword_2_0()); }

	KEYWORD_77 

{ after(grammarAccess.getMinAggregateAccess().getIsDistinctDISTINCTKeyword_2_0()); }
)

{ after(grammarAccess.getMinAggregateAccess().getIsDistinctDISTINCTKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MinAggregate__ItemAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMinAggregateAccess().getItemAliasAttributeExpressionParserRuleCall_3_0()); }
	ruleAliasAttributeExpression{ after(grammarAccess.getMinAggregateAccess().getItemAliasAttributeExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SumAggregate__IsDistinctAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSumAggregateAccess().getIsDistinctDISTINCTKeyword_2_0()); }
(
{ before(grammarAccess.getSumAggregateAccess().getIsDistinctDISTINCTKeyword_2_0()); }

	KEYWORD_77 

{ after(grammarAccess.getSumAggregateAccess().getIsDistinctDISTINCTKeyword_2_0()); }
)

{ after(grammarAccess.getSumAggregateAccess().getIsDistinctDISTINCTKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SumAggregate__ItemAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSumAggregateAccess().getItemAliasAttributeExpressionParserRuleCall_3_0()); }
	ruleAliasAttributeExpression{ after(grammarAccess.getSumAggregateAccess().getItemAliasAttributeExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectConstructorExpression__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectConstructorExpressionAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getSelectConstructorExpressionAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectConstructorExpression__ItemsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectConstructorExpressionAccess().getItemsAliasAttributeExpressionParserRuleCall_3_0()); }
	ruleAliasAttributeExpression{ after(grammarAccess.getSelectConstructorExpressionAccess().getItemsAliasAttributeExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectConstructorExpression__ItemsAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectConstructorExpressionAccess().getItemsAliasAttributeExpressionParserRuleCall_4_1_0()); }
	ruleAliasAttributeExpression{ after(grammarAccess.getSelectConstructorExpressionAccess().getItemsAliasAttributeExpressionParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FromClause__FromEntriesAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromClauseAccess().getFromEntriesFromClassParserRuleCall_1_0()); }
	ruleFromClass{ after(grammarAccess.getFromClauseAccess().getFromEntriesFromClassParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FromClause__FromEntriesAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromClauseAccess().getFromEntriesFromEntryParserRuleCall_2_1_0()); }
	ruleFromEntry{ after(grammarAccess.getFromClauseAccess().getFromEntriesFromEntryParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getVariableDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FromClassId__TypeAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromClassIdAccess().getTypeQualifiedIdentifierParserRuleCall_0()); }
	ruleQualifiedIdentifier{ after(grammarAccess.getFromClassIdAccess().getTypeQualifiedIdentifierParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FromClassVar__TypeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromClassVarAccess().getTypeQualifiedIdentifierParserRuleCall_0_0()); }
	ruleQualifiedIdentifier{ after(grammarAccess.getFromClassVarAccess().getTypeQualifiedIdentifierParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FromClassVar__VariableAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromClassVarAccess().getVariableVariableDeclarationParserRuleCall_1_0()); }
	ruleVariableDeclaration{ after(grammarAccess.getFromClassVarAccess().getVariableVariableDeclarationParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FromClassVar__JoinsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromClassVarAccess().getJoinsFromJoinParserRuleCall_2_0()); }
	ruleFromJoin{ after(grammarAccess.getFromClassVarAccess().getJoinsFromJoinParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FromCollection__PathAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromCollectionAccess().getPathAliasAttributeExpressionParserRuleCall_2_0()); }
	ruleAliasAttributeExpression{ after(grammarAccess.getFromCollectionAccess().getPathAliasAttributeExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FromCollection__VariableAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromCollectionAccess().getVariableVariableDeclarationParserRuleCall_4_0()); }
	ruleVariableDeclaration{ after(grammarAccess.getFromCollectionAccess().getVariableVariableDeclarationParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Join__IsFetchAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJoinAccess().getIsFetchFETCHKeyword_1_0()); }
(
{ before(grammarAccess.getJoinAccess().getIsFetchFETCHKeyword_1_0()); }

	KEYWORD_54 

{ after(grammarAccess.getJoinAccess().getIsFetchFETCHKeyword_1_0()); }
)

{ after(grammarAccess.getJoinAccess().getIsFetchFETCHKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Join__PathAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJoinAccess().getPathAliasAttributeExpressionParserRuleCall_2_0()); }
	ruleAliasAttributeExpression{ after(grammarAccess.getJoinAccess().getPathAliasAttributeExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Join__VariableAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJoinAccess().getVariableVariableDeclarationParserRuleCall_3_0()); }
	ruleVariableDeclaration{ after(grammarAccess.getJoinAccess().getVariableVariableDeclarationParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LeftJoin__IsOuterAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLeftJoinAccess().getIsOuterOUTERKeyword_1_0()); }
(
{ before(grammarAccess.getLeftJoinAccess().getIsOuterOUTERKeyword_1_0()); }

	KEYWORD_61 

{ after(grammarAccess.getLeftJoinAccess().getIsOuterOUTERKeyword_1_0()); }
)

{ after(grammarAccess.getLeftJoinAccess().getIsOuterOUTERKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LeftJoin__IsFetchAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLeftJoinAccess().getIsFetchFETCHKeyword_3_0()); }
(
{ before(grammarAccess.getLeftJoinAccess().getIsFetchFETCHKeyword_3_0()); }

	KEYWORD_54 

{ after(grammarAccess.getLeftJoinAccess().getIsFetchFETCHKeyword_3_0()); }
)

{ after(grammarAccess.getLeftJoinAccess().getIsFetchFETCHKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LeftJoin__PathAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLeftJoinAccess().getPathAliasAttributeExpressionParserRuleCall_4_0()); }
	ruleAliasAttributeExpression{ after(grammarAccess.getLeftJoinAccess().getPathAliasAttributeExpressionParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LeftJoin__VariableAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLeftJoinAccess().getVariableVariableDeclarationParserRuleCall_5_0()); }
	ruleVariableDeclaration{ after(grammarAccess.getLeftJoinAccess().getVariableVariableDeclarationParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InnerJoin__IsFetchAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInnerJoinAccess().getIsFetchFETCHKeyword_2_0()); }
(
{ before(grammarAccess.getInnerJoinAccess().getIsFetchFETCHKeyword_2_0()); }

	KEYWORD_54 

{ after(grammarAccess.getInnerJoinAccess().getIsFetchFETCHKeyword_2_0()); }
)

{ after(grammarAccess.getInnerJoinAccess().getIsFetchFETCHKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InnerJoin__PathAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInnerJoinAccess().getPathAliasAttributeExpressionParserRuleCall_3_0()); }
	ruleAliasAttributeExpression{ after(grammarAccess.getInnerJoinAccess().getPathAliasAttributeExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InnerJoin__VariableAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInnerJoinAccess().getVariableVariableDeclarationParserRuleCall_4_0()); }
	ruleVariableDeclaration{ after(grammarAccess.getInnerJoinAccess().getVariableVariableDeclarationParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WhereClause__WhereEntryAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhereClauseAccess().getWhereEntryOrExpressionParserRuleCall_1_0()); }
	ruleOrExpression{ after(grammarAccess.getWhereClauseAccess().getWhereEntryOrExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__EntriesAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getEntriesAndExpressionParserRuleCall_1_2_0()); }
	ruleAndExpression{ after(grammarAccess.getOrExpressionAccess().getEntriesAndExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__EntriesAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getEntriesComparisonOperatorExpressionParserRuleCall_1_2_0()); }
	ruleComparisonOperatorExpression{ after(grammarAccess.getAndExpressionAccess().getEntriesComparisonOperatorExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonOperatorExpression__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonOperatorExpressionAccess().getOperatorComparisonOperatorEnumRuleCall_1_1_0()); }
	ruleComparisonOperator{ after(grammarAccess.getComparisonOperatorExpressionAccess().getOperatorComparisonOperatorEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonOperatorExpression__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonOperatorExpressionAccess().getRightAdditionExpressionParserRuleCall_1_2_0()); }
	ruleAdditionExpression{ after(grammarAccess.getComparisonOperatorExpressionAccess().getRightAdditionExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionExpression__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionExpressionAccess().getOperatorAdditionOperatorEnumRuleCall_1_1_0()); }
	ruleAdditionOperator{ after(grammarAccess.getAdditionExpressionAccess().getOperatorAdditionOperatorEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionExpression__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionExpressionAccess().getRightMultiplicationExpressionParserRuleCall_1_2_0()); }
	ruleMultiplicationExpression{ after(grammarAccess.getAdditionExpressionAccess().getRightMultiplicationExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationExpression__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationExpressionAccess().getOperatorMultiplicationOperatorEnumRuleCall_1_1_0()); }
	ruleMultiplicationOperator{ after(grammarAccess.getMultiplicationExpressionAccess().getOperatorMultiplicationOperatorEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationExpression__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationExpressionAccess().getRightUnaryExpressionParserRuleCall_1_2_0()); }
	ruleUnaryExpression{ after(grammarAccess.getMultiplicationExpressionAccess().getRightUnaryExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__UnaryOperatorAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getUnaryOperatorUnaryOperatorEnumRuleCall_0_0()); }
	ruleUnaryOperator{ after(grammarAccess.getUnaryExpressionAccess().getUnaryOperatorUnaryOperatorEnumRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__RightAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getRightConcreteExpressionParserRuleCall_1_0()); }
	ruleConcreteExpression{ after(grammarAccess.getUnaryExpressionAccess().getRightConcreteExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExistsExpression__RightAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExistsExpressionAccess().getRightSubqueryParserRuleCall_1_0()); }
	ruleSubquery{ after(grammarAccess.getExistsExpressionAccess().getRightSubqueryParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AllExpression__RightAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAllExpressionAccess().getRightSubqueryParserRuleCall_1_0()); }
	ruleSubquery{ after(grammarAccess.getAllExpressionAccess().getRightSubqueryParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AnyExpression__RightAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnyExpressionAccess().getRightSubqueryParserRuleCall_1_0()); }
	ruleSubquery{ after(grammarAccess.getAnyExpressionAccess().getRightSubqueryParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SomeExpression__RightAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSomeExpressionAccess().getRightSubqueryParserRuleCall_1_0()); }
	ruleSubquery{ after(grammarAccess.getSomeExpressionAccess().getRightSubqueryParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionExpression__LeftAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectionExpressionAccess().getLeftVariableParserRuleCall_0_0()); }
	ruleVariable{ after(grammarAccess.getCollectionExpressionAccess().getLeftVariableParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionExpression__IsNotAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectionExpressionAccess().getIsNotNOTKeyword_1_0()); }
(
{ before(grammarAccess.getCollectionExpressionAccess().getIsNotNOTKeyword_1_0()); }

	KEYWORD_34 

{ after(grammarAccess.getCollectionExpressionAccess().getIsNotNOTKeyword_1_0()); }
)

{ after(grammarAccess.getCollectionExpressionAccess().getIsNotNOTKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionExpression__RightAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectionExpressionAccess().getRightAliasAttributeExpressionParserRuleCall_4_0()); }
	ruleAliasAttributeExpression{ after(grammarAccess.getCollectionExpressionAccess().getRightAliasAttributeExpressionParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NullComparisonExpression__LeftAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNullComparisonExpressionAccess().getLeftVariableParserRuleCall_0_0()); }
	ruleVariable{ after(grammarAccess.getNullComparisonExpressionAccess().getLeftVariableParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NullComparisonExpression__IsNotAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNullComparisonExpressionAccess().getIsNotNOTKeyword_2_0()); }
(
{ before(grammarAccess.getNullComparisonExpressionAccess().getIsNotNOTKeyword_2_0()); }

	KEYWORD_34 

{ after(grammarAccess.getNullComparisonExpressionAccess().getIsNotNOTKeyword_2_0()); }
)

{ after(grammarAccess.getNullComparisonExpressionAccess().getIsNotNOTKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EmptyComparisonExpression__LeftAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEmptyComparisonExpressionAccess().getLeftVariableParserRuleCall_0_0()); }
	ruleVariable{ after(grammarAccess.getEmptyComparisonExpressionAccess().getLeftVariableParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EmptyComparisonExpression__IsNotAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEmptyComparisonExpressionAccess().getIsNotNOTKeyword_2_0()); }
(
{ before(grammarAccess.getEmptyComparisonExpressionAccess().getIsNotNOTKeyword_2_0()); }

	KEYWORD_34 

{ after(grammarAccess.getEmptyComparisonExpressionAccess().getIsNotNOTKeyword_2_0()); }
)

{ after(grammarAccess.getEmptyComparisonExpressionAccess().getIsNotNOTKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LikeExpression__LeftAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLikeExpressionAccess().getLeftVariableParserRuleCall_0_0()); }
	ruleVariable{ after(grammarAccess.getLikeExpressionAccess().getLeftVariableParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LikeExpression__IsNotAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLikeExpressionAccess().getIsNotNOTKeyword_1_0()); }
(
{ before(grammarAccess.getLikeExpressionAccess().getIsNotNOTKeyword_1_0()); }

	KEYWORD_34 

{ after(grammarAccess.getLikeExpressionAccess().getIsNotNOTKeyword_1_0()); }
)

{ after(grammarAccess.getLikeExpressionAccess().getIsNotNOTKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LikeExpression__RightAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLikeExpressionAccess().getRightVariableParserRuleCall_3_0()); }
	ruleVariable{ after(grammarAccess.getLikeExpressionAccess().getRightVariableParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InSeqExpression__LeftAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInSeqExpressionAccess().getLeftVariableParserRuleCall_0_0()); }
	ruleVariable{ after(grammarAccess.getInSeqExpressionAccess().getLeftVariableParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InSeqExpression__IsNotAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInSeqExpressionAccess().getIsNotNOTKeyword_1_0()); }
(
{ before(grammarAccess.getInSeqExpressionAccess().getIsNotNOTKeyword_1_0()); }

	KEYWORD_34 

{ after(grammarAccess.getInSeqExpressionAccess().getIsNotNOTKeyword_1_0()); }
)

{ after(grammarAccess.getInSeqExpressionAccess().getIsNotNOTKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InSeqExpression__ItemsAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInSeqExpressionAccess().getItemsVariableParserRuleCall_4_0()); }
	ruleVariable{ after(grammarAccess.getInSeqExpressionAccess().getItemsVariableParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InSeqExpression__ItemsAssignment_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInSeqExpressionAccess().getItemsVariableParserRuleCall_5_1_0()); }
	ruleVariable{ after(grammarAccess.getInSeqExpressionAccess().getItemsVariableParserRuleCall_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InQueryExpression__LeftAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInQueryExpressionAccess().getLeftVariableParserRuleCall_0_0()); }
	ruleVariable{ after(grammarAccess.getInQueryExpressionAccess().getLeftVariableParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InQueryExpression__IsNotAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInQueryExpressionAccess().getIsNotNOTKeyword_1_0()); }
(
{ before(grammarAccess.getInQueryExpressionAccess().getIsNotNOTKeyword_1_0()); }

	KEYWORD_34 

{ after(grammarAccess.getInQueryExpressionAccess().getIsNotNOTKeyword_1_0()); }
)

{ after(grammarAccess.getInQueryExpressionAccess().getIsNotNOTKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InQueryExpression__QueryAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInQueryExpressionAccess().getQuerySubqueryParserRuleCall_3_0()); }
	ruleSubquery{ after(grammarAccess.getInQueryExpressionAccess().getQuerySubqueryParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BetweenExpression__LeftAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBetweenExpressionAccess().getLeftVariableParserRuleCall_0_0()); }
	ruleVariable{ after(grammarAccess.getBetweenExpressionAccess().getLeftVariableParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BetweenExpression__IsNotAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBetweenExpressionAccess().getIsNotNOTKeyword_1_0()); }
(
{ before(grammarAccess.getBetweenExpressionAccess().getIsNotNOTKeyword_1_0()); }

	KEYWORD_34 

{ after(grammarAccess.getBetweenExpressionAccess().getIsNotNOTKeyword_1_0()); }
)

{ after(grammarAccess.getBetweenExpressionAccess().getIsNotNOTKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BetweenExpression__MinAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBetweenExpressionAccess().getMinLiteralParserRuleCall_3_0()); }
	ruleLiteral{ after(grammarAccess.getBetweenExpressionAccess().getMinLiteralParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BetweenExpression__MaxAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBetweenExpressionAccess().getMaxLiteralParserRuleCall_5_0()); }
	ruleLiteral{ after(grammarAccess.getBetweenExpressionAccess().getMaxLiteralParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AliasAttributeExpression__AliasAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAliasAttributeExpressionAccess().getAliasVariableDeclarationCrossReference_0_0()); }
(
{ before(grammarAccess.getAliasAttributeExpressionAccess().getAliasVariableDeclarationIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getAliasAttributeExpressionAccess().getAliasVariableDeclarationIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getAliasAttributeExpressionAccess().getAliasVariableDeclarationCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AliasAttributeExpression__AttributesAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAliasAttributeExpressionAccess().getAttributesIDTerminalRuleCall_1_1_0()); }
	RULE_ID{ after(grammarAccess.getAliasAttributeExpressionAccess().getAttributesIDTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterExpression__NameAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterExpressionAccess().getNameParameterNameParserRuleCall_0_1_0()); }
	ruleParameterName{ after(grammarAccess.getParameterExpressionAccess().getNameParameterNameParserRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterExpression__IndexAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterExpressionAccess().getIndexINTTerminalRuleCall_1_1_0()); }
	RULE_INT{ after(grammarAccess.getParameterExpressionAccess().getIndexINTTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringFunctionExpression__NameAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringFunctionExpressionAccess().getNameCONCATKeyword_0_0_0()); }
(
{ before(grammarAccess.getStringFunctionExpressionAccess().getNameCONCATKeyword_0_0_0()); }

	KEYWORD_64 

{ after(grammarAccess.getStringFunctionExpressionAccess().getNameCONCATKeyword_0_0_0()); }
)

{ after(grammarAccess.getStringFunctionExpressionAccess().getNameCONCATKeyword_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringFunctionExpression__FieldsAssignment_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringFunctionExpressionAccess().getFieldsConcreteExpressionParserRuleCall_0_2_0()); }
	ruleConcreteExpression{ after(grammarAccess.getStringFunctionExpressionAccess().getFieldsConcreteExpressionParserRuleCall_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringFunctionExpression__FieldsAssignment_0_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringFunctionExpressionAccess().getFieldsConcreteExpressionParserRuleCall_0_3_1_0()); }
	ruleConcreteExpression{ after(grammarAccess.getStringFunctionExpressionAccess().getFieldsConcreteExpressionParserRuleCall_0_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringFunctionExpression__NameAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringFunctionExpressionAccess().getNameSUBSTRINGKeyword_1_0_0()); }
(
{ before(grammarAccess.getStringFunctionExpressionAccess().getNameSUBSTRINGKeyword_1_0_0()); }

	KEYWORD_79 

{ after(grammarAccess.getStringFunctionExpressionAccess().getNameSUBSTRINGKeyword_1_0_0()); }
)

{ after(grammarAccess.getStringFunctionExpressionAccess().getNameSUBSTRINGKeyword_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringFunctionExpression__FieldAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringFunctionExpressionAccess().getFieldConcreteExpressionParserRuleCall_1_2_0()); }
	ruleConcreteExpression{ after(grammarAccess.getStringFunctionExpressionAccess().getFieldConcreteExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringFunctionExpression__StartPosAssignment_1_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringFunctionExpressionAccess().getStartPosAdditionExpressionParserRuleCall_1_4_0()); }
	ruleAdditionExpression{ after(grammarAccess.getStringFunctionExpressionAccess().getStartPosAdditionExpressionParserRuleCall_1_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringFunctionExpression__LengthAssignment_1_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringFunctionExpressionAccess().getLengthAdditionExpressionParserRuleCall_1_5_1_0()); }
	ruleAdditionExpression{ after(grammarAccess.getStringFunctionExpressionAccess().getLengthAdditionExpressionParserRuleCall_1_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringFunctionExpression__NameAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringFunctionExpressionAccess().getNameTRIMKeyword_2_0_0()); }
(
{ before(grammarAccess.getStringFunctionExpressionAccess().getNameTRIMKeyword_2_0_0()); }

	KEYWORD_48 

{ after(grammarAccess.getStringFunctionExpressionAccess().getNameTRIMKeyword_2_0_0()); }
)

{ after(grammarAccess.getStringFunctionExpressionAccess().getNameTRIMKeyword_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringFunctionExpression__TrimSpecAssignment_2_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringFunctionExpressionAccess().getTrimSpecTrimSpecEnumRuleCall_2_2_0()); }
	ruleTrimSpec{ after(grammarAccess.getStringFunctionExpressionAccess().getTrimSpecTrimSpecEnumRuleCall_2_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringFunctionExpression__TrimCharAssignment_2_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringFunctionExpressionAccess().getTrimCharConcreteExpressionParserRuleCall_2_3_0()); }
	ruleConcreteExpression{ after(grammarAccess.getStringFunctionExpressionAccess().getTrimCharConcreteExpressionParserRuleCall_2_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringFunctionExpression__FieldAssignment_2_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringFunctionExpressionAccess().getFieldVariableParserRuleCall_2_5_0()); }
	ruleVariable{ after(grammarAccess.getStringFunctionExpressionAccess().getFieldVariableParserRuleCall_2_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringFunctionExpression__NameAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringFunctionExpressionAccess().getNameLOWERKeyword_3_0_0()); }
(
{ before(grammarAccess.getStringFunctionExpressionAccess().getNameLOWERKeyword_3_0_0()); }

	KEYWORD_58 

{ after(grammarAccess.getStringFunctionExpressionAccess().getNameLOWERKeyword_3_0_0()); }
)

{ after(grammarAccess.getStringFunctionExpressionAccess().getNameLOWERKeyword_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringFunctionExpression__FieldAssignment_3_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringFunctionExpressionAccess().getFieldConcreteExpressionParserRuleCall_3_2_0()); }
	ruleConcreteExpression{ after(grammarAccess.getStringFunctionExpressionAccess().getFieldConcreteExpressionParserRuleCall_3_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringFunctionExpression__NameAssignment_4_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringFunctionExpressionAccess().getNameUPPERKeyword_4_0_0()); }
(
{ before(grammarAccess.getStringFunctionExpressionAccess().getNameUPPERKeyword_4_0_0()); }

	KEYWORD_62 

{ after(grammarAccess.getStringFunctionExpressionAccess().getNameUPPERKeyword_4_0_0()); }
)

{ after(grammarAccess.getStringFunctionExpressionAccess().getNameUPPERKeyword_4_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringFunctionExpression__FieldAssignment_4_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringFunctionExpressionAccess().getFieldConcreteExpressionParserRuleCall_4_2_0()); }
	ruleConcreteExpression{ after(grammarAccess.getStringFunctionExpressionAccess().getFieldConcreteExpressionParserRuleCall_4_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringFunctionExpression__NameAssignment_5_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringFunctionExpressionAccess().getNameLENGTHKeyword_5_0_0()); }
(
{ before(grammarAccess.getStringFunctionExpressionAccess().getNameLENGTHKeyword_5_0_0()); }

	KEYWORD_68 

{ after(grammarAccess.getStringFunctionExpressionAccess().getNameLENGTHKeyword_5_0_0()); }
)

{ after(grammarAccess.getStringFunctionExpressionAccess().getNameLENGTHKeyword_5_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringFunctionExpression__FieldAssignment_5_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringFunctionExpressionAccess().getFieldConcreteExpressionParserRuleCall_5_2_0()); }
	ruleConcreteExpression{ after(grammarAccess.getStringFunctionExpressionAccess().getFieldConcreteExpressionParserRuleCall_5_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringFunctionExpression__NameAssignment_6_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringFunctionExpressionAccess().getNameLOCATEKeyword_6_0_0()); }
(
{ before(grammarAccess.getStringFunctionExpressionAccess().getNameLOCATEKeyword_6_0_0()); }

	KEYWORD_69 

{ after(grammarAccess.getStringFunctionExpressionAccess().getNameLOCATEKeyword_6_0_0()); }
)

{ after(grammarAccess.getStringFunctionExpressionAccess().getNameLOCATEKeyword_6_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringFunctionExpression__FieldsAssignment_6_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringFunctionExpressionAccess().getFieldsConcreteExpressionParserRuleCall_6_2_0()); }
	ruleConcreteExpression{ after(grammarAccess.getStringFunctionExpressionAccess().getFieldsConcreteExpressionParserRuleCall_6_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringFunctionExpression__FieldsAssignment_6_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringFunctionExpressionAccess().getFieldsConcreteExpressionParserRuleCall_6_4_0()); }
	ruleConcreteExpression{ after(grammarAccess.getStringFunctionExpressionAccess().getFieldsConcreteExpressionParserRuleCall_6_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringFunctionExpression__StartPosAssignment_6_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringFunctionExpressionAccess().getStartPosAdditionExpressionParserRuleCall_6_5_1_0()); }
	ruleAdditionExpression{ after(grammarAccess.getStringFunctionExpressionAccess().getStartPosAdditionExpressionParserRuleCall_6_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticFunctionExpression__NameAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArithmeticFunctionExpressionAccess().getNameABSKeyword_0_0_0()); }
(
{ before(grammarAccess.getArithmeticFunctionExpressionAccess().getNameABSKeyword_0_0_0()); }

	KEYWORD_23 

{ after(grammarAccess.getArithmeticFunctionExpressionAccess().getNameABSKeyword_0_0_0()); }
)

{ after(grammarAccess.getArithmeticFunctionExpressionAccess().getNameABSKeyword_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticFunctionExpression__FieldAssignment_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArithmeticFunctionExpressionAccess().getFieldAdditionExpressionParserRuleCall_0_2_0()); }
	ruleAdditionExpression{ after(grammarAccess.getArithmeticFunctionExpressionAccess().getFieldAdditionExpressionParserRuleCall_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticFunctionExpression__NameAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArithmeticFunctionExpressionAccess().getNameSQRTKeyword_1_0_0()); }
(
{ before(grammarAccess.getArithmeticFunctionExpressionAccess().getNameSQRTKeyword_1_0_0()); }

	KEYWORD_47 

{ after(grammarAccess.getArithmeticFunctionExpressionAccess().getNameSQRTKeyword_1_0_0()); }
)

{ after(grammarAccess.getArithmeticFunctionExpressionAccess().getNameSQRTKeyword_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticFunctionExpression__FieldAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArithmeticFunctionExpressionAccess().getFieldAdditionExpressionParserRuleCall_1_2_0()); }
	ruleAdditionExpression{ after(grammarAccess.getArithmeticFunctionExpressionAccess().getFieldAdditionExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticFunctionExpression__NameAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArithmeticFunctionExpressionAccess().getNameMODKeyword_2_0_0()); }
(
{ before(grammarAccess.getArithmeticFunctionExpressionAccess().getNameMODKeyword_2_0_0()); }

	KEYWORD_32 

{ after(grammarAccess.getArithmeticFunctionExpressionAccess().getNameMODKeyword_2_0_0()); }
)

{ after(grammarAccess.getArithmeticFunctionExpressionAccess().getNameMODKeyword_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticFunctionExpression__FieldsAssignment_2_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArithmeticFunctionExpressionAccess().getFieldsAdditionExpressionParserRuleCall_2_2_0()); }
	ruleAdditionExpression{ after(grammarAccess.getArithmeticFunctionExpressionAccess().getFieldsAdditionExpressionParserRuleCall_2_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticFunctionExpression__FieldsAssignment_2_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArithmeticFunctionExpressionAccess().getFieldsAdditionExpressionParserRuleCall_2_4_0()); }
	ruleAdditionExpression{ after(grammarAccess.getArithmeticFunctionExpressionAccess().getFieldsAdditionExpressionParserRuleCall_2_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionFunctionExpression__NameAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectionFunctionExpressionAccess().getNameINDEXKeyword_0_0_0()); }
(
{ before(grammarAccess.getCollectionFunctionExpressionAccess().getNameINDEXKeyword_0_0_0()); }

	KEYWORD_56 

{ after(grammarAccess.getCollectionFunctionExpressionAccess().getNameINDEXKeyword_0_0_0()); }
)

{ after(grammarAccess.getCollectionFunctionExpressionAccess().getNameINDEXKeyword_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionFunctionExpression__FieldAssignment_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectionFunctionExpressionAccess().getFieldVariableParserRuleCall_0_2_0()); }
	ruleVariable{ after(grammarAccess.getCollectionFunctionExpressionAccess().getFieldVariableParserRuleCall_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionFunctionExpression__NameAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectionFunctionExpressionAccess().getNameSIZEKeyword_1_0_0()); }
(
{ before(grammarAccess.getCollectionFunctionExpressionAccess().getNameSIZEKeyword_1_0_0()); }

	KEYWORD_45 

{ after(grammarAccess.getCollectionFunctionExpressionAccess().getNameSIZEKeyword_1_0_0()); }
)

{ after(grammarAccess.getCollectionFunctionExpressionAccess().getNameSIZEKeyword_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionFunctionExpression__FieldAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectionFunctionExpressionAccess().getFieldVariableParserRuleCall_1_2_0()); }
	ruleVariable{ after(grammarAccess.getCollectionFunctionExpressionAccess().getFieldVariableParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalFunctionExpression__NameAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemporalFunctionExpressionAccess().getNameCURRENT_DATEKeyword_0_0_0()); }
(
{ before(grammarAccess.getTemporalFunctionExpressionAccess().getNameCURRENT_DATEKeyword_0_0_0()); }

	KEYWORD_80 

{ after(grammarAccess.getTemporalFunctionExpressionAccess().getNameCURRENT_DATEKeyword_0_0_0()); }
)

{ after(grammarAccess.getTemporalFunctionExpressionAccess().getNameCURRENT_DATEKeyword_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalFunctionExpression__NameAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemporalFunctionExpressionAccess().getNameCURRENT_TIMEKeyword_1_0_0()); }
(
{ before(grammarAccess.getTemporalFunctionExpressionAccess().getNameCURRENT_TIMEKeyword_1_0_0()); }

	KEYWORD_81 

{ after(grammarAccess.getTemporalFunctionExpressionAccess().getNameCURRENT_TIMEKeyword_1_0_0()); }
)

{ after(grammarAccess.getTemporalFunctionExpressionAccess().getNameCURRENT_TIMEKeyword_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalFunctionExpression__NameAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemporalFunctionExpressionAccess().getNameCURRENT_TIMESTAMPKeyword_2_0_0()); }
(
{ before(grammarAccess.getTemporalFunctionExpressionAccess().getNameCURRENT_TIMESTAMPKeyword_2_0_0()); }

	KEYWORD_82 

{ after(grammarAccess.getTemporalFunctionExpressionAccess().getNameCURRENT_TIMESTAMPKeyword_2_0_0()); }
)

{ after(grammarAccess.getTemporalFunctionExpressionAccess().getNameCURRENT_TIMESTAMPKeyword_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalFunctionExpression__NameAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemporalFunctionExpressionAccess().getNameYEARKeyword_3_0_0()); }
(
{ before(grammarAccess.getTemporalFunctionExpressionAccess().getNameYEARKeyword_3_0_0()); }

	KEYWORD_50 

{ after(grammarAccess.getTemporalFunctionExpressionAccess().getNameYEARKeyword_3_0_0()); }
)

{ after(grammarAccess.getTemporalFunctionExpressionAccess().getNameYEARKeyword_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalFunctionExpression__FieldAssignment_3_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemporalFunctionExpressionAccess().getFieldAdditionExpressionParserRuleCall_3_2_0()); }
	ruleAdditionExpression{ after(grammarAccess.getTemporalFunctionExpressionAccess().getFieldAdditionExpressionParserRuleCall_3_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalFunctionExpression__NameAssignment_4_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemporalFunctionExpressionAccess().getNameMONTHKeyword_4_0_0()); }
(
{ before(grammarAccess.getTemporalFunctionExpressionAccess().getNameMONTHKeyword_4_0_0()); }

	KEYWORD_59 

{ after(grammarAccess.getTemporalFunctionExpressionAccess().getNameMONTHKeyword_4_0_0()); }
)

{ after(grammarAccess.getTemporalFunctionExpressionAccess().getNameMONTHKeyword_4_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalFunctionExpression__FieldAssignment_4_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemporalFunctionExpressionAccess().getFieldAdditionExpressionParserRuleCall_4_2_0()); }
	ruleAdditionExpression{ after(grammarAccess.getTemporalFunctionExpressionAccess().getFieldAdditionExpressionParserRuleCall_4_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalFunctionExpression__NameAssignment_5_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemporalFunctionExpressionAccess().getNameDAYKeyword_5_0_0()); }
(
{ before(grammarAccess.getTemporalFunctionExpressionAccess().getNameDAYKeyword_5_0_0()); }

	KEYWORD_29 

{ after(grammarAccess.getTemporalFunctionExpressionAccess().getNameDAYKeyword_5_0_0()); }
)

{ after(grammarAccess.getTemporalFunctionExpressionAccess().getNameDAYKeyword_5_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalFunctionExpression__FieldAssignment_5_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemporalFunctionExpressionAccess().getFieldAdditionExpressionParserRuleCall_5_2_0()); }
	ruleAdditionExpression{ after(grammarAccess.getTemporalFunctionExpressionAccess().getFieldAdditionExpressionParserRuleCall_5_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalFunctionExpression__NameAssignment_6_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemporalFunctionExpressionAccess().getNameHOURKeyword_6_0_0()); }
(
{ before(grammarAccess.getTemporalFunctionExpressionAccess().getNameHOURKeyword_6_0_0()); }

	KEYWORD_40 

{ after(grammarAccess.getTemporalFunctionExpressionAccess().getNameHOURKeyword_6_0_0()); }
)

{ after(grammarAccess.getTemporalFunctionExpressionAccess().getNameHOURKeyword_6_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalFunctionExpression__FieldAssignment_6_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemporalFunctionExpressionAccess().getFieldAdditionExpressionParserRuleCall_6_2_0()); }
	ruleAdditionExpression{ after(grammarAccess.getTemporalFunctionExpressionAccess().getFieldAdditionExpressionParserRuleCall_6_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalFunctionExpression__NameAssignment_7_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemporalFunctionExpressionAccess().getNameMINUTEKeyword_7_0_0()); }
(
{ before(grammarAccess.getTemporalFunctionExpressionAccess().getNameMINUTEKeyword_7_0_0()); }

	KEYWORD_71 

{ after(grammarAccess.getTemporalFunctionExpressionAccess().getNameMINUTEKeyword_7_0_0()); }
)

{ after(grammarAccess.getTemporalFunctionExpressionAccess().getNameMINUTEKeyword_7_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalFunctionExpression__FieldAssignment_7_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemporalFunctionExpressionAccess().getFieldAdditionExpressionParserRuleCall_7_2_0()); }
	ruleAdditionExpression{ after(grammarAccess.getTemporalFunctionExpressionAccess().getFieldAdditionExpressionParserRuleCall_7_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalFunctionExpression__NameAssignment_8_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemporalFunctionExpressionAccess().getNameSECONDKeyword_8_0_0()); }
(
{ before(grammarAccess.getTemporalFunctionExpressionAccess().getNameSECONDKeyword_8_0_0()); }

	KEYWORD_72 

{ after(grammarAccess.getTemporalFunctionExpressionAccess().getNameSECONDKeyword_8_0_0()); }
)

{ after(grammarAccess.getTemporalFunctionExpressionAccess().getNameSECONDKeyword_8_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalFunctionExpression__FieldAssignment_8_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemporalFunctionExpressionAccess().getFieldAdditionExpressionParserRuleCall_8_2_0()); }
	ruleAdditionExpression{ after(grammarAccess.getTemporalFunctionExpressionAccess().getFieldAdditionExpressionParserRuleCall_8_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerLiteral__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerLiteralAccess().getValueINTTerminalRuleCall_0()); }
	RULE_INT{ after(grammarAccess.getIntegerLiteralAccess().getValueINTTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FloatLiteral__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFloatLiteralAccess().getValueFloatParserRuleCall_0()); }
	ruleFloat{ after(grammarAccess.getFloatLiteralAccess().getValueFloatParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Float__IntegerValueAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFloatAccess().getIntegerValueINTTerminalRuleCall_0_0()); }
	RULE_INT{ after(grammarAccess.getFloatAccess().getIntegerValueINTTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Float__FractionValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFloatAccess().getFractionValueINTTerminalRuleCall_2_0()); }
	RULE_INT{ after(grammarAccess.getFloatAccess().getFractionValueINTTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringLiteral__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_0()); }
	RULE_STRING{ after(grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NullLiteral__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNullLiteralAccess().getValueNULLKeyword_0()); }
(
{ before(grammarAccess.getNullLiteralAccess().getValueNULLKeyword_0()); }

	KEYWORD_44 

{ after(grammarAccess.getNullLiteralAccess().getValueNULLKeyword_0()); }
)

{ after(grammarAccess.getNullLiteralAccess().getValueNULLKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanLiteral__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanLiteralAccess().getValueAlternatives_0()); }
(rule__BooleanLiteral__ValueAlternatives_0)
{ after(grammarAccess.getBooleanLiteralAccess().getValueAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


