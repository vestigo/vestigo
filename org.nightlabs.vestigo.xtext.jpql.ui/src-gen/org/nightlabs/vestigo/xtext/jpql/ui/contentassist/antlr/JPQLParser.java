/*
* generated by Xtext
*/
package org.nightlabs.vestigo.xtext.jpql.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.nightlabs.vestigo.xtext.jpql.services.JPQLGrammarAccess;

public class JPQLParser extends AbstractContentAssistParser {
	
	@Inject
	private JPQLGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.nightlabs.vestigo.xtext.jpql.ui.contentassist.antlr.internal.InternalJPQLParser createParser() {
		org.nightlabs.vestigo.xtext.jpql.ui.contentassist.antlr.internal.InternalJPQLParser result = new org.nightlabs.vestigo.xtext.jpql.ui.contentassist.antlr.internal.InternalJPQLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getJPQLQueryAccess().getAlternatives(), "rule__JPQLQuery__Alternatives");
					put(grammarAccess.getSelectExpressionAccess().getAlternatives(), "rule__SelectExpression__Alternatives");
					put(grammarAccess.getSelectAggregateExpressionAccess().getAlternatives(), "rule__SelectAggregateExpression__Alternatives");
					put(grammarAccess.getFromEntryAccess().getAlternatives(), "rule__FromEntry__Alternatives");
					put(grammarAccess.getFromClassAccess().getAlternatives(), "rule__FromClass__Alternatives");
					put(grammarAccess.getFromJoinAccess().getAlternatives(), "rule__FromJoin__Alternatives");
					put(grammarAccess.getConcreteExpressionAccess().getAlternatives(), "rule__ConcreteExpression__Alternatives");
					put(grammarAccess.getInExpressionAccess().getAlternatives(), "rule__InExpression__Alternatives");
					put(grammarAccess.getVariableAccess().getAlternatives(), "rule__Variable__Alternatives");
					put(grammarAccess.getExpressionTermAccess().getAlternatives(), "rule__ExpressionTerm__Alternatives");
					put(grammarAccess.getFunctionAccess().getAlternatives(), "rule__Function__Alternatives");
					put(grammarAccess.getStringFunctionNameAccess().getAlternatives(), "rule__StringFunctionName__Alternatives");
					put(grammarAccess.getNumericFunctionNameAccess().getAlternatives(), "rule__NumericFunctionName__Alternatives");
					put(grammarAccess.getDateTimeFunctionNameAccess().getAlternatives(), "rule__DateTimeFunctionName__Alternatives");
					put(grammarAccess.getValueAccess().getAlternatives(), "rule__Value__Alternatives");
					put(grammarAccess.getBooleanLiteralAccess().getValueAlternatives_0(), "rule__BooleanLiteral__ValueAlternatives_0");
					put(grammarAccess.getOrderByDirectionAccess().getAlternatives(), "rule__OrderByDirection__Alternatives");
					put(grammarAccess.getUnaryOperatorAccess().getAlternatives(), "rule__UnaryOperator__Alternatives");
					put(grammarAccess.getAdditionOperatorAccess().getAlternatives(), "rule__AdditionOperator__Alternatives");
					put(grammarAccess.getMultiplicationOperatorAccess().getAlternatives(), "rule__MultiplicationOperator__Alternatives");
					put(grammarAccess.getComparisonOperatorAccess().getAlternatives(), "rule__ComparisonOperator__Alternatives");
					put(grammarAccess.getSelectStatementAccess().getGroup(), "rule__SelectStatement__Group__0");
					put(grammarAccess.getGroupByClauseAccess().getGroup(), "rule__GroupByClause__Group__0");
					put(grammarAccess.getGroupByClauseAccess().getGroup_3(), "rule__GroupByClause__Group_3__0");
					put(grammarAccess.getHavingClauseAccess().getGroup(), "rule__HavingClause__Group__0");
					put(grammarAccess.getOrderByClauseAccess().getGroup(), "rule__OrderByClause__Group__0");
					put(grammarAccess.getOrderByClauseAccess().getGroup_3(), "rule__OrderByClause__Group_3__0");
					put(grammarAccess.getOrderBySpecAccess().getGroup(), "rule__OrderBySpec__Group__0");
					put(grammarAccess.getUpdateStatementAccess().getGroup(), "rule__UpdateStatement__Group__0");
					put(grammarAccess.getUpdateClauseAccess().getGroup(), "rule__UpdateClause__Group__0");
					put(grammarAccess.getUpdateClauseAccess().getGroup_2(), "rule__UpdateClause__Group_2__0");
					put(grammarAccess.getSetClauseAccess().getGroup(), "rule__SetClause__Group__0");
					put(grammarAccess.getSetClauseAccess().getGroup_2(), "rule__SetClause__Group_2__0");
					put(grammarAccess.getUpdateItemAccess().getGroup(), "rule__UpdateItem__Group__0");
					put(grammarAccess.getDeleteStatementAccess().getGroup(), "rule__DeleteStatement__Group__0");
					put(grammarAccess.getDeleteClauseAccess().getGroup(), "rule__DeleteClause__Group__0");
					put(grammarAccess.getSelectClauseAccess().getGroup(), "rule__SelectClause__Group__0");
					put(grammarAccess.getSelectClauseAccess().getGroup_3(), "rule__SelectClause__Group_3__0");
					put(grammarAccess.getAvgAggregateAccess().getGroup(), "rule__AvgAggregate__Group__0");
					put(grammarAccess.getCountAggregateAccess().getGroup(), "rule__CountAggregate__Group__0");
					put(grammarAccess.getMaxAggregateAccess().getGroup(), "rule__MaxAggregate__Group__0");
					put(grammarAccess.getMinAggregateAccess().getGroup(), "rule__MinAggregate__Group__0");
					put(grammarAccess.getSumAggregateAccess().getGroup(), "rule__SumAggregate__Group__0");
					put(grammarAccess.getSelectConstructorExpressionAccess().getGroup(), "rule__SelectConstructorExpression__Group__0");
					put(grammarAccess.getSelectConstructorExpressionAccess().getGroup_4(), "rule__SelectConstructorExpression__Group_4__0");
					put(grammarAccess.getFromClauseAccess().getGroup(), "rule__FromClause__Group__0");
					put(grammarAccess.getFromClauseAccess().getGroup_2(), "rule__FromClause__Group_2__0");
					put(grammarAccess.getVariableDeclarationAccess().getGroup(), "rule__VariableDeclaration__Group__0");
					put(grammarAccess.getQualifiedIdentifierAccess().getGroup(), "rule__QualifiedIdentifier__Group__0");
					put(grammarAccess.getQualifiedIdentifierAccess().getGroup_1(), "rule__QualifiedIdentifier__Group_1__0");
					put(grammarAccess.getFromClassVarAccess().getGroup(), "rule__FromClassVar__Group__0");
					put(grammarAccess.getFromCollectionAccess().getGroup(), "rule__FromCollection__Group__0");
					put(grammarAccess.getJoinAccess().getGroup(), "rule__Join__Group__0");
					put(grammarAccess.getLeftJoinAccess().getGroup(), "rule__LeftJoin__Group__0");
					put(grammarAccess.getInnerJoinAccess().getGroup(), "rule__InnerJoin__Group__0");
					put(grammarAccess.getWhereClauseAccess().getGroup(), "rule__WhereClause__Group__0");
					put(grammarAccess.getOrExpressionAccess().getGroup(), "rule__OrExpression__Group__0");
					put(grammarAccess.getOrExpressionAccess().getGroup_1(), "rule__OrExpression__Group_1__0");
					put(grammarAccess.getOrExpressionAccess().getGroup_1_1(), "rule__OrExpression__Group_1_1__0");
					put(grammarAccess.getAndExpressionAccess().getGroup(), "rule__AndExpression__Group__0");
					put(grammarAccess.getAndExpressionAccess().getGroup_1(), "rule__AndExpression__Group_1__0");
					put(grammarAccess.getAndExpressionAccess().getGroup_1_1(), "rule__AndExpression__Group_1_1__0");
					put(grammarAccess.getComparisonOperatorExpressionAccess().getGroup(), "rule__ComparisonOperatorExpression__Group__0");
					put(grammarAccess.getComparisonOperatorExpressionAccess().getGroup_1(), "rule__ComparisonOperatorExpression__Group_1__0");
					put(grammarAccess.getAdditionExpressionAccess().getGroup(), "rule__AdditionExpression__Group__0");
					put(grammarAccess.getAdditionExpressionAccess().getGroup_1(), "rule__AdditionExpression__Group_1__0");
					put(grammarAccess.getMultiplicationExpressionAccess().getGroup(), "rule__MultiplicationExpression__Group__0");
					put(grammarAccess.getMultiplicationExpressionAccess().getGroup_1(), "rule__MultiplicationExpression__Group_1__0");
					put(grammarAccess.getUnaryExpressionAccess().getGroup(), "rule__UnaryExpression__Group__0");
					put(grammarAccess.getParenthesesExpressionAccess().getGroup(), "rule__ParenthesesExpression__Group__0");
					put(grammarAccess.getExistsExpressionAccess().getGroup(), "rule__ExistsExpression__Group__0");
					put(grammarAccess.getAllExpressionAccess().getGroup(), "rule__AllExpression__Group__0");
					put(grammarAccess.getAnyExpressionAccess().getGroup(), "rule__AnyExpression__Group__0");
					put(grammarAccess.getSomeExpressionAccess().getGroup(), "rule__SomeExpression__Group__0");
					put(grammarAccess.getCollectionExpressionAccess().getGroup(), "rule__CollectionExpression__Group__0");
					put(grammarAccess.getNullComparisonExpressionAccess().getGroup(), "rule__NullComparisonExpression__Group__0");
					put(grammarAccess.getEmptyComparisonExpressionAccess().getGroup(), "rule__EmptyComparisonExpression__Group__0");
					put(grammarAccess.getLikeExpressionAccess().getGroup(), "rule__LikeExpression__Group__0");
					put(grammarAccess.getInSeqExpressionAccess().getGroup(), "rule__InSeqExpression__Group__0");
					put(grammarAccess.getInSeqExpressionAccess().getGroup_5(), "rule__InSeqExpression__Group_5__0");
					put(grammarAccess.getInQueryExpressionAccess().getGroup(), "rule__InQueryExpression__Group__0");
					put(grammarAccess.getBetweenExpressionAccess().getGroup(), "rule__BetweenExpression__Group__0");
					put(grammarAccess.getAliasAttributeExpressionAccess().getGroup(), "rule__AliasAttributeExpression__Group__0");
					put(grammarAccess.getAliasAttributeExpressionAccess().getGroup_1(), "rule__AliasAttributeExpression__Group_1__0");
					put(grammarAccess.getParameterExpressionAccess().getGroup(), "rule__ParameterExpression__Group__0");
					put(grammarAccess.getStringFunctionAccess().getGroup(), "rule__StringFunction__Group__0");
					put(grammarAccess.getStringFunctionAccess().getGroup_3(), "rule__StringFunction__Group_3__0");
					put(grammarAccess.getNumericFunctionAccess().getGroup(), "rule__NumericFunction__Group__0");
					put(grammarAccess.getNumericFunctionAccess().getGroup_3(), "rule__NumericFunction__Group_3__0");
					put(grammarAccess.getSubqueryAccess().getGroup(), "rule__Subquery__Group__0");
					put(grammarAccess.getSelectStatementAccess().getSelectClauseAssignment_0(), "rule__SelectStatement__SelectClauseAssignment_0");
					put(grammarAccess.getSelectStatementAccess().getFromClauseAssignment_1(), "rule__SelectStatement__FromClauseAssignment_1");
					put(grammarAccess.getSelectStatementAccess().getWhereClauseAssignment_2(), "rule__SelectStatement__WhereClauseAssignment_2");
					put(grammarAccess.getSelectStatementAccess().getGroupByClauseAssignment_3(), "rule__SelectStatement__GroupByClauseAssignment_3");
					put(grammarAccess.getSelectStatementAccess().getOrderByClauseAssignment_4(), "rule__SelectStatement__OrderByClauseAssignment_4");
					put(grammarAccess.getGroupByClauseAccess().getGroupingAssignment_2(), "rule__GroupByClause__GroupingAssignment_2");
					put(grammarAccess.getGroupByClauseAccess().getGroupingAssignment_3_1(), "rule__GroupByClause__GroupingAssignment_3_1");
					put(grammarAccess.getGroupByClauseAccess().getHavingClauseAssignment_4(), "rule__GroupByClause__HavingClauseAssignment_4");
					put(grammarAccess.getHavingClauseAccess().getHavingAssignment_1(), "rule__HavingClause__HavingAssignment_1");
					put(grammarAccess.getOrderByClauseAccess().getOrderingAssignment_2(), "rule__OrderByClause__OrderingAssignment_2");
					put(grammarAccess.getOrderByClauseAccess().getOrderingAssignment_3_1(), "rule__OrderByClause__OrderingAssignment_3_1");
					put(grammarAccess.getOrderBySpecAccess().getDirectionAssignment_1(), "rule__OrderBySpec__DirectionAssignment_1");
					put(grammarAccess.getUpdateStatementAccess().getUpdateClauseAssignment_0(), "rule__UpdateStatement__UpdateClauseAssignment_0");
					put(grammarAccess.getUpdateStatementAccess().getSetClauseAssignment_1(), "rule__UpdateStatement__SetClauseAssignment_1");
					put(grammarAccess.getUpdateStatementAccess().getWhereClauseAssignment_2(), "rule__UpdateStatement__WhereClauseAssignment_2");
					put(grammarAccess.getUpdateClauseAccess().getFromEntriesAssignment_1(), "rule__UpdateClause__FromEntriesAssignment_1");
					put(grammarAccess.getUpdateClauseAccess().getFromEntriesAssignment_2_1(), "rule__UpdateClause__FromEntriesAssignment_2_1");
					put(grammarAccess.getSetClauseAccess().getItemsAssignment_1(), "rule__SetClause__ItemsAssignment_1");
					put(grammarAccess.getSetClauseAccess().getItemsAssignment_2_1(), "rule__SetClause__ItemsAssignment_2_1");
					put(grammarAccess.getUpdateItemAccess().getAliasAssignment_0(), "rule__UpdateItem__AliasAssignment_0");
					put(grammarAccess.getUpdateItemAccess().getValueAssignment_2(), "rule__UpdateItem__ValueAssignment_2");
					put(grammarAccess.getDeleteStatementAccess().getDeleteClauseAssignment_0(), "rule__DeleteStatement__DeleteClauseAssignment_0");
					put(grammarAccess.getDeleteStatementAccess().getWhereClauseAssignment_1(), "rule__DeleteStatement__WhereClauseAssignment_1");
					put(grammarAccess.getDeleteClauseAccess().getFromClauseAssignment_1(), "rule__DeleteClause__FromClauseAssignment_1");
					put(grammarAccess.getSelectClauseAccess().getIsDistinctAssignment_1(), "rule__SelectClause__IsDistinctAssignment_1");
					put(grammarAccess.getSelectClauseAccess().getExpressionsAssignment_2(), "rule__SelectClause__ExpressionsAssignment_2");
					put(grammarAccess.getSelectClauseAccess().getExpressionsAssignment_3_1(), "rule__SelectClause__ExpressionsAssignment_3_1");
					put(grammarAccess.getAvgAggregateAccess().getIsDistinctAssignment_2(), "rule__AvgAggregate__IsDistinctAssignment_2");
					put(grammarAccess.getAvgAggregateAccess().getItemAssignment_3(), "rule__AvgAggregate__ItemAssignment_3");
					put(grammarAccess.getCountAggregateAccess().getIsDistinctAssignment_2(), "rule__CountAggregate__IsDistinctAssignment_2");
					put(grammarAccess.getCountAggregateAccess().getItemAssignment_3(), "rule__CountAggregate__ItemAssignment_3");
					put(grammarAccess.getMaxAggregateAccess().getIsDistinctAssignment_2(), "rule__MaxAggregate__IsDistinctAssignment_2");
					put(grammarAccess.getMaxAggregateAccess().getItemAssignment_3(), "rule__MaxAggregate__ItemAssignment_3");
					put(grammarAccess.getMinAggregateAccess().getIsDistinctAssignment_2(), "rule__MinAggregate__IsDistinctAssignment_2");
					put(grammarAccess.getMinAggregateAccess().getItemAssignment_3(), "rule__MinAggregate__ItemAssignment_3");
					put(grammarAccess.getSumAggregateAccess().getIsDistinctAssignment_2(), "rule__SumAggregate__IsDistinctAssignment_2");
					put(grammarAccess.getSumAggregateAccess().getItemAssignment_3(), "rule__SumAggregate__ItemAssignment_3");
					put(grammarAccess.getSelectConstructorExpressionAccess().getNameAssignment_1(), "rule__SelectConstructorExpression__NameAssignment_1");
					put(grammarAccess.getSelectConstructorExpressionAccess().getItemsAssignment_3(), "rule__SelectConstructorExpression__ItemsAssignment_3");
					put(grammarAccess.getSelectConstructorExpressionAccess().getItemsAssignment_4_1(), "rule__SelectConstructorExpression__ItemsAssignment_4_1");
					put(grammarAccess.getFromClauseAccess().getFromEntriesAssignment_1(), "rule__FromClause__FromEntriesAssignment_1");
					put(grammarAccess.getFromClauseAccess().getFromEntriesAssignment_2_1(), "rule__FromClause__FromEntriesAssignment_2_1");
					put(grammarAccess.getVariableDeclarationAccess().getNameAssignment_1(), "rule__VariableDeclaration__NameAssignment_1");
					put(grammarAccess.getFromClassIdAccess().getTypeAssignment(), "rule__FromClassId__TypeAssignment");
					put(grammarAccess.getFromClassVarAccess().getTypeAssignment_0(), "rule__FromClassVar__TypeAssignment_0");
					put(grammarAccess.getFromClassVarAccess().getVariableAssignment_1(), "rule__FromClassVar__VariableAssignment_1");
					put(grammarAccess.getFromClassVarAccess().getJoinsAssignment_2(), "rule__FromClassVar__JoinsAssignment_2");
					put(grammarAccess.getFromCollectionAccess().getPathAssignment_2(), "rule__FromCollection__PathAssignment_2");
					put(grammarAccess.getFromCollectionAccess().getVariableAssignment_4(), "rule__FromCollection__VariableAssignment_4");
					put(grammarAccess.getJoinAccess().getIsFetchAssignment_1(), "rule__Join__IsFetchAssignment_1");
					put(grammarAccess.getJoinAccess().getPathAssignment_2(), "rule__Join__PathAssignment_2");
					put(grammarAccess.getJoinAccess().getVariableAssignment_3(), "rule__Join__VariableAssignment_3");
					put(grammarAccess.getLeftJoinAccess().getIsOuterAssignment_1(), "rule__LeftJoin__IsOuterAssignment_1");
					put(grammarAccess.getLeftJoinAccess().getIsFetchAssignment_3(), "rule__LeftJoin__IsFetchAssignment_3");
					put(grammarAccess.getLeftJoinAccess().getPathAssignment_4(), "rule__LeftJoin__PathAssignment_4");
					put(grammarAccess.getLeftJoinAccess().getVariableAssignment_5(), "rule__LeftJoin__VariableAssignment_5");
					put(grammarAccess.getInnerJoinAccess().getIsFetchAssignment_2(), "rule__InnerJoin__IsFetchAssignment_2");
					put(grammarAccess.getInnerJoinAccess().getPathAssignment_3(), "rule__InnerJoin__PathAssignment_3");
					put(grammarAccess.getInnerJoinAccess().getVariableAssignment_4(), "rule__InnerJoin__VariableAssignment_4");
					put(grammarAccess.getWhereClauseAccess().getWhereEntryAssignment_1(), "rule__WhereClause__WhereEntryAssignment_1");
					put(grammarAccess.getOrExpressionAccess().getEntriesAssignment_1_1_1(), "rule__OrExpression__EntriesAssignment_1_1_1");
					put(grammarAccess.getAndExpressionAccess().getEntriesAssignment_1_1_1(), "rule__AndExpression__EntriesAssignment_1_1_1");
					put(grammarAccess.getComparisonOperatorExpressionAccess().getOperatorAssignment_1_1(), "rule__ComparisonOperatorExpression__OperatorAssignment_1_1");
					put(grammarAccess.getComparisonOperatorExpressionAccess().getRightAssignment_1_2(), "rule__ComparisonOperatorExpression__RightAssignment_1_2");
					put(grammarAccess.getAdditionExpressionAccess().getOperatorAssignment_1_1(), "rule__AdditionExpression__OperatorAssignment_1_1");
					put(grammarAccess.getAdditionExpressionAccess().getRightAssignment_1_2(), "rule__AdditionExpression__RightAssignment_1_2");
					put(grammarAccess.getMultiplicationExpressionAccess().getOperatorAssignment_1_1(), "rule__MultiplicationExpression__OperatorAssignment_1_1");
					put(grammarAccess.getMultiplicationExpressionAccess().getRightAssignment_1_2(), "rule__MultiplicationExpression__RightAssignment_1_2");
					put(grammarAccess.getUnaryExpressionAccess().getUnaryOperatorAssignment_0(), "rule__UnaryExpression__UnaryOperatorAssignment_0");
					put(grammarAccess.getUnaryExpressionAccess().getRightAssignment_1(), "rule__UnaryExpression__RightAssignment_1");
					put(grammarAccess.getExistsExpressionAccess().getRightAssignment_1(), "rule__ExistsExpression__RightAssignment_1");
					put(grammarAccess.getAllExpressionAccess().getRightAssignment_1(), "rule__AllExpression__RightAssignment_1");
					put(grammarAccess.getAnyExpressionAccess().getRightAssignment_1(), "rule__AnyExpression__RightAssignment_1");
					put(grammarAccess.getSomeExpressionAccess().getRightAssignment_1(), "rule__SomeExpression__RightAssignment_1");
					put(grammarAccess.getCollectionExpressionAccess().getLeftAssignment_0(), "rule__CollectionExpression__LeftAssignment_0");
					put(grammarAccess.getCollectionExpressionAccess().getIsNotAssignment_1(), "rule__CollectionExpression__IsNotAssignment_1");
					put(grammarAccess.getCollectionExpressionAccess().getRightAssignment_4(), "rule__CollectionExpression__RightAssignment_4");
					put(grammarAccess.getNullComparisonExpressionAccess().getLeftAssignment_0(), "rule__NullComparisonExpression__LeftAssignment_0");
					put(grammarAccess.getNullComparisonExpressionAccess().getIsNotAssignment_2(), "rule__NullComparisonExpression__IsNotAssignment_2");
					put(grammarAccess.getEmptyComparisonExpressionAccess().getLeftAssignment_0(), "rule__EmptyComparisonExpression__LeftAssignment_0");
					put(grammarAccess.getEmptyComparisonExpressionAccess().getIsNotAssignment_2(), "rule__EmptyComparisonExpression__IsNotAssignment_2");
					put(grammarAccess.getLikeExpressionAccess().getLeftAssignment_0(), "rule__LikeExpression__LeftAssignment_0");
					put(grammarAccess.getLikeExpressionAccess().getIsNotAssignment_1(), "rule__LikeExpression__IsNotAssignment_1");
					put(grammarAccess.getLikeExpressionAccess().getRightAssignment_3(), "rule__LikeExpression__RightAssignment_3");
					put(grammarAccess.getInSeqExpressionAccess().getLeftAssignment_0(), "rule__InSeqExpression__LeftAssignment_0");
					put(grammarAccess.getInSeqExpressionAccess().getIsNotAssignment_1(), "rule__InSeqExpression__IsNotAssignment_1");
					put(grammarAccess.getInSeqExpressionAccess().getItemsAssignment_4(), "rule__InSeqExpression__ItemsAssignment_4");
					put(grammarAccess.getInSeqExpressionAccess().getItemsAssignment_5_1(), "rule__InSeqExpression__ItemsAssignment_5_1");
					put(grammarAccess.getInQueryExpressionAccess().getLeftAssignment_0(), "rule__InQueryExpression__LeftAssignment_0");
					put(grammarAccess.getInQueryExpressionAccess().getIsNotAssignment_1(), "rule__InQueryExpression__IsNotAssignment_1");
					put(grammarAccess.getInQueryExpressionAccess().getQueryAssignment_3(), "rule__InQueryExpression__QueryAssignment_3");
					put(grammarAccess.getBetweenExpressionAccess().getLeftAssignment_0(), "rule__BetweenExpression__LeftAssignment_0");
					put(grammarAccess.getBetweenExpressionAccess().getIsNotAssignment_1(), "rule__BetweenExpression__IsNotAssignment_1");
					put(grammarAccess.getBetweenExpressionAccess().getMinAssignment_3(), "rule__BetweenExpression__MinAssignment_3");
					put(grammarAccess.getBetweenExpressionAccess().getMaxAssignment_5(), "rule__BetweenExpression__MaxAssignment_5");
					put(grammarAccess.getAliasAttributeExpressionAccess().getAliasAssignment_0(), "rule__AliasAttributeExpression__AliasAssignment_0");
					put(grammarAccess.getAliasAttributeExpressionAccess().getAttributesAssignment_1_1(), "rule__AliasAttributeExpression__AttributesAssignment_1_1");
					put(grammarAccess.getParameterExpressionAccess().getNameAssignment_1(), "rule__ParameterExpression__NameAssignment_1");
					put(grammarAccess.getStringFunctionAccess().getNameAssignment_0(), "rule__StringFunction__NameAssignment_0");
					put(grammarAccess.getStringFunctionAccess().getParamsAssignment_2(), "rule__StringFunction__ParamsAssignment_2");
					put(grammarAccess.getStringFunctionAccess().getParamsAssignment_3_1(), "rule__StringFunction__ParamsAssignment_3_1");
					put(grammarAccess.getNumericFunctionAccess().getNameAssignment_0(), "rule__NumericFunction__NameAssignment_0");
					put(grammarAccess.getNumericFunctionAccess().getParamsAssignment_2(), "rule__NumericFunction__ParamsAssignment_2");
					put(grammarAccess.getNumericFunctionAccess().getParamsAssignment_3_1(), "rule__NumericFunction__ParamsAssignment_3_1");
					put(grammarAccess.getIntegerLiteralAccess().getValueAssignment(), "rule__IntegerLiteral__ValueAssignment");
					put(grammarAccess.getStringLiteralAccess().getValueAssignment(), "rule__StringLiteral__ValueAssignment");
					put(grammarAccess.getNullLiteralAccess().getValueAssignment(), "rule__NullLiteral__ValueAssignment");
					put(grammarAccess.getBooleanLiteralAccess().getValueAssignment(), "rule__BooleanLiteral__ValueAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.nightlabs.vestigo.xtext.jpql.ui.contentassist.antlr.internal.InternalJPQLParser typedParser = (org.nightlabs.vestigo.xtext.jpql.ui.contentassist.antlr.internal.InternalJPQLParser) parser;
			typedParser.entryRuleJPQLQuery();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public JPQLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(JPQLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
