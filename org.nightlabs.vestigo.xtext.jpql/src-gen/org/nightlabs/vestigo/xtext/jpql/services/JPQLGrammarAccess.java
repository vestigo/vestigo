/*
* generated by Xtext
*/

package org.nightlabs.vestigo.xtext.jpql.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class JPQLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class JPQLQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JPQLQuery");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSelectStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUpdateStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDeleteStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//// http://www.datanucleus.org/products/accessplatform_3_1/jpa/jpql.html
		//// Current spec: JPA 3.0, JPQL BNF at bottom
		//JPQLQuery:
		//	SelectStatement | UpdateStatement | DeleteStatement;
		public ParserRule getRule() { return rule; }

		//SelectStatement | UpdateStatement | DeleteStatement
		public Alternatives getAlternatives() { return cAlternatives; }

		//SelectStatement
		public RuleCall getSelectStatementParserRuleCall_0() { return cSelectStatementParserRuleCall_0; }

		//UpdateStatement
		public RuleCall getUpdateStatementParserRuleCall_1() { return cUpdateStatementParserRuleCall_1; }

		//DeleteStatement
		public RuleCall getDeleteStatementParserRuleCall_2() { return cDeleteStatementParserRuleCall_2; }
	}

	public class SelectStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SelectStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSelectClauseAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSelectClauseSelectClauseParserRuleCall_0_0 = (RuleCall)cSelectClauseAssignment_0.eContents().get(0);
		private final Assignment cFromClauseAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFromClauseFromClauseParserRuleCall_1_0 = (RuleCall)cFromClauseAssignment_1.eContents().get(0);
		private final Assignment cWhereClauseAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cWhereClauseWhereClauseParserRuleCall_2_0 = (RuleCall)cWhereClauseAssignment_2.eContents().get(0);
		private final Assignment cGroupByClauseAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cGroupByClauseGroupByClauseParserRuleCall_3_0 = (RuleCall)cGroupByClauseAssignment_3.eContents().get(0);
		private final Assignment cOrderByClauseAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOrderByClauseOrderByClauseParserRuleCall_4_0 = (RuleCall)cOrderByClauseAssignment_4.eContents().get(0);
		
		//SelectStatement:
		//	selectClause=SelectClause? fromClause=FromClause whereClause=WhereClause? groupByClause=GroupByClause?
		//	orderByClause=OrderByClause?;
		public ParserRule getRule() { return rule; }

		//selectClause=SelectClause? fromClause=FromClause whereClause=WhereClause? groupByClause=GroupByClause?
		//orderByClause=OrderByClause?
		public Group getGroup() { return cGroup; }

		//selectClause=SelectClause?
		public Assignment getSelectClauseAssignment_0() { return cSelectClauseAssignment_0; }

		//SelectClause
		public RuleCall getSelectClauseSelectClauseParserRuleCall_0_0() { return cSelectClauseSelectClauseParserRuleCall_0_0; }

		//fromClause=FromClause
		public Assignment getFromClauseAssignment_1() { return cFromClauseAssignment_1; }

		//FromClause
		public RuleCall getFromClauseFromClauseParserRuleCall_1_0() { return cFromClauseFromClauseParserRuleCall_1_0; }

		//whereClause=WhereClause?
		public Assignment getWhereClauseAssignment_2() { return cWhereClauseAssignment_2; }

		//WhereClause
		public RuleCall getWhereClauseWhereClauseParserRuleCall_2_0() { return cWhereClauseWhereClauseParserRuleCall_2_0; }

		//groupByClause=GroupByClause?
		public Assignment getGroupByClauseAssignment_3() { return cGroupByClauseAssignment_3; }

		//GroupByClause
		public RuleCall getGroupByClauseGroupByClauseParserRuleCall_3_0() { return cGroupByClauseGroupByClauseParserRuleCall_3_0; }

		//orderByClause=OrderByClause?
		public Assignment getOrderByClauseAssignment_4() { return cOrderByClauseAssignment_4; }

		//OrderByClause
		public RuleCall getOrderByClauseOrderByClauseParserRuleCall_4_0() { return cOrderByClauseOrderByClauseParserRuleCall_4_0; }
	}

	public class GroupByClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GroupByClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGROUPKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cBYKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cGroupingAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cGroupingAliasAttributeExpressionParserRuleCall_2_0 = (RuleCall)cGroupingAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cGroupingAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cGroupingAliasAttributeExpressionParserRuleCall_3_1_0 = (RuleCall)cGroupingAssignment_3_1.eContents().get(0);
		private final Assignment cHavingClauseAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cHavingClauseHavingClauseParserRuleCall_4_0 = (RuleCall)cHavingClauseAssignment_4.eContents().get(0);
		
		//GroupByClause:
		//	"GROUP" "BY" grouping+=AliasAttributeExpression ("," grouping+=AliasAttributeExpression)* havingClause=HavingClause?;
		public ParserRule getRule() { return rule; }

		//"GROUP" "BY" grouping+=AliasAttributeExpression ("," grouping+=AliasAttributeExpression)* havingClause=HavingClause?
		public Group getGroup() { return cGroup; }

		//"GROUP"
		public Keyword getGROUPKeyword_0() { return cGROUPKeyword_0; }

		//"BY"
		public Keyword getBYKeyword_1() { return cBYKeyword_1; }

		//grouping+=AliasAttributeExpression
		public Assignment getGroupingAssignment_2() { return cGroupingAssignment_2; }

		//AliasAttributeExpression
		public RuleCall getGroupingAliasAttributeExpressionParserRuleCall_2_0() { return cGroupingAliasAttributeExpressionParserRuleCall_2_0; }

		//("," grouping+=AliasAttributeExpression)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//grouping+=AliasAttributeExpression
		public Assignment getGroupingAssignment_3_1() { return cGroupingAssignment_3_1; }

		//AliasAttributeExpression
		public RuleCall getGroupingAliasAttributeExpressionParserRuleCall_3_1_0() { return cGroupingAliasAttributeExpressionParserRuleCall_3_1_0; }

		//havingClause=HavingClause?
		public Assignment getHavingClauseAssignment_4() { return cHavingClauseAssignment_4; }

		//HavingClause
		public RuleCall getHavingClauseHavingClauseParserRuleCall_4_0() { return cHavingClauseHavingClauseParserRuleCall_4_0; }
	}

	public class HavingClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HavingClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHAVINGKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cHavingAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cHavingOrExpressionParserRuleCall_1_0 = (RuleCall)cHavingAssignment_1.eContents().get(0);
		
		//HavingClause:
		//	"HAVING" having=OrExpression;
		public ParserRule getRule() { return rule; }

		//"HAVING" having=OrExpression
		public Group getGroup() { return cGroup; }

		//"HAVING"
		public Keyword getHAVINGKeyword_0() { return cHAVINGKeyword_0; }

		//having=OrExpression
		public Assignment getHavingAssignment_1() { return cHavingAssignment_1; }

		//OrExpression
		public RuleCall getHavingOrExpressionParserRuleCall_1_0() { return cHavingOrExpressionParserRuleCall_1_0; }
	}

	public class OrderByClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrderByClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cORDERKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cBYKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOrderingAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOrderingOrderBySpecParserRuleCall_2_0 = (RuleCall)cOrderingAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cOrderingAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cOrderingOrderBySpecParserRuleCall_3_1_0 = (RuleCall)cOrderingAssignment_3_1.eContents().get(0);
		
		//OrderByClause:
		//	"ORDER" "BY" ordering+=OrderBySpec ("," ordering+=OrderBySpec)*;
		public ParserRule getRule() { return rule; }

		//"ORDER" "BY" ordering+=OrderBySpec ("," ordering+=OrderBySpec)*
		public Group getGroup() { return cGroup; }

		//"ORDER"
		public Keyword getORDERKeyword_0() { return cORDERKeyword_0; }

		//"BY"
		public Keyword getBYKeyword_1() { return cBYKeyword_1; }

		//ordering+=OrderBySpec
		public Assignment getOrderingAssignment_2() { return cOrderingAssignment_2; }

		//OrderBySpec
		public RuleCall getOrderingOrderBySpecParserRuleCall_2_0() { return cOrderingOrderBySpecParserRuleCall_2_0; }

		//("," ordering+=OrderBySpec)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//ordering+=OrderBySpec
		public Assignment getOrderingAssignment_3_1() { return cOrderingAssignment_3_1; }

		//OrderBySpec
		public RuleCall getOrderingOrderBySpecParserRuleCall_3_1_0() { return cOrderingOrderBySpecParserRuleCall_3_1_0; }
	}

	public class OrderBySpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrderBySpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAliasAttributeExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cDirectionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDirectionOrderByDirectionEnumRuleCall_1_0 = (RuleCall)cDirectionAssignment_1.eContents().get(0);
		
		//OrderBySpec:
		//	AliasAttributeExpression direction=OrderByDirection;
		public ParserRule getRule() { return rule; }

		//AliasAttributeExpression direction=OrderByDirection
		public Group getGroup() { return cGroup; }

		//AliasAttributeExpression
		public RuleCall getAliasAttributeExpressionParserRuleCall_0() { return cAliasAttributeExpressionParserRuleCall_0; }

		//direction=OrderByDirection
		public Assignment getDirectionAssignment_1() { return cDirectionAssignment_1; }

		//OrderByDirection
		public RuleCall getDirectionOrderByDirectionEnumRuleCall_1_0() { return cDirectionOrderByDirectionEnumRuleCall_1_0; }
	}

	public class UpdateStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UpdateStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cUpdateClauseAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cUpdateClauseUpdateClauseParserRuleCall_0_0 = (RuleCall)cUpdateClauseAssignment_0.eContents().get(0);
		private final Assignment cSetClauseAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSetClauseSetClauseParserRuleCall_1_0 = (RuleCall)cSetClauseAssignment_1.eContents().get(0);
		private final Assignment cWhereClauseAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cWhereClauseWhereClauseParserRuleCall_2_0 = (RuleCall)cWhereClauseAssignment_2.eContents().get(0);
		
		//UpdateStatement:
		//	updateClause=UpdateClause setClause=SetClause whereClause=WhereClause?;
		public ParserRule getRule() { return rule; }

		//updateClause=UpdateClause setClause=SetClause whereClause=WhereClause?
		public Group getGroup() { return cGroup; }

		//updateClause=UpdateClause
		public Assignment getUpdateClauseAssignment_0() { return cUpdateClauseAssignment_0; }

		//UpdateClause
		public RuleCall getUpdateClauseUpdateClauseParserRuleCall_0_0() { return cUpdateClauseUpdateClauseParserRuleCall_0_0; }

		//setClause=SetClause
		public Assignment getSetClauseAssignment_1() { return cSetClauseAssignment_1; }

		//SetClause
		public RuleCall getSetClauseSetClauseParserRuleCall_1_0() { return cSetClauseSetClauseParserRuleCall_1_0; }

		//whereClause=WhereClause?
		public Assignment getWhereClauseAssignment_2() { return cWhereClauseAssignment_2; }

		//WhereClause
		public RuleCall getWhereClauseWhereClauseParserRuleCall_2_0() { return cWhereClauseWhereClauseParserRuleCall_2_0; }
	}

	public class UpdateClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UpdateClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUPDATEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFromEntriesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFromEntriesFromEntryParserRuleCall_1_0 = (RuleCall)cFromEntriesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cFromEntriesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cFromEntriesFromEntryParserRuleCall_2_1_0 = (RuleCall)cFromEntriesAssignment_2_1.eContents().get(0);
		
		//UpdateClause:
		//	"UPDATE" fromEntries+=FromEntry ("," fromEntries+=FromEntry)*;
		public ParserRule getRule() { return rule; }

		//"UPDATE" fromEntries+=FromEntry ("," fromEntries+=FromEntry)*
		public Group getGroup() { return cGroup; }

		//"UPDATE"
		public Keyword getUPDATEKeyword_0() { return cUPDATEKeyword_0; }

		//fromEntries+=FromEntry
		public Assignment getFromEntriesAssignment_1() { return cFromEntriesAssignment_1; }

		//FromEntry
		public RuleCall getFromEntriesFromEntryParserRuleCall_1_0() { return cFromEntriesFromEntryParserRuleCall_1_0; }

		//("," fromEntries+=FromEntry)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//fromEntries+=FromEntry
		public Assignment getFromEntriesAssignment_2_1() { return cFromEntriesAssignment_2_1; }

		//FromEntry
		public RuleCall getFromEntriesFromEntryParserRuleCall_2_1_0() { return cFromEntriesFromEntryParserRuleCall_2_1_0; }
	}

	public class SetClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SetClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSETKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cItemsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cItemsUpdateItemParserRuleCall_1_0 = (RuleCall)cItemsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cItemsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cItemsUpdateItemParserRuleCall_2_1_0 = (RuleCall)cItemsAssignment_2_1.eContents().get(0);
		
		//SetClause:
		//	"SET" items+=UpdateItem ("," items+=UpdateItem)*;
		public ParserRule getRule() { return rule; }

		//"SET" items+=UpdateItem ("," items+=UpdateItem)*
		public Group getGroup() { return cGroup; }

		//"SET"
		public Keyword getSETKeyword_0() { return cSETKeyword_0; }

		//items+=UpdateItem
		public Assignment getItemsAssignment_1() { return cItemsAssignment_1; }

		//UpdateItem
		public RuleCall getItemsUpdateItemParserRuleCall_1_0() { return cItemsUpdateItemParserRuleCall_1_0; }

		//("," items+=UpdateItem)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//items+=UpdateItem
		public Assignment getItemsAssignment_2_1() { return cItemsAssignment_2_1; }

		//UpdateItem
		public RuleCall getItemsUpdateItemParserRuleCall_2_1_0() { return cItemsUpdateItemParserRuleCall_2_1_0; }
	}

	public class UpdateItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UpdateItem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAliasAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAliasAliasAttributeExpressionParserRuleCall_0_0 = (RuleCall)cAliasAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//UpdateItem:
		//	alias=AliasAttributeExpression "=" value=Value;
		public ParserRule getRule() { return rule; }

		//alias=AliasAttributeExpression "=" value=Value
		public Group getGroup() { return cGroup; }

		//alias=AliasAttributeExpression
		public Assignment getAliasAssignment_0() { return cAliasAssignment_0; }

		//AliasAttributeExpression
		public RuleCall getAliasAliasAttributeExpressionParserRuleCall_0_0() { return cAliasAliasAttributeExpressionParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=Value
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//Value
		public RuleCall getValueValueParserRuleCall_2_0() { return cValueValueParserRuleCall_2_0; }
	}

	public class DeleteStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DeleteStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDeleteClauseAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDeleteClauseDeleteClauseParserRuleCall_0_0 = (RuleCall)cDeleteClauseAssignment_0.eContents().get(0);
		private final Assignment cWhereClauseAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cWhereClauseWhereClauseParserRuleCall_1_0 = (RuleCall)cWhereClauseAssignment_1.eContents().get(0);
		
		//DeleteStatement:
		//	deleteClause=DeleteClause whereClause=WhereClause?;
		public ParserRule getRule() { return rule; }

		//deleteClause=DeleteClause whereClause=WhereClause?
		public Group getGroup() { return cGroup; }

		//deleteClause=DeleteClause
		public Assignment getDeleteClauseAssignment_0() { return cDeleteClauseAssignment_0; }

		//DeleteClause
		public RuleCall getDeleteClauseDeleteClauseParserRuleCall_0_0() { return cDeleteClauseDeleteClauseParserRuleCall_0_0; }

		//whereClause=WhereClause?
		public Assignment getWhereClauseAssignment_1() { return cWhereClauseAssignment_1; }

		//WhereClause
		public RuleCall getWhereClauseWhereClauseParserRuleCall_1_0() { return cWhereClauseWhereClauseParserRuleCall_1_0; }
	}

	public class DeleteClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DeleteClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDELETEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFromClauseAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFromClauseFromClauseParserRuleCall_1_0 = (RuleCall)cFromClauseAssignment_1.eContents().get(0);
		
		//DeleteClause:
		//	"DELETE" fromClause=FromClause;
		public ParserRule getRule() { return rule; }

		//"DELETE" fromClause=FromClause
		public Group getGroup() { return cGroup; }

		//"DELETE"
		public Keyword getDELETEKeyword_0() { return cDELETEKeyword_0; }

		//fromClause=FromClause
		public Assignment getFromClauseAssignment_1() { return cFromClauseAssignment_1; }

		//FromClause
		public RuleCall getFromClauseFromClauseParserRuleCall_1_0() { return cFromClauseFromClauseParserRuleCall_1_0; }
	}

	public class SelectClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SelectClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSELECTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIsDistinctAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIsDistinctDISTINCTKeyword_1_0 = (Keyword)cIsDistinctAssignment_1.eContents().get(0);
		private final Assignment cExpressionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionsSelectExpressionParserRuleCall_2_0 = (RuleCall)cExpressionsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cExpressionsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cExpressionsSelectExpressionParserRuleCall_3_1_0 = (RuleCall)cExpressionsAssignment_3_1.eContents().get(0);
		
		//SelectClause:
		//	"SELECT" isDistinct?="DISTINCT"? expressions+=SelectExpression ("," expressions+=SelectExpression)*;
		public ParserRule getRule() { return rule; }

		//"SELECT" isDistinct?="DISTINCT"? expressions+=SelectExpression ("," expressions+=SelectExpression)*
		public Group getGroup() { return cGroup; }

		//"SELECT"
		public Keyword getSELECTKeyword_0() { return cSELECTKeyword_0; }

		//isDistinct?="DISTINCT"?
		public Assignment getIsDistinctAssignment_1() { return cIsDistinctAssignment_1; }

		//"DISTINCT"
		public Keyword getIsDistinctDISTINCTKeyword_1_0() { return cIsDistinctDISTINCTKeyword_1_0; }

		//expressions+=SelectExpression
		public Assignment getExpressionsAssignment_2() { return cExpressionsAssignment_2; }

		//SelectExpression
		public RuleCall getExpressionsSelectExpressionParserRuleCall_2_0() { return cExpressionsSelectExpressionParserRuleCall_2_0; }

		//("," expressions+=SelectExpression)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//expressions+=SelectExpression
		public Assignment getExpressionsAssignment_3_1() { return cExpressionsAssignment_3_1; }

		//SelectExpression
		public RuleCall getExpressionsSelectExpressionParserRuleCall_3_1_0() { return cExpressionsSelectExpressionParserRuleCall_3_1_0; }
	}

	public class SelectExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SelectExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAliasAttributeExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSelectAggregateExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSelectConstructorExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//SelectExpression:
		//	AliasAttributeExpression | SelectAggregateExpression | SelectConstructorExpression;
		public ParserRule getRule() { return rule; }

		//AliasAttributeExpression | SelectAggregateExpression | SelectConstructorExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//AliasAttributeExpression
		public RuleCall getAliasAttributeExpressionParserRuleCall_0() { return cAliasAttributeExpressionParserRuleCall_0; }

		//SelectAggregateExpression
		public RuleCall getSelectAggregateExpressionParserRuleCall_1() { return cSelectAggregateExpressionParserRuleCall_1; }

		//SelectConstructorExpression
		public RuleCall getSelectConstructorExpressionParserRuleCall_2() { return cSelectConstructorExpressionParserRuleCall_2; }
	}

	public class SelectAggregateExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SelectAggregateExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAvgAggregateParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCountAggregateParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMaxAggregateParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cMinAggregateParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSumAggregateParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//SelectAggregateExpression:
		//	AvgAggregate | CountAggregate | MaxAggregate | MinAggregate | SumAggregate;
		public ParserRule getRule() { return rule; }

		//AvgAggregate | CountAggregate | MaxAggregate | MinAggregate | SumAggregate
		public Alternatives getAlternatives() { return cAlternatives; }

		//AvgAggregate
		public RuleCall getAvgAggregateParserRuleCall_0() { return cAvgAggregateParserRuleCall_0; }

		//CountAggregate
		public RuleCall getCountAggregateParserRuleCall_1() { return cCountAggregateParserRuleCall_1; }

		//MaxAggregate
		public RuleCall getMaxAggregateParserRuleCall_2() { return cMaxAggregateParserRuleCall_2; }

		//MinAggregate
		public RuleCall getMinAggregateParserRuleCall_3() { return cMinAggregateParserRuleCall_3; }

		//SumAggregate
		public RuleCall getSumAggregateParserRuleCall_4() { return cSumAggregateParserRuleCall_4; }
	}

	public class AvgAggregateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AvgAggregate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAVGKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIsDistinctAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cIsDistinctDISTINCTKeyword_2_0 = (Keyword)cIsDistinctAssignment_2.eContents().get(0);
		private final Assignment cItemAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cItemAliasAttributeExpressionParserRuleCall_3_0 = (RuleCall)cItemAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//AvgAggregate:
		//	"AVG" "(" isDistinct?="DISTINCT"? item=AliasAttributeExpression ")";
		public ParserRule getRule() { return rule; }

		//"AVG" "(" isDistinct?="DISTINCT"? item=AliasAttributeExpression ")"
		public Group getGroup() { return cGroup; }

		//"AVG"
		public Keyword getAVGKeyword_0() { return cAVGKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//isDistinct?="DISTINCT"?
		public Assignment getIsDistinctAssignment_2() { return cIsDistinctAssignment_2; }

		//"DISTINCT"
		public Keyword getIsDistinctDISTINCTKeyword_2_0() { return cIsDistinctDISTINCTKeyword_2_0; }

		//item=AliasAttributeExpression
		public Assignment getItemAssignment_3() { return cItemAssignment_3; }

		//AliasAttributeExpression
		public RuleCall getItemAliasAttributeExpressionParserRuleCall_3_0() { return cItemAliasAttributeExpressionParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class CountAggregateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CountAggregate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCOUNTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIsDistinctAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cIsDistinctDISTINCTKeyword_2_0 = (Keyword)cIsDistinctAssignment_2.eContents().get(0);
		private final Assignment cItemAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cItemAliasAttributeExpressionParserRuleCall_3_0 = (RuleCall)cItemAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//CountAggregate:
		//	"COUNT" "(" isDistinct?="DISTINCT"? item=AliasAttributeExpression ")";
		public ParserRule getRule() { return rule; }

		//"COUNT" "(" isDistinct?="DISTINCT"? item=AliasAttributeExpression ")"
		public Group getGroup() { return cGroup; }

		//"COUNT"
		public Keyword getCOUNTKeyword_0() { return cCOUNTKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//isDistinct?="DISTINCT"?
		public Assignment getIsDistinctAssignment_2() { return cIsDistinctAssignment_2; }

		//"DISTINCT"
		public Keyword getIsDistinctDISTINCTKeyword_2_0() { return cIsDistinctDISTINCTKeyword_2_0; }

		//item=AliasAttributeExpression
		public Assignment getItemAssignment_3() { return cItemAssignment_3; }

		//AliasAttributeExpression
		public RuleCall getItemAliasAttributeExpressionParserRuleCall_3_0() { return cItemAliasAttributeExpressionParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class MaxAggregateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MaxAggregate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMAXKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIsDistinctAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cIsDistinctDISTINCTKeyword_2_0 = (Keyword)cIsDistinctAssignment_2.eContents().get(0);
		private final Assignment cItemAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cItemAliasAttributeExpressionParserRuleCall_3_0 = (RuleCall)cItemAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//MaxAggregate:
		//	"MAX" "(" isDistinct?="DISTINCT"? item=AliasAttributeExpression ")";
		public ParserRule getRule() { return rule; }

		//"MAX" "(" isDistinct?="DISTINCT"? item=AliasAttributeExpression ")"
		public Group getGroup() { return cGroup; }

		//"MAX"
		public Keyword getMAXKeyword_0() { return cMAXKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//isDistinct?="DISTINCT"?
		public Assignment getIsDistinctAssignment_2() { return cIsDistinctAssignment_2; }

		//"DISTINCT"
		public Keyword getIsDistinctDISTINCTKeyword_2_0() { return cIsDistinctDISTINCTKeyword_2_0; }

		//item=AliasAttributeExpression
		public Assignment getItemAssignment_3() { return cItemAssignment_3; }

		//AliasAttributeExpression
		public RuleCall getItemAliasAttributeExpressionParserRuleCall_3_0() { return cItemAliasAttributeExpressionParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class MinAggregateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MinAggregate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMINKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIsDistinctAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cIsDistinctDISTINCTKeyword_2_0 = (Keyword)cIsDistinctAssignment_2.eContents().get(0);
		private final Assignment cItemAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cItemAliasAttributeExpressionParserRuleCall_3_0 = (RuleCall)cItemAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//MinAggregate:
		//	"MIN" "(" isDistinct?="DISTINCT"? item=AliasAttributeExpression ")";
		public ParserRule getRule() { return rule; }

		//"MIN" "(" isDistinct?="DISTINCT"? item=AliasAttributeExpression ")"
		public Group getGroup() { return cGroup; }

		//"MIN"
		public Keyword getMINKeyword_0() { return cMINKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//isDistinct?="DISTINCT"?
		public Assignment getIsDistinctAssignment_2() { return cIsDistinctAssignment_2; }

		//"DISTINCT"
		public Keyword getIsDistinctDISTINCTKeyword_2_0() { return cIsDistinctDISTINCTKeyword_2_0; }

		//item=AliasAttributeExpression
		public Assignment getItemAssignment_3() { return cItemAssignment_3; }

		//AliasAttributeExpression
		public RuleCall getItemAliasAttributeExpressionParserRuleCall_3_0() { return cItemAliasAttributeExpressionParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class SumAggregateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SumAggregate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSUMKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIsDistinctAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cIsDistinctDISTINCTKeyword_2_0 = (Keyword)cIsDistinctAssignment_2.eContents().get(0);
		private final Assignment cItemAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cItemAliasAttributeExpressionParserRuleCall_3_0 = (RuleCall)cItemAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SumAggregate:
		//	"SUM" "(" isDistinct?="DISTINCT"? item=AliasAttributeExpression ")";
		public ParserRule getRule() { return rule; }

		//"SUM" "(" isDistinct?="DISTINCT"? item=AliasAttributeExpression ")"
		public Group getGroup() { return cGroup; }

		//"SUM"
		public Keyword getSUMKeyword_0() { return cSUMKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//isDistinct?="DISTINCT"?
		public Assignment getIsDistinctAssignment_2() { return cIsDistinctAssignment_2; }

		//"DISTINCT"
		public Keyword getIsDistinctDISTINCTKeyword_2_0() { return cIsDistinctDISTINCTKeyword_2_0; }

		//item=AliasAttributeExpression
		public Assignment getItemAssignment_3() { return cItemAssignment_3; }

		//AliasAttributeExpression
		public RuleCall getItemAliasAttributeExpressionParserRuleCall_3_0() { return cItemAliasAttributeExpressionParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class SelectConstructorExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SelectConstructorExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNEWKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cItemsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cItemsAliasAttributeExpressionParserRuleCall_3_0 = (RuleCall)cItemsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cItemsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cItemsAliasAttributeExpressionParserRuleCall_4_1_0 = (RuleCall)cItemsAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//SelectConstructorExpression:
		//	"NEW" name=ID "(" items+=AliasAttributeExpression ("," items+=AliasAttributeExpression)* ")";
		public ParserRule getRule() { return rule; }

		//"NEW" name=ID "(" items+=AliasAttributeExpression ("," items+=AliasAttributeExpression)* ")"
		public Group getGroup() { return cGroup; }

		//"NEW"
		public Keyword getNEWKeyword_0() { return cNEWKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//items+=AliasAttributeExpression
		public Assignment getItemsAssignment_3() { return cItemsAssignment_3; }

		//AliasAttributeExpression
		public RuleCall getItemsAliasAttributeExpressionParserRuleCall_3_0() { return cItemsAliasAttributeExpressionParserRuleCall_3_0; }

		//("," items+=AliasAttributeExpression)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//items+=AliasAttributeExpression
		public Assignment getItemsAssignment_4_1() { return cItemsAssignment_4_1; }

		//AliasAttributeExpression
		public RuleCall getItemsAliasAttributeExpressionParserRuleCall_4_1_0() { return cItemsAliasAttributeExpressionParserRuleCall_4_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class FromClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FromClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFROMKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFromEntriesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFromEntriesFromClassParserRuleCall_1_0 = (RuleCall)cFromEntriesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cFromEntriesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cFromEntriesFromEntryParserRuleCall_2_1_0 = (RuleCall)cFromEntriesAssignment_2_1.eContents().get(0);
		
		//FromClause:
		//	"FROM" fromEntries+=FromClass ("," fromEntries+=FromEntry)*;
		public ParserRule getRule() { return rule; }

		//"FROM" fromEntries+=FromClass ("," fromEntries+=FromEntry)*
		public Group getGroup() { return cGroup; }

		//"FROM"
		public Keyword getFROMKeyword_0() { return cFROMKeyword_0; }

		//fromEntries+=FromClass
		public Assignment getFromEntriesAssignment_1() { return cFromEntriesAssignment_1; }

		//FromClass
		public RuleCall getFromEntriesFromClassParserRuleCall_1_0() { return cFromEntriesFromClassParserRuleCall_1_0; }

		//("," fromEntries+=FromEntry)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//fromEntries+=FromEntry
		public Assignment getFromEntriesAssignment_2_1() { return cFromEntriesAssignment_2_1; }

		//FromEntry
		public RuleCall getFromEntriesFromEntryParserRuleCall_2_1_0() { return cFromEntriesFromEntryParserRuleCall_2_1_0; }
	}

	public class FromEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FromEntry");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFromClassParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFromCollectionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//FromEntry:
		//	FromClass | FromCollection;
		public ParserRule getRule() { return rule; }

		//FromClass | FromCollection
		public Alternatives getAlternatives() { return cAlternatives; }

		//FromClass
		public RuleCall getFromClassParserRuleCall_0() { return cFromClassParserRuleCall_0; }

		//FromCollection
		public RuleCall getFromCollectionParserRuleCall_1() { return cFromCollectionParserRuleCall_1; }
	}

	public class VariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cASKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//VariableDeclaration:
		//	"AS"? name=ID;
		public ParserRule getRule() { return rule; }

		//"AS"? name=ID
		public Group getGroup() { return cGroup; }

		//"AS"?
		public Keyword getASKeyword_0() { return cASKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class FromClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FromClass");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFromClassIdParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFromClassVarParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//FromClass:
		//	FromClassId | FromClassVar;
		public ParserRule getRule() { return rule; }

		//FromClassId | FromClassVar
		public Alternatives getAlternatives() { return cAlternatives; }

		//FromClassId
		public RuleCall getFromClassIdParserRuleCall_0() { return cFromClassIdParserRuleCall_0; }

		//FromClassVar
		public RuleCall getFromClassVarParserRuleCall_1() { return cFromClassVarParserRuleCall_1; }
	}

	public class QualifiedIdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedIdentifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedIdentifier:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class FromClassIdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FromClassId");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTypeQualifiedIdentifierParserRuleCall_0 = (RuleCall)cTypeAssignment.eContents().get(0);
		
		//FromClassId returns FromClass:
		//	type=QualifiedIdentifier;
		public ParserRule getRule() { return rule; }

		//type=QualifiedIdentifier
		public Assignment getTypeAssignment() { return cTypeAssignment; }

		//QualifiedIdentifier
		public RuleCall getTypeQualifiedIdentifierParserRuleCall_0() { return cTypeQualifiedIdentifierParserRuleCall_0; }
	}

	public class FromClassVarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FromClassVar");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeQualifiedIdentifierParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariableVariableDeclarationParserRuleCall_1_0 = (RuleCall)cVariableAssignment_1.eContents().get(0);
		private final Assignment cJoinsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cJoinsFromJoinParserRuleCall_2_0 = (RuleCall)cJoinsAssignment_2.eContents().get(0);
		
		//FromClassVar returns FromClass:
		//	type=QualifiedIdentifier variable=VariableDeclaration joins+=FromJoin*;
		public ParserRule getRule() { return rule; }

		//type=QualifiedIdentifier variable=VariableDeclaration joins+=FromJoin*
		public Group getGroup() { return cGroup; }

		//type=QualifiedIdentifier
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//QualifiedIdentifier
		public RuleCall getTypeQualifiedIdentifierParserRuleCall_0_0() { return cTypeQualifiedIdentifierParserRuleCall_0_0; }

		//variable=VariableDeclaration
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }

		//VariableDeclaration
		public RuleCall getVariableVariableDeclarationParserRuleCall_1_0() { return cVariableVariableDeclarationParserRuleCall_1_0; }

		//joins+=FromJoin*
		public Assignment getJoinsAssignment_2() { return cJoinsAssignment_2; }

		//FromJoin
		public RuleCall getJoinsFromJoinParserRuleCall_2_0() { return cJoinsFromJoinParserRuleCall_2_0; }
	}

	public class FromCollectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FromCollection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cINKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPathAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPathAliasAttributeExpressionParserRuleCall_2_0 = (RuleCall)cPathAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cVariableAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cVariableVariableDeclarationParserRuleCall_4_0 = (RuleCall)cVariableAssignment_4.eContents().get(0);
		
		//FromCollection:
		//	"IN" "(" path=AliasAttributeExpression ")" variable=VariableDeclaration;
		public ParserRule getRule() { return rule; }

		//"IN" "(" path=AliasAttributeExpression ")" variable=VariableDeclaration
		public Group getGroup() { return cGroup; }

		//"IN"
		public Keyword getINKeyword_0() { return cINKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//path=AliasAttributeExpression
		public Assignment getPathAssignment_2() { return cPathAssignment_2; }

		//AliasAttributeExpression
		public RuleCall getPathAliasAttributeExpressionParserRuleCall_2_0() { return cPathAliasAttributeExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//variable=VariableDeclaration
		public Assignment getVariableAssignment_4() { return cVariableAssignment_4; }

		//VariableDeclaration
		public RuleCall getVariableVariableDeclarationParserRuleCall_4_0() { return cVariableVariableDeclarationParserRuleCall_4_0; }
	}

	public class FromJoinElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FromJoin");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cJoinParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLeftJoinParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cInnerJoinParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//FromJoin:
		//	Join | LeftJoin | InnerJoin;
		public ParserRule getRule() { return rule; }

		//Join | LeftJoin | InnerJoin
		public Alternatives getAlternatives() { return cAlternatives; }

		//Join
		public RuleCall getJoinParserRuleCall_0() { return cJoinParserRuleCall_0; }

		//LeftJoin
		public RuleCall getLeftJoinParserRuleCall_1() { return cLeftJoinParserRuleCall_1; }

		//InnerJoin
		public RuleCall getInnerJoinParserRuleCall_2() { return cInnerJoinParserRuleCall_2; }
	}

	public class JoinElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Join");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cJOINKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIsFetchAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIsFetchFETCHKeyword_1_0 = (Keyword)cIsFetchAssignment_1.eContents().get(0);
		private final Assignment cPathAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPathAliasAttributeExpressionParserRuleCall_2_0 = (RuleCall)cPathAssignment_2.eContents().get(0);
		private final Assignment cVariableAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVariableVariableDeclarationParserRuleCall_3_0 = (RuleCall)cVariableAssignment_3.eContents().get(0);
		
		//Join:
		//	"JOIN" isFetch?="FETCH"? path=AliasAttributeExpression variable=VariableDeclaration;
		public ParserRule getRule() { return rule; }

		//"JOIN" isFetch?="FETCH"? path=AliasAttributeExpression variable=VariableDeclaration
		public Group getGroup() { return cGroup; }

		//"JOIN"
		public Keyword getJOINKeyword_0() { return cJOINKeyword_0; }

		//isFetch?="FETCH"?
		public Assignment getIsFetchAssignment_1() { return cIsFetchAssignment_1; }

		//"FETCH"
		public Keyword getIsFetchFETCHKeyword_1_0() { return cIsFetchFETCHKeyword_1_0; }

		//path=AliasAttributeExpression
		public Assignment getPathAssignment_2() { return cPathAssignment_2; }

		//AliasAttributeExpression
		public RuleCall getPathAliasAttributeExpressionParserRuleCall_2_0() { return cPathAliasAttributeExpressionParserRuleCall_2_0; }

		//variable=VariableDeclaration
		public Assignment getVariableAssignment_3() { return cVariableAssignment_3; }

		//VariableDeclaration
		public RuleCall getVariableVariableDeclarationParserRuleCall_3_0() { return cVariableVariableDeclarationParserRuleCall_3_0; }
	}

	public class LeftJoinElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LeftJoin");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLEFTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIsOuterAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIsOuterOUTERKeyword_1_0 = (Keyword)cIsOuterAssignment_1.eContents().get(0);
		private final Keyword cJOINKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIsFetchAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cIsFetchFETCHKeyword_3_0 = (Keyword)cIsFetchAssignment_3.eContents().get(0);
		private final Assignment cPathAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPathAliasAttributeExpressionParserRuleCall_4_0 = (RuleCall)cPathAssignment_4.eContents().get(0);
		private final Assignment cVariableAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cVariableVariableDeclarationParserRuleCall_5_0 = (RuleCall)cVariableAssignment_5.eContents().get(0);
		
		//LeftJoin:
		//	"LEFT" isOuter?="OUTER"? "JOIN" isFetch?="FETCH"? path=AliasAttributeExpression variable=VariableDeclaration;
		public ParserRule getRule() { return rule; }

		//"LEFT" isOuter?="OUTER"? "JOIN" isFetch?="FETCH"? path=AliasAttributeExpression variable=VariableDeclaration
		public Group getGroup() { return cGroup; }

		//"LEFT"
		public Keyword getLEFTKeyword_0() { return cLEFTKeyword_0; }

		//isOuter?="OUTER"?
		public Assignment getIsOuterAssignment_1() { return cIsOuterAssignment_1; }

		//"OUTER"
		public Keyword getIsOuterOUTERKeyword_1_0() { return cIsOuterOUTERKeyword_1_0; }

		//"JOIN"
		public Keyword getJOINKeyword_2() { return cJOINKeyword_2; }

		//isFetch?="FETCH"?
		public Assignment getIsFetchAssignment_3() { return cIsFetchAssignment_3; }

		//"FETCH"
		public Keyword getIsFetchFETCHKeyword_3_0() { return cIsFetchFETCHKeyword_3_0; }

		//path=AliasAttributeExpression
		public Assignment getPathAssignment_4() { return cPathAssignment_4; }

		//AliasAttributeExpression
		public RuleCall getPathAliasAttributeExpressionParserRuleCall_4_0() { return cPathAliasAttributeExpressionParserRuleCall_4_0; }

		//variable=VariableDeclaration
		public Assignment getVariableAssignment_5() { return cVariableAssignment_5; }

		//VariableDeclaration
		public RuleCall getVariableVariableDeclarationParserRuleCall_5_0() { return cVariableVariableDeclarationParserRuleCall_5_0; }
	}

	public class InnerJoinElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InnerJoin");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cINNERKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cJOINKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIsFetchAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cIsFetchFETCHKeyword_2_0 = (Keyword)cIsFetchAssignment_2.eContents().get(0);
		private final Assignment cPathAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPathAliasAttributeExpressionParserRuleCall_3_0 = (RuleCall)cPathAssignment_3.eContents().get(0);
		private final Assignment cVariableAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cVariableVariableDeclarationParserRuleCall_4_0 = (RuleCall)cVariableAssignment_4.eContents().get(0);
		
		//InnerJoin:
		//	"INNER" "JOIN" isFetch?="FETCH"? path=AliasAttributeExpression variable=VariableDeclaration;
		public ParserRule getRule() { return rule; }

		//"INNER" "JOIN" isFetch?="FETCH"? path=AliasAttributeExpression variable=VariableDeclaration
		public Group getGroup() { return cGroup; }

		//"INNER"
		public Keyword getINNERKeyword_0() { return cINNERKeyword_0; }

		//"JOIN"
		public Keyword getJOINKeyword_1() { return cJOINKeyword_1; }

		//isFetch?="FETCH"?
		public Assignment getIsFetchAssignment_2() { return cIsFetchAssignment_2; }

		//"FETCH"
		public Keyword getIsFetchFETCHKeyword_2_0() { return cIsFetchFETCHKeyword_2_0; }

		//path=AliasAttributeExpression
		public Assignment getPathAssignment_3() { return cPathAssignment_3; }

		//AliasAttributeExpression
		public RuleCall getPathAliasAttributeExpressionParserRuleCall_3_0() { return cPathAliasAttributeExpressionParserRuleCall_3_0; }

		//variable=VariableDeclaration
		public Assignment getVariableAssignment_4() { return cVariableAssignment_4; }

		//VariableDeclaration
		public RuleCall getVariableVariableDeclarationParserRuleCall_4_0() { return cVariableVariableDeclarationParserRuleCall_4_0; }
	}

	public class WhereClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WhereClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWHEREKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cWhereEntryAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cWhereEntryOrExpressionParserRuleCall_1_0 = (RuleCall)cWhereEntryAssignment_1.eContents().get(0);
		
		//WhereClause:
		//	"WHERE" whereEntry=OrExpression;
		public ParserRule getRule() { return rule; }

		//"WHERE" whereEntry=OrExpression
		public Group getGroup() { return cGroup; }

		//"WHERE"
		public Keyword getWHEREKeyword_0() { return cWHEREKeyword_0; }

		//whereEntry=OrExpression
		public Assignment getWhereEntryAssignment_1() { return cWhereEntryAssignment_1; }

		//OrExpression
		public RuleCall getWhereEntryOrExpressionParserRuleCall_1_0() { return cWhereEntryOrExpressionParserRuleCall_1_0; }
	}

	public class OrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrExpressionEntriesAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cORKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cEntriesAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cEntriesAndExpressionParserRuleCall_1_1_1_0 = (RuleCall)cEntriesAssignment_1_1_1.eContents().get(0);
		
		//OrExpression returns Expression:
		//	AndExpression ({OrExpression.entries+=current} ("OR" entries+=AndExpression)+)?;
		public ParserRule getRule() { return rule; }

		//AndExpression ({OrExpression.entries+=current} ("OR" entries+=AndExpression)+)?
		public Group getGroup() { return cGroup; }

		//AndExpression
		public RuleCall getAndExpressionParserRuleCall_0() { return cAndExpressionParserRuleCall_0; }

		//({OrExpression.entries+=current} ("OR" entries+=AndExpression)+)?
		public Group getGroup_1() { return cGroup_1; }

		//{OrExpression.entries+=current}
		public Action getOrExpressionEntriesAction_1_0() { return cOrExpressionEntriesAction_1_0; }

		//("OR" entries+=AndExpression)+
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"OR"
		public Keyword getORKeyword_1_1_0() { return cORKeyword_1_1_0; }

		//entries+=AndExpression
		public Assignment getEntriesAssignment_1_1_1() { return cEntriesAssignment_1_1_1; }

		//AndExpression
		public RuleCall getEntriesAndExpressionParserRuleCall_1_1_1_0() { return cEntriesAndExpressionParserRuleCall_1_1_1_0; }
	}

	public class AndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cComparisonOperatorExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndExpressionEntriesAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cANDKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cEntriesAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cEntriesComparisonOperatorExpressionParserRuleCall_1_1_1_0 = (RuleCall)cEntriesAssignment_1_1_1.eContents().get(0);
		
		//AndExpression returns Expression:
		//	ComparisonOperatorExpression ({AndExpression.entries+=current} ("AND" entries+=ComparisonOperatorExpression)+)?;
		public ParserRule getRule() { return rule; }

		//ComparisonOperatorExpression ({AndExpression.entries+=current} ("AND" entries+=ComparisonOperatorExpression)+)?
		public Group getGroup() { return cGroup; }

		//ComparisonOperatorExpression
		public RuleCall getComparisonOperatorExpressionParserRuleCall_0() { return cComparisonOperatorExpressionParserRuleCall_0; }

		//({AndExpression.entries+=current} ("AND" entries+=ComparisonOperatorExpression)+)?
		public Group getGroup_1() { return cGroup_1; }

		//{AndExpression.entries+=current}
		public Action getAndExpressionEntriesAction_1_0() { return cAndExpressionEntriesAction_1_0; }

		//("AND" entries+=ComparisonOperatorExpression)+
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"AND"
		public Keyword getANDKeyword_1_1_0() { return cANDKeyword_1_1_0; }

		//entries+=ComparisonOperatorExpression
		public Assignment getEntriesAssignment_1_1_1() { return cEntriesAssignment_1_1_1; }

		//ComparisonOperatorExpression
		public RuleCall getEntriesComparisonOperatorExpressionParserRuleCall_1_1_1_0() { return cEntriesComparisonOperatorExpressionParserRuleCall_1_1_1_0; }
	}

	public class ComparisonOperatorExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComparisonOperatorExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAdditionExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cComparisonOperatorExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorComparisonOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAdditionExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ComparisonOperatorExpression returns Expression:
		//	AdditionExpression ({ComparisonOperatorExpression.left=current} operator=ComparisonOperator
		//	right=AdditionExpression)*;
		public ParserRule getRule() { return rule; }

		//AdditionExpression ({ComparisonOperatorExpression.left=current} operator=ComparisonOperator right=AdditionExpression)*
		public Group getGroup() { return cGroup; }

		//AdditionExpression
		public RuleCall getAdditionExpressionParserRuleCall_0() { return cAdditionExpressionParserRuleCall_0; }

		//({ComparisonOperatorExpression.left=current} operator=ComparisonOperator right=AdditionExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{ComparisonOperatorExpression.left=current}
		public Action getComparisonOperatorExpressionLeftAction_1_0() { return cComparisonOperatorExpressionLeftAction_1_0; }

		//operator=ComparisonOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//ComparisonOperator
		public RuleCall getOperatorComparisonOperatorEnumRuleCall_1_1_0() { return cOperatorComparisonOperatorEnumRuleCall_1_1_0; }

		//right=AdditionExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//AdditionExpression
		public RuleCall getRightAdditionExpressionParserRuleCall_1_2_0() { return cRightAdditionExpressionParserRuleCall_1_2_0; }
	}

	public class AdditionExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AdditionExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicationExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAdditionExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorAdditionOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightMultiplicationExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AdditionExpression returns Expression:
		//	MultiplicationExpression ({AdditionExpression.left=current} operator=AdditionOperator
		//	right=MultiplicationExpression)*;
		public ParserRule getRule() { return rule; }

		//MultiplicationExpression ({AdditionExpression.left=current} operator=AdditionOperator right=MultiplicationExpression)*
		public Group getGroup() { return cGroup; }

		//MultiplicationExpression
		public RuleCall getMultiplicationExpressionParserRuleCall_0() { return cMultiplicationExpressionParserRuleCall_0; }

		//({AdditionExpression.left=current} operator=AdditionOperator right=MultiplicationExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{AdditionExpression.left=current}
		public Action getAdditionExpressionLeftAction_1_0() { return cAdditionExpressionLeftAction_1_0; }

		//operator=AdditionOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//AdditionOperator
		public RuleCall getOperatorAdditionOperatorEnumRuleCall_1_1_0() { return cOperatorAdditionOperatorEnumRuleCall_1_1_0; }

		//right=MultiplicationExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//MultiplicationExpression
		public RuleCall getRightMultiplicationExpressionParserRuleCall_1_2_0() { return cRightMultiplicationExpressionParserRuleCall_1_2_0; }
	}

	public class MultiplicationExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MultiplicationExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMultiplicationExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorMultiplicationOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightUnaryExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//MultiplicationExpression returns Expression:
		//	UnaryExpression ({MultiplicationExpression.left=current} operator=MultiplicationOperator right=UnaryExpression)*;
		public ParserRule getRule() { return rule; }

		//UnaryExpression ({MultiplicationExpression.left=current} operator=MultiplicationOperator right=UnaryExpression)*
		public Group getGroup() { return cGroup; }

		//UnaryExpression
		public RuleCall getUnaryExpressionParserRuleCall_0() { return cUnaryExpressionParserRuleCall_0; }

		//({MultiplicationExpression.left=current} operator=MultiplicationOperator right=UnaryExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{MultiplicationExpression.left=current}
		public Action getMultiplicationExpressionLeftAction_1_0() { return cMultiplicationExpressionLeftAction_1_0; }

		//operator=MultiplicationOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//MultiplicationOperator
		public RuleCall getOperatorMultiplicationOperatorEnumRuleCall_1_1_0() { return cOperatorMultiplicationOperatorEnumRuleCall_1_1_0; }

		//right=UnaryExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//UnaryExpression
		public RuleCall getRightUnaryExpressionParserRuleCall_1_2_0() { return cRightUnaryExpressionParserRuleCall_1_2_0; }
	}

	public class UnaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnaryExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cUnaryOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cUnaryOperatorUnaryOperatorEnumRuleCall_0_0 = (RuleCall)cUnaryOperatorAssignment_0.eContents().get(0);
		private final Assignment cRightAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRightConcreteExpressionParserRuleCall_1_0 = (RuleCall)cRightAssignment_1.eContents().get(0);
		
		//UnaryExpression returns Expression:
		//	unaryOperator=UnaryOperator? right=ConcreteExpression;
		public ParserRule getRule() { return rule; }

		//unaryOperator=UnaryOperator? right=ConcreteExpression
		public Group getGroup() { return cGroup; }

		//unaryOperator=UnaryOperator?
		public Assignment getUnaryOperatorAssignment_0() { return cUnaryOperatorAssignment_0; }

		//UnaryOperator
		public RuleCall getUnaryOperatorUnaryOperatorEnumRuleCall_0_0() { return cUnaryOperatorUnaryOperatorEnumRuleCall_0_0; }

		//right=ConcreteExpression
		public Assignment getRightAssignment_1() { return cRightAssignment_1; }

		//ConcreteExpression
		public RuleCall getRightConcreteExpressionParserRuleCall_1_0() { return cRightConcreteExpressionParserRuleCall_1_0; }
	}

	public class ConcreteExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConcreteExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cParenthesesExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExistsExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAllExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAnyExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSomeExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cCollectionExpressionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cNullComparisonExpressionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cEmptyComparisonExpressionParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cLikeExpressionParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cInExpressionParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cBetweenExpressionParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		
		//ConcreteExpression returns Expression:
		//	ParenthesesExpression | //	ComparisonOperatorExpression |
		//	ExistsExpression | AllExpression | AnyExpression | SomeExpression | CollectionExpression | NullComparisonExpression |
		//	EmptyComparisonExpression | LikeExpression | InExpression | BetweenExpression;
		public ParserRule getRule() { return rule; }

		//ParenthesesExpression | //	ComparisonOperatorExpression |
		//ExistsExpression | AllExpression | AnyExpression | SomeExpression | CollectionExpression | NullComparisonExpression |
		//EmptyComparisonExpression | LikeExpression | InExpression | BetweenExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//ParenthesesExpression
		public RuleCall getParenthesesExpressionParserRuleCall_0() { return cParenthesesExpressionParserRuleCall_0; }

		////	ComparisonOperatorExpression |
		//ExistsExpression
		public RuleCall getExistsExpressionParserRuleCall_1() { return cExistsExpressionParserRuleCall_1; }

		//AllExpression
		public RuleCall getAllExpressionParserRuleCall_2() { return cAllExpressionParserRuleCall_2; }

		//AnyExpression
		public RuleCall getAnyExpressionParserRuleCall_3() { return cAnyExpressionParserRuleCall_3; }

		//SomeExpression
		public RuleCall getSomeExpressionParserRuleCall_4() { return cSomeExpressionParserRuleCall_4; }

		//CollectionExpression
		public RuleCall getCollectionExpressionParserRuleCall_5() { return cCollectionExpressionParserRuleCall_5; }

		//NullComparisonExpression
		public RuleCall getNullComparisonExpressionParserRuleCall_6() { return cNullComparisonExpressionParserRuleCall_6; }

		//EmptyComparisonExpression
		public RuleCall getEmptyComparisonExpressionParserRuleCall_7() { return cEmptyComparisonExpressionParserRuleCall_7; }

		//LikeExpression
		public RuleCall getLikeExpressionParserRuleCall_8() { return cLikeExpressionParserRuleCall_8; }

		//InExpression
		public RuleCall getInExpressionParserRuleCall_9() { return cInExpressionParserRuleCall_9; }

		//BetweenExpression
		public RuleCall getBetweenExpressionParserRuleCall_10() { return cBetweenExpressionParserRuleCall_10; }
	}

	public class ParenthesesExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParenthesesExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cExpressionTermParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ParenthesesExpression returns Expression: //	'(' (ConditionalOrExpression | Subquery) ')'
		//	"(" ExpressionTerm ")";
		public ParserRule getRule() { return rule; }

		////	'(' (ConditionalOrExpression | Subquery) ')'
		//"(" ExpressionTerm ")"
		public Group getGroup() { return cGroup; }

		////	'(' (ConditionalOrExpression | Subquery) ')'
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//ExpressionTerm
		public RuleCall getExpressionTermParserRuleCall_1() { return cExpressionTermParserRuleCall_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class ExistsExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExistsExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEXISTSKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRightAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRightSubqueryParserRuleCall_1_0 = (RuleCall)cRightAssignment_1.eContents().get(0);
		
		////ParExpression returns Expression:
		////	"(" ExpressionTerm ")"
		////;
		////ComparisonOperatorExpression:
		////	left=Variable operator=ComparisonOperator right=ExpressionTerm 
		////;
		//ExistsExpression returns Expression: //	(isNot?='NOT')? // collision with general logical NOT
		//	"EXISTS" right=Subquery;
		public ParserRule getRule() { return rule; }

		////	(isNot?='NOT')? // collision with general logical NOT
		//"EXISTS" right=Subquery
		public Group getGroup() { return cGroup; }

		////	(isNot?='NOT')? // collision with general logical NOT
		//"EXISTS"
		public Keyword getEXISTSKeyword_0() { return cEXISTSKeyword_0; }

		//right=Subquery
		public Assignment getRightAssignment_1() { return cRightAssignment_1; }

		//Subquery
		public RuleCall getRightSubqueryParserRuleCall_1_0() { return cRightSubqueryParserRuleCall_1_0; }
	}

	public class AllExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AllExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cALLKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRightAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRightSubqueryParserRuleCall_1_0 = (RuleCall)cRightAssignment_1.eContents().get(0);
		
		//AllExpression returns Expression:
		//	"ALL" right=Subquery;
		public ParserRule getRule() { return rule; }

		//"ALL" right=Subquery
		public Group getGroup() { return cGroup; }

		//"ALL"
		public Keyword getALLKeyword_0() { return cALLKeyword_0; }

		//right=Subquery
		public Assignment getRightAssignment_1() { return cRightAssignment_1; }

		//Subquery
		public RuleCall getRightSubqueryParserRuleCall_1_0() { return cRightSubqueryParserRuleCall_1_0; }
	}

	public class AnyExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnyExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cANYKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRightAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRightSubqueryParserRuleCall_1_0 = (RuleCall)cRightAssignment_1.eContents().get(0);
		
		//AnyExpression returns Expression:
		//	"ANY" right=Subquery;
		public ParserRule getRule() { return rule; }

		//"ANY" right=Subquery
		public Group getGroup() { return cGroup; }

		//"ANY"
		public Keyword getANYKeyword_0() { return cANYKeyword_0; }

		//right=Subquery
		public Assignment getRightAssignment_1() { return cRightAssignment_1; }

		//Subquery
		public RuleCall getRightSubqueryParserRuleCall_1_0() { return cRightSubqueryParserRuleCall_1_0; }
	}

	public class SomeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SomeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSOMEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRightAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRightSubqueryParserRuleCall_1_0 = (RuleCall)cRightAssignment_1.eContents().get(0);
		
		//SomeExpression returns Expression:
		//	"SOME" right=Subquery;
		public ParserRule getRule() { return rule; }

		//"SOME" right=Subquery
		public Group getGroup() { return cGroup; }

		//"SOME"
		public Keyword getSOMEKeyword_0() { return cSOMEKeyword_0; }

		//right=Subquery
		public Assignment getRightAssignment_1() { return cRightAssignment_1; }

		//Subquery
		public RuleCall getRightSubqueryParserRuleCall_1_0() { return cRightSubqueryParserRuleCall_1_0; }
	}

	public class CollectionExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CollectionExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftVariableParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Assignment cIsNotAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIsNotNOTKeyword_1_0 = (Keyword)cIsNotAssignment_1.eContents().get(0);
		private final Keyword cMEMBERKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cOFKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRightAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRightAliasAttributeExpressionParserRuleCall_4_0 = (RuleCall)cRightAssignment_4.eContents().get(0);
		
		//CollectionExpression returns Expression:
		//	left=Variable isNot?="NOT"? "MEMBER" "OF"? right=AliasAttributeExpression;
		public ParserRule getRule() { return rule; }

		//left=Variable isNot?="NOT"? "MEMBER" "OF"? right=AliasAttributeExpression
		public Group getGroup() { return cGroup; }

		//left=Variable
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }

		//Variable
		public RuleCall getLeftVariableParserRuleCall_0_0() { return cLeftVariableParserRuleCall_0_0; }

		//isNot?="NOT"?
		public Assignment getIsNotAssignment_1() { return cIsNotAssignment_1; }

		//"NOT"
		public Keyword getIsNotNOTKeyword_1_0() { return cIsNotNOTKeyword_1_0; }

		//"MEMBER"
		public Keyword getMEMBERKeyword_2() { return cMEMBERKeyword_2; }

		//"OF"?
		public Keyword getOFKeyword_3() { return cOFKeyword_3; }

		//right=AliasAttributeExpression
		public Assignment getRightAssignment_4() { return cRightAssignment_4; }

		//AliasAttributeExpression
		public RuleCall getRightAliasAttributeExpressionParserRuleCall_4_0() { return cRightAliasAttributeExpressionParserRuleCall_4_0; }
	}

	public class NullComparisonExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NullComparisonExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftVariableParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Keyword cISKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIsNotAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cIsNotNOTKeyword_2_0 = (Keyword)cIsNotAssignment_2.eContents().get(0);
		private final Keyword cNULLKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//NullComparisonExpression returns Expression:
		//	left=Variable "IS" isNot?="NOT"? "NULL";
		public ParserRule getRule() { return rule; }

		//left=Variable "IS" isNot?="NOT"? "NULL"
		public Group getGroup() { return cGroup; }

		//left=Variable
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }

		//Variable
		public RuleCall getLeftVariableParserRuleCall_0_0() { return cLeftVariableParserRuleCall_0_0; }

		//"IS"
		public Keyword getISKeyword_1() { return cISKeyword_1; }

		//isNot?="NOT"?
		public Assignment getIsNotAssignment_2() { return cIsNotAssignment_2; }

		//"NOT"
		public Keyword getIsNotNOTKeyword_2_0() { return cIsNotNOTKeyword_2_0; }

		//"NULL"
		public Keyword getNULLKeyword_3() { return cNULLKeyword_3; }
	}

	public class EmptyComparisonExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EmptyComparisonExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftVariableParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Keyword cISKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIsNotAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cIsNotNOTKeyword_2_0 = (Keyword)cIsNotAssignment_2.eContents().get(0);
		private final Keyword cEMPTYKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//EmptyComparisonExpression returns Expression:
		//	left=Variable "IS" isNot?="NOT"? "EMPTY";
		public ParserRule getRule() { return rule; }

		//left=Variable "IS" isNot?="NOT"? "EMPTY"
		public Group getGroup() { return cGroup; }

		//left=Variable
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }

		//Variable
		public RuleCall getLeftVariableParserRuleCall_0_0() { return cLeftVariableParserRuleCall_0_0; }

		//"IS"
		public Keyword getISKeyword_1() { return cISKeyword_1; }

		//isNot?="NOT"?
		public Assignment getIsNotAssignment_2() { return cIsNotAssignment_2; }

		//"NOT"
		public Keyword getIsNotNOTKeyword_2_0() { return cIsNotNOTKeyword_2_0; }

		//"EMPTY"
		public Keyword getEMPTYKeyword_3() { return cEMPTYKeyword_3; }
	}

	public class LikeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LikeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftVariableParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Assignment cIsNotAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIsNotNOTKeyword_1_0 = (Keyword)cIsNotAssignment_1.eContents().get(0);
		private final Keyword cLIKEKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightStringLiteralParserRuleCall_3_0 = (RuleCall)cRightAssignment_3.eContents().get(0);
		
		//LikeExpression returns Expression:
		//	left=Variable isNot?="NOT"? "LIKE" right=StringLiteral;
		public ParserRule getRule() { return rule; }

		//left=Variable isNot?="NOT"? "LIKE" right=StringLiteral
		public Group getGroup() { return cGroup; }

		//left=Variable
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }

		//Variable
		public RuleCall getLeftVariableParserRuleCall_0_0() { return cLeftVariableParserRuleCall_0_0; }

		//isNot?="NOT"?
		public Assignment getIsNotAssignment_1() { return cIsNotAssignment_1; }

		//"NOT"
		public Keyword getIsNotNOTKeyword_1_0() { return cIsNotNOTKeyword_1_0; }

		//"LIKE"
		public Keyword getLIKEKeyword_2() { return cLIKEKeyword_2; }

		//right=StringLiteral
		public Assignment getRightAssignment_3() { return cRightAssignment_3; }

		//StringLiteral
		public RuleCall getRightStringLiteralParserRuleCall_3_0() { return cRightStringLiteralParserRuleCall_3_0; }
	}

	public class InExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInSeqExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInQueryExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//InExpression returns Expression:
		//	InSeqExpression | InQueryExpression;
		public ParserRule getRule() { return rule; }

		//InSeqExpression | InQueryExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//InSeqExpression
		public RuleCall getInSeqExpressionParserRuleCall_0() { return cInSeqExpressionParserRuleCall_0; }

		//InQueryExpression
		public RuleCall getInQueryExpressionParserRuleCall_1() { return cInQueryExpressionParserRuleCall_1; }
	}

	public class InSeqExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InSeqExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftVariableParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Assignment cIsNotAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIsNotNOTKeyword_1_0 = (Keyword)cIsNotAssignment_1.eContents().get(0);
		private final Keyword cINKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cItemsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cItemsVariableParserRuleCall_4_0 = (RuleCall)cItemsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cItemsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cItemsVariableParserRuleCall_5_1_0 = (RuleCall)cItemsAssignment_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//InSeqExpression returns Expression:
		//	left=Variable isNot?="NOT"? "IN" "(" items+=Variable ("," items+=Variable)* ")";
		public ParserRule getRule() { return rule; }

		//left=Variable isNot?="NOT"? "IN" "(" items+=Variable ("," items+=Variable)* ")"
		public Group getGroup() { return cGroup; }

		//left=Variable
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }

		//Variable
		public RuleCall getLeftVariableParserRuleCall_0_0() { return cLeftVariableParserRuleCall_0_0; }

		//isNot?="NOT"?
		public Assignment getIsNotAssignment_1() { return cIsNotAssignment_1; }

		//"NOT"
		public Keyword getIsNotNOTKeyword_1_0() { return cIsNotNOTKeyword_1_0; }

		//"IN"
		public Keyword getINKeyword_2() { return cINKeyword_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//items+=Variable
		public Assignment getItemsAssignment_4() { return cItemsAssignment_4; }

		//Variable
		public RuleCall getItemsVariableParserRuleCall_4_0() { return cItemsVariableParserRuleCall_4_0; }

		//("," items+=Variable)*
		public Group getGroup_5() { return cGroup_5; }

		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//items+=Variable
		public Assignment getItemsAssignment_5_1() { return cItemsAssignment_5_1; }

		//Variable
		public RuleCall getItemsVariableParserRuleCall_5_1_0() { return cItemsVariableParserRuleCall_5_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}

	public class InQueryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InQueryExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftVariableParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Assignment cIsNotAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIsNotNOTKeyword_1_0 = (Keyword)cIsNotAssignment_1.eContents().get(0);
		private final Keyword cINKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cQueryAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cQuerySubqueryParserRuleCall_3_0 = (RuleCall)cQueryAssignment_3.eContents().get(0);
		
		//InQueryExpression returns Expression:
		//	left=Variable isNot?="NOT"? "IN" query=Subquery;
		public ParserRule getRule() { return rule; }

		//left=Variable isNot?="NOT"? "IN" query=Subquery
		public Group getGroup() { return cGroup; }

		//left=Variable
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }

		//Variable
		public RuleCall getLeftVariableParserRuleCall_0_0() { return cLeftVariableParserRuleCall_0_0; }

		//isNot?="NOT"?
		public Assignment getIsNotAssignment_1() { return cIsNotAssignment_1; }

		//"NOT"
		public Keyword getIsNotNOTKeyword_1_0() { return cIsNotNOTKeyword_1_0; }

		//"IN"
		public Keyword getINKeyword_2() { return cINKeyword_2; }

		//query=Subquery
		public Assignment getQueryAssignment_3() { return cQueryAssignment_3; }

		//Subquery
		public RuleCall getQuerySubqueryParserRuleCall_3_0() { return cQuerySubqueryParserRuleCall_3_0; }
	}

	public class BetweenExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BetweenExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftVariableParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Assignment cIsNotAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIsNotNOTKeyword_1_0 = (Keyword)cIsNotAssignment_1.eContents().get(0);
		private final Keyword cBETWEENKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMinAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMinValueParserRuleCall_3_0 = (RuleCall)cMinAssignment_3.eContents().get(0);
		private final Keyword cANDKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cMaxAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMaxValueParserRuleCall_5_0 = (RuleCall)cMaxAssignment_5.eContents().get(0);
		
		//BetweenExpression returns Expression:
		//	left=Variable isNot?="NOT"? "BETWEEN" min=Value "AND" max=Value;
		public ParserRule getRule() { return rule; }

		//left=Variable isNot?="NOT"? "BETWEEN" min=Value "AND" max=Value
		public Group getGroup() { return cGroup; }

		//left=Variable
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }

		//Variable
		public RuleCall getLeftVariableParserRuleCall_0_0() { return cLeftVariableParserRuleCall_0_0; }

		//isNot?="NOT"?
		public Assignment getIsNotAssignment_1() { return cIsNotAssignment_1; }

		//"NOT"
		public Keyword getIsNotNOTKeyword_1_0() { return cIsNotNOTKeyword_1_0; }

		//"BETWEEN"
		public Keyword getBETWEENKeyword_2() { return cBETWEENKeyword_2; }

		//min=Value
		public Assignment getMinAssignment_3() { return cMinAssignment_3; }

		//Value
		public RuleCall getMinValueParserRuleCall_3_0() { return cMinValueParserRuleCall_3_0; }

		//"AND"
		public Keyword getANDKeyword_4() { return cANDKeyword_4; }

		//max=Value
		public Assignment getMaxAssignment_5() { return cMaxAssignment_5; }

		//Value
		public RuleCall getMaxValueParserRuleCall_5_0() { return cMaxValueParserRuleCall_5_0; }
	}

	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Variable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAliasAttributeExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cParameterExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Variable:
		//	AliasAttributeExpression | ParameterExpression | Value;
		public ParserRule getRule() { return rule; }

		//AliasAttributeExpression | ParameterExpression | Value
		public Alternatives getAlternatives() { return cAlternatives; }

		//AliasAttributeExpression
		public RuleCall getAliasAttributeExpressionParserRuleCall_0() { return cAliasAttributeExpressionParserRuleCall_0; }

		//ParameterExpression
		public RuleCall getParameterExpressionParserRuleCall_1() { return cParameterExpressionParserRuleCall_1; }

		//Value
		public RuleCall getValueParserRuleCall_2() { return cValueParserRuleCall_2; }
	}

	public class ExpressionTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionTerm");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSubqueryParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ExpressionTerm:
		//	Variable | Subquery;
		public ParserRule getRule() { return rule; }

		//Variable | Subquery
		public Alternatives getAlternatives() { return cAlternatives; }

		//Variable
		public RuleCall getVariableParserRuleCall_0() { return cVariableParserRuleCall_0; }

		//Subquery
		public RuleCall getSubqueryParserRuleCall_1() { return cSubqueryParserRuleCall_1; }
	}

	public class AliasAttributeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AliasAttributeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAliasAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cAliasVariableDeclarationCrossReference_0_0 = (CrossReference)cAliasAssignment_0.eContents().get(0);
		private final RuleCall cAliasVariableDeclarationIDTerminalRuleCall_0_0_1 = (RuleCall)cAliasVariableDeclarationCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAttributesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAttributesIDTerminalRuleCall_1_1_0 = (RuleCall)cAttributesAssignment_1_1.eContents().get(0);
		
		//AliasAttributeExpression:
		//	alias=[VariableDeclaration] ("." attributes+=ID)*;
		public ParserRule getRule() { return rule; }

		//alias=[VariableDeclaration] ("." attributes+=ID)*
		public Group getGroup() { return cGroup; }

		//alias=[VariableDeclaration]
		public Assignment getAliasAssignment_0() { return cAliasAssignment_0; }

		//[VariableDeclaration]
		public CrossReference getAliasVariableDeclarationCrossReference_0_0() { return cAliasVariableDeclarationCrossReference_0_0; }

		//ID
		public RuleCall getAliasVariableDeclarationIDTerminalRuleCall_0_0_1() { return cAliasVariableDeclarationIDTerminalRuleCall_0_0_1; }

		//("." attributes+=ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//attributes+=ID
		public Assignment getAttributesAssignment_1_1() { return cAttributesAssignment_1_1; }

		//ID
		public RuleCall getAttributesIDTerminalRuleCall_1_1_0() { return cAttributesIDTerminalRuleCall_1_1_0; }
	}

	public class ParameterExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//ParameterExpression:
		//	":" name=ID;
		public ParserRule getRule() { return rule; }

		//":" name=ID
		public Group getGroup() { return cGroup; }

		//":"
		public Keyword getColonKeyword_0() { return cColonKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Function");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStringFunctionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNumericFunctionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Function:
		//	StringFunction | NumericFunction;
		public ParserRule getRule() { return rule; }

		//StringFunction | NumericFunction
		public Alternatives getAlternatives() { return cAlternatives; }

		//StringFunction
		public RuleCall getStringFunctionParserRuleCall_0() { return cStringFunctionParserRuleCall_0; }

		//NumericFunction
		public RuleCall getNumericFunctionParserRuleCall_1() { return cNumericFunctionParserRuleCall_1; }
	}

	public class StringFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameStringFunctionNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParamsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParamsVariableParserRuleCall_2_0 = (RuleCall)cParamsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cParamsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cParamsVariableParserRuleCall_3_1_0 = (RuleCall)cParamsAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//StringFunction returns Function:
		//	name=StringFunctionName "(" params+=Variable ("," params+=Variable) ")";
		public ParserRule getRule() { return rule; }

		//name=StringFunctionName "(" params+=Variable ("," params+=Variable) ")"
		public Group getGroup() { return cGroup; }

		//name=StringFunctionName
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//StringFunctionName
		public RuleCall getNameStringFunctionNameParserRuleCall_0_0() { return cNameStringFunctionNameParserRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//params+=Variable
		public Assignment getParamsAssignment_2() { return cParamsAssignment_2; }

		//Variable
		public RuleCall getParamsVariableParserRuleCall_2_0() { return cParamsVariableParserRuleCall_2_0; }

		//"," params+=Variable
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//params+=Variable
		public Assignment getParamsAssignment_3_1() { return cParamsAssignment_3_1; }

		//Variable
		public RuleCall getParamsVariableParserRuleCall_3_1_0() { return cParamsVariableParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class StringFunctionNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringFunctionName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cCONCATKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSUBSTRINGKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cLOWERKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cUPPERKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cLENGTHKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cLOCATEKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//StringFunctionName:
		//	"CONCAT" | "SUBSTRING" | //	TRIM ([[trim_specification] [trim_character] FROM] string_primary) | 
		//	"LOWER" | "UPPER" | "LENGTH" | "LOCATE";
		public ParserRule getRule() { return rule; }

		//"CONCAT" | "SUBSTRING" | //	TRIM ([[trim_specification] [trim_character] FROM] string_primary) | 
		//"LOWER" | "UPPER" | "LENGTH" | "LOCATE"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"CONCAT"
		public Keyword getCONCATKeyword_0() { return cCONCATKeyword_0; }

		//"SUBSTRING"
		public Keyword getSUBSTRINGKeyword_1() { return cSUBSTRINGKeyword_1; }

		////	TRIM ([[trim_specification] [trim_character] FROM] string_primary) | 
		//"LOWER"
		public Keyword getLOWERKeyword_2() { return cLOWERKeyword_2; }

		//"UPPER"
		public Keyword getUPPERKeyword_3() { return cUPPERKeyword_3; }

		//"LENGTH"
		public Keyword getLENGTHKeyword_4() { return cLENGTHKeyword_4; }

		//"LOCATE"
		public Keyword getLOCATEKeyword_5() { return cLOCATEKeyword_5; }
	}

	public class NumericFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumericFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameNumericFunctionNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParamsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParamsVariableParserRuleCall_2_0 = (RuleCall)cParamsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cParamsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cParamsVariableParserRuleCall_3_1_0 = (RuleCall)cParamsAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//NumericFunction returns Function:
		//	name=NumericFunctionName "(" params+=Variable ("," params+=Variable) ")";
		public ParserRule getRule() { return rule; }

		//name=NumericFunctionName "(" params+=Variable ("," params+=Variable) ")"
		public Group getGroup() { return cGroup; }

		//name=NumericFunctionName
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//NumericFunctionName
		public RuleCall getNameNumericFunctionNameParserRuleCall_0_0() { return cNameNumericFunctionNameParserRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//params+=Variable
		public Assignment getParamsAssignment_2() { return cParamsAssignment_2; }

		//Variable
		public RuleCall getParamsVariableParserRuleCall_2_0() { return cParamsVariableParserRuleCall_2_0; }

		//"," params+=Variable
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//params+=Variable
		public Assignment getParamsAssignment_3_1() { return cParamsAssignment_3_1; }

		//Variable
		public RuleCall getParamsVariableParserRuleCall_3_1_0() { return cParamsVariableParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class NumericFunctionNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumericFunctionName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cABSKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSQRTKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cMODKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cSIZEKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//NumericFunctionName:
		//	"ABS" | "SQRT" | "MOD" | "SIZE";
		public ParserRule getRule() { return rule; }

		//"ABS" | "SQRT" | "MOD" | "SIZE"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"ABS"
		public Keyword getABSKeyword_0() { return cABSKeyword_0; }

		//"SQRT"
		public Keyword getSQRTKeyword_1() { return cSQRTKeyword_1; }

		//"MOD"
		public Keyword getMODKeyword_2() { return cMODKeyword_2; }

		//"SIZE"
		public Keyword getSIZEKeyword_3() { return cSIZEKeyword_3; }
	}

	public class DateTimeFunctionNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DateTimeFunctionName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cCURRENT_DATEKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cCURRENT_TIMEKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cCURRENT_TIMESTAMPKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//DateTimeFunctionName:
		//	"CURRENT_DATE" | "CURRENT_TIME" | "CURRENT_TIMESTAMP";
		public ParserRule getRule() { return rule; }

		//"CURRENT_DATE" | "CURRENT_TIME" | "CURRENT_TIMESTAMP"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"CURRENT_DATE"
		public Keyword getCURRENT_DATEKeyword_0() { return cCURRENT_DATEKeyword_0; }

		//"CURRENT_TIME"
		public Keyword getCURRENT_TIMEKeyword_1() { return cCURRENT_TIMEKeyword_1; }

		//"CURRENT_TIMESTAMP"
		public Keyword getCURRENT_TIMESTAMPKeyword_2() { return cCURRENT_TIMESTAMPKeyword_2; }
	}

	public class ParameterNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterName");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		////DoubleExpression: 
		////	value=SIGNED_DOUBLE
		////; 
		////
		////LongExpression: 
		////	value=SINGED_LONG	
		////;
		//ParameterName:
		//	ID;
		public ParserRule getRule() { return rule; }

		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}

	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntegerLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNullLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBooleanLiteralParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Value:
		//	IntegerLiteral | StringLiteral | NullLiteral | BooleanLiteral;
		public ParserRule getRule() { return rule; }

		//IntegerLiteral | StringLiteral | NullLiteral | BooleanLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//IntegerLiteral
		public RuleCall getIntegerLiteralParserRuleCall_0() { return cIntegerLiteralParserRuleCall_0; }

		//StringLiteral
		public RuleCall getStringLiteralParserRuleCall_1() { return cStringLiteralParserRuleCall_1; }

		//NullLiteral
		public RuleCall getNullLiteralParserRuleCall_2() { return cNullLiteralParserRuleCall_2; }

		//BooleanLiteral
		public RuleCall getBooleanLiteralParserRuleCall_3() { return cBooleanLiteralParserRuleCall_3; }
	}

	public class IntegerLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//IntegerLiteral:
		//	value=INT;
		public ParserRule getRule() { return rule; }

		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}

	public class StringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringLiteral:
		//	value=STRING;
		public ParserRule getRule() { return rule; }

		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}

	public class NullLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NullLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cValueNULLKeyword_0 = (Keyword)cValueAssignment.eContents().get(0);
		
		//NullLiteral:
		//	value="NULL";
		public ParserRule getRule() { return rule; }

		//value="NULL"
		public Assignment getValueAssignment() { return cValueAssignment; }

		//"NULL"
		public Keyword getValueNULLKeyword_0() { return cValueNULLKeyword_0; }
	}

	public class BooleanLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cValueAlternatives_0 = (Alternatives)cValueAssignment.eContents().get(0);
		private final Keyword cValueTRUEKeyword_0_0 = (Keyword)cValueAlternatives_0.eContents().get(0);
		private final Keyword cValueFALSEKeyword_0_1 = (Keyword)cValueAlternatives_0.eContents().get(1);
		
		//BooleanLiteral:
		//	value=("TRUE" | "FALSE");
		public ParserRule getRule() { return rule; }

		//value=("TRUE" | "FALSE")
		public Assignment getValueAssignment() { return cValueAssignment; }

		//"TRUE" | "FALSE"
		public Alternatives getValueAlternatives_0() { return cValueAlternatives_0; }

		//"TRUE"
		public Keyword getValueTRUEKeyword_0_0() { return cValueTRUEKeyword_0_0; }

		//"FALSE"
		public Keyword getValueFALSEKeyword_0_1() { return cValueFALSEKeyword_0_1; }
	}

	public class SubqueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Subquery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cSelectStatementParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		////IntegerLiteral:
		////	INT
		////;                                 
		////
		////StringLiteral:
		////	STRING
		////;                                         
		////
		////BooleanLiteral:
		////	'true' | 'false'
		////;
		////
		////NullLiteral:
		////	'null'
		////;
		////
		////Literal:
		////	IntegerLiteral |
		////	BooleanLiteral |
		////	StringLiteral |
		////	NullLiteral
		////;
		//Subquery returns SelectStatement:
		//	"(" SelectStatement ")";
		public ParserRule getRule() { return rule; }

		//"(" SelectStatement ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//SelectStatement
		public RuleCall getSelectStatementParserRuleCall_1() { return cSelectStatementParserRuleCall_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	
	
	public class OrderByDirectionElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "OrderByDirection");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAscEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAscASCKeyword_0_0 = (Keyword)cAscEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDescEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDescDESCKeyword_1_0 = (Keyword)cDescEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum OrderByDirection:
		//	asc="ASC" | desc="DESC";
		public EnumRule getRule() { return rule; }

		//asc="ASC" | desc="DESC"
		public Alternatives getAlternatives() { return cAlternatives; }

		//asc="ASC"
		public EnumLiteralDeclaration getAscEnumLiteralDeclaration_0() { return cAscEnumLiteralDeclaration_0; }

		//"ASC"
		public Keyword getAscASCKeyword_0_0() { return cAscASCKeyword_0_0; }

		//desc="DESC"
		public EnumLiteralDeclaration getDescEnumLiteralDeclaration_1() { return cDescEnumLiteralDeclaration_1; }

		//"DESC"
		public Keyword getDescDESCKeyword_1_0() { return cDescDESCKeyword_1_0; }
	}

	public class UnaryOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "UnaryOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPositiveEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPositivePlusSignKeyword_0_0 = (Keyword)cPositiveEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNegativeEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNegativeHyphenMinusKeyword_1_0 = (Keyword)cNegativeEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLogicalNotEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLogicalNotNOTKeyword_2_0 = (Keyword)cLogicalNotEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum UnaryOperator:
		//	positive="+" | negative="-" | logicalNot="NOT";
		public EnumRule getRule() { return rule; }

		//positive="+" | negative="-" | logicalNot="NOT"
		public Alternatives getAlternatives() { return cAlternatives; }

		//positive="+"
		public EnumLiteralDeclaration getPositiveEnumLiteralDeclaration_0() { return cPositiveEnumLiteralDeclaration_0; }

		//"+"
		public Keyword getPositivePlusSignKeyword_0_0() { return cPositivePlusSignKeyword_0_0; }

		//negative="-"
		public EnumLiteralDeclaration getNegativeEnumLiteralDeclaration_1() { return cNegativeEnumLiteralDeclaration_1; }

		//"-"
		public Keyword getNegativeHyphenMinusKeyword_1_0() { return cNegativeHyphenMinusKeyword_1_0; }

		//logicalNot="NOT"
		public EnumLiteralDeclaration getLogicalNotEnumLiteralDeclaration_2() { return cLogicalNotEnumLiteralDeclaration_2; }

		//"NOT"
		public Keyword getLogicalNotNOTKeyword_2_0() { return cLogicalNotNOTKeyword_2_0; }
	}

	public class AdditionOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "AdditionOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAddEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAddPlusSignKeyword_0_0 = (Keyword)cAddEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSubtractEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSubtractHyphenMinusKeyword_1_0 = (Keyword)cSubtractEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum AdditionOperator:
		//	add="+" | subtract="-";
		public EnumRule getRule() { return rule; }

		//add="+" | subtract="-"
		public Alternatives getAlternatives() { return cAlternatives; }

		//add="+"
		public EnumLiteralDeclaration getAddEnumLiteralDeclaration_0() { return cAddEnumLiteralDeclaration_0; }

		//"+"
		public Keyword getAddPlusSignKeyword_0_0() { return cAddPlusSignKeyword_0_0; }

		//subtract="-"
		public EnumLiteralDeclaration getSubtractEnumLiteralDeclaration_1() { return cSubtractEnumLiteralDeclaration_1; }

		//"-"
		public Keyword getSubtractHyphenMinusKeyword_1_0() { return cSubtractHyphenMinusKeyword_1_0; }
	}

	public class MultiplicationOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "MultiplicationOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMultiplyEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMultiplyAsteriskKeyword_0_0 = (Keyword)cMultiplyEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDivideEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDivideSolidusKeyword_1_0 = (Keyword)cDivideEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum MultiplicationOperator:
		//	multiply="*" | divide="/";
		public EnumRule getRule() { return rule; }

		//multiply="*" | divide="/"
		public Alternatives getAlternatives() { return cAlternatives; }

		//multiply="*"
		public EnumLiteralDeclaration getMultiplyEnumLiteralDeclaration_0() { return cMultiplyEnumLiteralDeclaration_0; }

		//"*"
		public Keyword getMultiplyAsteriskKeyword_0_0() { return cMultiplyAsteriskKeyword_0_0; }

		//divide="/"
		public EnumLiteralDeclaration getDivideEnumLiteralDeclaration_1() { return cDivideEnumLiteralDeclaration_1; }

		//"/"
		public Keyword getDivideSolidusKeyword_1_0() { return cDivideSolidusKeyword_1_0; }
	}

	public class ComparisonOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ComparisonOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLessThenEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLessThenLessThanSignKeyword_0_0 = (Keyword)cLessThenEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cGreaterThenEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cGreaterThenGreaterThanSignKeyword_1_0 = (Keyword)cGreaterThenEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLessEqualEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLessEqualLessThanSignEqualsSignKeyword_2_0 = (Keyword)cLessEqualEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cGreaterEqualEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cGreaterEqualGreaterThanSignEqualsSignKeyword_3_0 = (Keyword)cGreaterEqualEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cEqualEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cEqualEqualsSignKeyword_4_0 = (Keyword)cEqualEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cNotEqualEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cNotEqualLessThanSignGreaterThanSignKeyword_5_0 = (Keyword)cNotEqualEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum ComparisonOperator:
		//	lessThen="<" | greaterThen=">" | lessEqual="<=" | greaterEqual=">=" | equal="=" | notEqual="<>";
		public EnumRule getRule() { return rule; }

		//lessThen="<" | greaterThen=">" | lessEqual="<=" | greaterEqual=">=" | equal="=" | notEqual="<>"
		public Alternatives getAlternatives() { return cAlternatives; }

		//lessThen="<"
		public EnumLiteralDeclaration getLessThenEnumLiteralDeclaration_0() { return cLessThenEnumLiteralDeclaration_0; }

		//"<"
		public Keyword getLessThenLessThanSignKeyword_0_0() { return cLessThenLessThanSignKeyword_0_0; }

		//greaterThen=">"
		public EnumLiteralDeclaration getGreaterThenEnumLiteralDeclaration_1() { return cGreaterThenEnumLiteralDeclaration_1; }

		//">"
		public Keyword getGreaterThenGreaterThanSignKeyword_1_0() { return cGreaterThenGreaterThanSignKeyword_1_0; }

		//lessEqual="<="
		public EnumLiteralDeclaration getLessEqualEnumLiteralDeclaration_2() { return cLessEqualEnumLiteralDeclaration_2; }

		//"<="
		public Keyword getLessEqualLessThanSignEqualsSignKeyword_2_0() { return cLessEqualLessThanSignEqualsSignKeyword_2_0; }

		//greaterEqual=">="
		public EnumLiteralDeclaration getGreaterEqualEnumLiteralDeclaration_3() { return cGreaterEqualEnumLiteralDeclaration_3; }

		//">="
		public Keyword getGreaterEqualGreaterThanSignEqualsSignKeyword_3_0() { return cGreaterEqualGreaterThanSignEqualsSignKeyword_3_0; }

		//equal="="
		public EnumLiteralDeclaration getEqualEnumLiteralDeclaration_4() { return cEqualEnumLiteralDeclaration_4; }

		//"="
		public Keyword getEqualEqualsSignKeyword_4_0() { return cEqualEqualsSignKeyword_4_0; }

		//notEqual="<>"
		public EnumLiteralDeclaration getNotEqualEnumLiteralDeclaration_5() { return cNotEqualEnumLiteralDeclaration_5; }

		//"<>"
		public Keyword getNotEqualLessThanSignGreaterThanSignKeyword_5_0() { return cNotEqualLessThanSignGreaterThanSignKeyword_5_0; }
	}
	
	private JPQLQueryElements pJPQLQuery;
	private SelectStatementElements pSelectStatement;
	private GroupByClauseElements pGroupByClause;
	private HavingClauseElements pHavingClause;
	private OrderByClauseElements pOrderByClause;
	private OrderBySpecElements pOrderBySpec;
	private OrderByDirectionElements unknownRuleOrderByDirection;
	private UpdateStatementElements pUpdateStatement;
	private UpdateClauseElements pUpdateClause;
	private SetClauseElements pSetClause;
	private UpdateItemElements pUpdateItem;
	private DeleteStatementElements pDeleteStatement;
	private DeleteClauseElements pDeleteClause;
	private SelectClauseElements pSelectClause;
	private SelectExpressionElements pSelectExpression;
	private SelectAggregateExpressionElements pSelectAggregateExpression;
	private AvgAggregateElements pAvgAggregate;
	private CountAggregateElements pCountAggregate;
	private MaxAggregateElements pMaxAggregate;
	private MinAggregateElements pMinAggregate;
	private SumAggregateElements pSumAggregate;
	private SelectConstructorExpressionElements pSelectConstructorExpression;
	private FromClauseElements pFromClause;
	private FromEntryElements pFromEntry;
	private VariableDeclarationElements pVariableDeclaration;
	private FromClassElements pFromClass;
	private QualifiedIdentifierElements pQualifiedIdentifier;
	private FromClassIdElements pFromClassId;
	private FromClassVarElements pFromClassVar;
	private FromCollectionElements pFromCollection;
	private FromJoinElements pFromJoin;
	private JoinElements pJoin;
	private LeftJoinElements pLeftJoin;
	private InnerJoinElements pInnerJoin;
	private WhereClauseElements pWhereClause;
	private OrExpressionElements pOrExpression;
	private AndExpressionElements pAndExpression;
	private ComparisonOperatorExpressionElements pComparisonOperatorExpression;
	private AdditionExpressionElements pAdditionExpression;
	private MultiplicationExpressionElements pMultiplicationExpression;
	private UnaryExpressionElements pUnaryExpression;
	private ConcreteExpressionElements pConcreteExpression;
	private ParenthesesExpressionElements pParenthesesExpression;
	private ExistsExpressionElements pExistsExpression;
	private AllExpressionElements pAllExpression;
	private AnyExpressionElements pAnyExpression;
	private SomeExpressionElements pSomeExpression;
	private CollectionExpressionElements pCollectionExpression;
	private NullComparisonExpressionElements pNullComparisonExpression;
	private EmptyComparisonExpressionElements pEmptyComparisonExpression;
	private LikeExpressionElements pLikeExpression;
	private InExpressionElements pInExpression;
	private InSeqExpressionElements pInSeqExpression;
	private InQueryExpressionElements pInQueryExpression;
	private BetweenExpressionElements pBetweenExpression;
	private VariableElements pVariable;
	private ExpressionTermElements pExpressionTerm;
	private AliasAttributeExpressionElements pAliasAttributeExpression;
	private ParameterExpressionElements pParameterExpression;
	private FunctionElements pFunction;
	private StringFunctionElements pStringFunction;
	private StringFunctionNameElements pStringFunctionName;
	private NumericFunctionElements pNumericFunction;
	private NumericFunctionNameElements pNumericFunctionName;
	private DateTimeFunctionNameElements pDateTimeFunctionName;
	private ParameterNameElements pParameterName;
	private ValueElements pValue;
	private IntegerLiteralElements pIntegerLiteral;
	private StringLiteralElements pStringLiteral;
	private NullLiteralElements pNullLiteral;
	private BooleanLiteralElements pBooleanLiteral;
	private SubqueryElements pSubquery;
	private UnaryOperatorElements unknownRuleUnaryOperator;
	private AdditionOperatorElements unknownRuleAdditionOperator;
	private MultiplicationOperatorElements unknownRuleMultiplicationOperator;
	private ComparisonOperatorElements unknownRuleComparisonOperator;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public JPQLGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//// http://www.datanucleus.org/products/accessplatform_3_1/jpa/jpql.html
	//// Current spec: JPA 3.0, JPQL BNF at bottom
	//JPQLQuery:
	//	SelectStatement | UpdateStatement | DeleteStatement;
	public JPQLQueryElements getJPQLQueryAccess() {
		return (pJPQLQuery != null) ? pJPQLQuery : (pJPQLQuery = new JPQLQueryElements());
	}
	
	public ParserRule getJPQLQueryRule() {
		return getJPQLQueryAccess().getRule();
	}

	//SelectStatement:
	//	selectClause=SelectClause? fromClause=FromClause whereClause=WhereClause? groupByClause=GroupByClause?
	//	orderByClause=OrderByClause?;
	public SelectStatementElements getSelectStatementAccess() {
		return (pSelectStatement != null) ? pSelectStatement : (pSelectStatement = new SelectStatementElements());
	}
	
	public ParserRule getSelectStatementRule() {
		return getSelectStatementAccess().getRule();
	}

	//GroupByClause:
	//	"GROUP" "BY" grouping+=AliasAttributeExpression ("," grouping+=AliasAttributeExpression)* havingClause=HavingClause?;
	public GroupByClauseElements getGroupByClauseAccess() {
		return (pGroupByClause != null) ? pGroupByClause : (pGroupByClause = new GroupByClauseElements());
	}
	
	public ParserRule getGroupByClauseRule() {
		return getGroupByClauseAccess().getRule();
	}

	//HavingClause:
	//	"HAVING" having=OrExpression;
	public HavingClauseElements getHavingClauseAccess() {
		return (pHavingClause != null) ? pHavingClause : (pHavingClause = new HavingClauseElements());
	}
	
	public ParserRule getHavingClauseRule() {
		return getHavingClauseAccess().getRule();
	}

	//OrderByClause:
	//	"ORDER" "BY" ordering+=OrderBySpec ("," ordering+=OrderBySpec)*;
	public OrderByClauseElements getOrderByClauseAccess() {
		return (pOrderByClause != null) ? pOrderByClause : (pOrderByClause = new OrderByClauseElements());
	}
	
	public ParserRule getOrderByClauseRule() {
		return getOrderByClauseAccess().getRule();
	}

	//OrderBySpec:
	//	AliasAttributeExpression direction=OrderByDirection;
	public OrderBySpecElements getOrderBySpecAccess() {
		return (pOrderBySpec != null) ? pOrderBySpec : (pOrderBySpec = new OrderBySpecElements());
	}
	
	public ParserRule getOrderBySpecRule() {
		return getOrderBySpecAccess().getRule();
	}

	//enum OrderByDirection:
	//	asc="ASC" | desc="DESC";
	public OrderByDirectionElements getOrderByDirectionAccess() {
		return (unknownRuleOrderByDirection != null) ? unknownRuleOrderByDirection : (unknownRuleOrderByDirection = new OrderByDirectionElements());
	}
	
	public EnumRule getOrderByDirectionRule() {
		return getOrderByDirectionAccess().getRule();
	}

	//UpdateStatement:
	//	updateClause=UpdateClause setClause=SetClause whereClause=WhereClause?;
	public UpdateStatementElements getUpdateStatementAccess() {
		return (pUpdateStatement != null) ? pUpdateStatement : (pUpdateStatement = new UpdateStatementElements());
	}
	
	public ParserRule getUpdateStatementRule() {
		return getUpdateStatementAccess().getRule();
	}

	//UpdateClause:
	//	"UPDATE" fromEntries+=FromEntry ("," fromEntries+=FromEntry)*;
	public UpdateClauseElements getUpdateClauseAccess() {
		return (pUpdateClause != null) ? pUpdateClause : (pUpdateClause = new UpdateClauseElements());
	}
	
	public ParserRule getUpdateClauseRule() {
		return getUpdateClauseAccess().getRule();
	}

	//SetClause:
	//	"SET" items+=UpdateItem ("," items+=UpdateItem)*;
	public SetClauseElements getSetClauseAccess() {
		return (pSetClause != null) ? pSetClause : (pSetClause = new SetClauseElements());
	}
	
	public ParserRule getSetClauseRule() {
		return getSetClauseAccess().getRule();
	}

	//UpdateItem:
	//	alias=AliasAttributeExpression "=" value=Value;
	public UpdateItemElements getUpdateItemAccess() {
		return (pUpdateItem != null) ? pUpdateItem : (pUpdateItem = new UpdateItemElements());
	}
	
	public ParserRule getUpdateItemRule() {
		return getUpdateItemAccess().getRule();
	}

	//DeleteStatement:
	//	deleteClause=DeleteClause whereClause=WhereClause?;
	public DeleteStatementElements getDeleteStatementAccess() {
		return (pDeleteStatement != null) ? pDeleteStatement : (pDeleteStatement = new DeleteStatementElements());
	}
	
	public ParserRule getDeleteStatementRule() {
		return getDeleteStatementAccess().getRule();
	}

	//DeleteClause:
	//	"DELETE" fromClause=FromClause;
	public DeleteClauseElements getDeleteClauseAccess() {
		return (pDeleteClause != null) ? pDeleteClause : (pDeleteClause = new DeleteClauseElements());
	}
	
	public ParserRule getDeleteClauseRule() {
		return getDeleteClauseAccess().getRule();
	}

	//SelectClause:
	//	"SELECT" isDistinct?="DISTINCT"? expressions+=SelectExpression ("," expressions+=SelectExpression)*;
	public SelectClauseElements getSelectClauseAccess() {
		return (pSelectClause != null) ? pSelectClause : (pSelectClause = new SelectClauseElements());
	}
	
	public ParserRule getSelectClauseRule() {
		return getSelectClauseAccess().getRule();
	}

	//SelectExpression:
	//	AliasAttributeExpression | SelectAggregateExpression | SelectConstructorExpression;
	public SelectExpressionElements getSelectExpressionAccess() {
		return (pSelectExpression != null) ? pSelectExpression : (pSelectExpression = new SelectExpressionElements());
	}
	
	public ParserRule getSelectExpressionRule() {
		return getSelectExpressionAccess().getRule();
	}

	//SelectAggregateExpression:
	//	AvgAggregate | CountAggregate | MaxAggregate | MinAggregate | SumAggregate;
	public SelectAggregateExpressionElements getSelectAggregateExpressionAccess() {
		return (pSelectAggregateExpression != null) ? pSelectAggregateExpression : (pSelectAggregateExpression = new SelectAggregateExpressionElements());
	}
	
	public ParserRule getSelectAggregateExpressionRule() {
		return getSelectAggregateExpressionAccess().getRule();
	}

	//AvgAggregate:
	//	"AVG" "(" isDistinct?="DISTINCT"? item=AliasAttributeExpression ")";
	public AvgAggregateElements getAvgAggregateAccess() {
		return (pAvgAggregate != null) ? pAvgAggregate : (pAvgAggregate = new AvgAggregateElements());
	}
	
	public ParserRule getAvgAggregateRule() {
		return getAvgAggregateAccess().getRule();
	}

	//CountAggregate:
	//	"COUNT" "(" isDistinct?="DISTINCT"? item=AliasAttributeExpression ")";
	public CountAggregateElements getCountAggregateAccess() {
		return (pCountAggregate != null) ? pCountAggregate : (pCountAggregate = new CountAggregateElements());
	}
	
	public ParserRule getCountAggregateRule() {
		return getCountAggregateAccess().getRule();
	}

	//MaxAggregate:
	//	"MAX" "(" isDistinct?="DISTINCT"? item=AliasAttributeExpression ")";
	public MaxAggregateElements getMaxAggregateAccess() {
		return (pMaxAggregate != null) ? pMaxAggregate : (pMaxAggregate = new MaxAggregateElements());
	}
	
	public ParserRule getMaxAggregateRule() {
		return getMaxAggregateAccess().getRule();
	}

	//MinAggregate:
	//	"MIN" "(" isDistinct?="DISTINCT"? item=AliasAttributeExpression ")";
	public MinAggregateElements getMinAggregateAccess() {
		return (pMinAggregate != null) ? pMinAggregate : (pMinAggregate = new MinAggregateElements());
	}
	
	public ParserRule getMinAggregateRule() {
		return getMinAggregateAccess().getRule();
	}

	//SumAggregate:
	//	"SUM" "(" isDistinct?="DISTINCT"? item=AliasAttributeExpression ")";
	public SumAggregateElements getSumAggregateAccess() {
		return (pSumAggregate != null) ? pSumAggregate : (pSumAggregate = new SumAggregateElements());
	}
	
	public ParserRule getSumAggregateRule() {
		return getSumAggregateAccess().getRule();
	}

	//SelectConstructorExpression:
	//	"NEW" name=ID "(" items+=AliasAttributeExpression ("," items+=AliasAttributeExpression)* ")";
	public SelectConstructorExpressionElements getSelectConstructorExpressionAccess() {
		return (pSelectConstructorExpression != null) ? pSelectConstructorExpression : (pSelectConstructorExpression = new SelectConstructorExpressionElements());
	}
	
	public ParserRule getSelectConstructorExpressionRule() {
		return getSelectConstructorExpressionAccess().getRule();
	}

	//FromClause:
	//	"FROM" fromEntries+=FromClass ("," fromEntries+=FromEntry)*;
	public FromClauseElements getFromClauseAccess() {
		return (pFromClause != null) ? pFromClause : (pFromClause = new FromClauseElements());
	}
	
	public ParserRule getFromClauseRule() {
		return getFromClauseAccess().getRule();
	}

	//FromEntry:
	//	FromClass | FromCollection;
	public FromEntryElements getFromEntryAccess() {
		return (pFromEntry != null) ? pFromEntry : (pFromEntry = new FromEntryElements());
	}
	
	public ParserRule getFromEntryRule() {
		return getFromEntryAccess().getRule();
	}

	//VariableDeclaration:
	//	"AS"? name=ID;
	public VariableDeclarationElements getVariableDeclarationAccess() {
		return (pVariableDeclaration != null) ? pVariableDeclaration : (pVariableDeclaration = new VariableDeclarationElements());
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}

	//FromClass:
	//	FromClassId | FromClassVar;
	public FromClassElements getFromClassAccess() {
		return (pFromClass != null) ? pFromClass : (pFromClass = new FromClassElements());
	}
	
	public ParserRule getFromClassRule() {
		return getFromClassAccess().getRule();
	}

	//QualifiedIdentifier:
	//	ID ("." ID)*;
	public QualifiedIdentifierElements getQualifiedIdentifierAccess() {
		return (pQualifiedIdentifier != null) ? pQualifiedIdentifier : (pQualifiedIdentifier = new QualifiedIdentifierElements());
	}
	
	public ParserRule getQualifiedIdentifierRule() {
		return getQualifiedIdentifierAccess().getRule();
	}

	//FromClassId returns FromClass:
	//	type=QualifiedIdentifier;
	public FromClassIdElements getFromClassIdAccess() {
		return (pFromClassId != null) ? pFromClassId : (pFromClassId = new FromClassIdElements());
	}
	
	public ParserRule getFromClassIdRule() {
		return getFromClassIdAccess().getRule();
	}

	//FromClassVar returns FromClass:
	//	type=QualifiedIdentifier variable=VariableDeclaration joins+=FromJoin*;
	public FromClassVarElements getFromClassVarAccess() {
		return (pFromClassVar != null) ? pFromClassVar : (pFromClassVar = new FromClassVarElements());
	}
	
	public ParserRule getFromClassVarRule() {
		return getFromClassVarAccess().getRule();
	}

	//FromCollection:
	//	"IN" "(" path=AliasAttributeExpression ")" variable=VariableDeclaration;
	public FromCollectionElements getFromCollectionAccess() {
		return (pFromCollection != null) ? pFromCollection : (pFromCollection = new FromCollectionElements());
	}
	
	public ParserRule getFromCollectionRule() {
		return getFromCollectionAccess().getRule();
	}

	//FromJoin:
	//	Join | LeftJoin | InnerJoin;
	public FromJoinElements getFromJoinAccess() {
		return (pFromJoin != null) ? pFromJoin : (pFromJoin = new FromJoinElements());
	}
	
	public ParserRule getFromJoinRule() {
		return getFromJoinAccess().getRule();
	}

	//Join:
	//	"JOIN" isFetch?="FETCH"? path=AliasAttributeExpression variable=VariableDeclaration;
	public JoinElements getJoinAccess() {
		return (pJoin != null) ? pJoin : (pJoin = new JoinElements());
	}
	
	public ParserRule getJoinRule() {
		return getJoinAccess().getRule();
	}

	//LeftJoin:
	//	"LEFT" isOuter?="OUTER"? "JOIN" isFetch?="FETCH"? path=AliasAttributeExpression variable=VariableDeclaration;
	public LeftJoinElements getLeftJoinAccess() {
		return (pLeftJoin != null) ? pLeftJoin : (pLeftJoin = new LeftJoinElements());
	}
	
	public ParserRule getLeftJoinRule() {
		return getLeftJoinAccess().getRule();
	}

	//InnerJoin:
	//	"INNER" "JOIN" isFetch?="FETCH"? path=AliasAttributeExpression variable=VariableDeclaration;
	public InnerJoinElements getInnerJoinAccess() {
		return (pInnerJoin != null) ? pInnerJoin : (pInnerJoin = new InnerJoinElements());
	}
	
	public ParserRule getInnerJoinRule() {
		return getInnerJoinAccess().getRule();
	}

	//WhereClause:
	//	"WHERE" whereEntry=OrExpression;
	public WhereClauseElements getWhereClauseAccess() {
		return (pWhereClause != null) ? pWhereClause : (pWhereClause = new WhereClauseElements());
	}
	
	public ParserRule getWhereClauseRule() {
		return getWhereClauseAccess().getRule();
	}

	//OrExpression returns Expression:
	//	AndExpression ({OrExpression.entries+=current} ("OR" entries+=AndExpression)+)?;
	public OrExpressionElements getOrExpressionAccess() {
		return (pOrExpression != null) ? pOrExpression : (pOrExpression = new OrExpressionElements());
	}
	
	public ParserRule getOrExpressionRule() {
		return getOrExpressionAccess().getRule();
	}

	//AndExpression returns Expression:
	//	ComparisonOperatorExpression ({AndExpression.entries+=current} ("AND" entries+=ComparisonOperatorExpression)+)?;
	public AndExpressionElements getAndExpressionAccess() {
		return (pAndExpression != null) ? pAndExpression : (pAndExpression = new AndExpressionElements());
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}

	//ComparisonOperatorExpression returns Expression:
	//	AdditionExpression ({ComparisonOperatorExpression.left=current} operator=ComparisonOperator
	//	right=AdditionExpression)*;
	public ComparisonOperatorExpressionElements getComparisonOperatorExpressionAccess() {
		return (pComparisonOperatorExpression != null) ? pComparisonOperatorExpression : (pComparisonOperatorExpression = new ComparisonOperatorExpressionElements());
	}
	
	public ParserRule getComparisonOperatorExpressionRule() {
		return getComparisonOperatorExpressionAccess().getRule();
	}

	//AdditionExpression returns Expression:
	//	MultiplicationExpression ({AdditionExpression.left=current} operator=AdditionOperator
	//	right=MultiplicationExpression)*;
	public AdditionExpressionElements getAdditionExpressionAccess() {
		return (pAdditionExpression != null) ? pAdditionExpression : (pAdditionExpression = new AdditionExpressionElements());
	}
	
	public ParserRule getAdditionExpressionRule() {
		return getAdditionExpressionAccess().getRule();
	}

	//MultiplicationExpression returns Expression:
	//	UnaryExpression ({MultiplicationExpression.left=current} operator=MultiplicationOperator right=UnaryExpression)*;
	public MultiplicationExpressionElements getMultiplicationExpressionAccess() {
		return (pMultiplicationExpression != null) ? pMultiplicationExpression : (pMultiplicationExpression = new MultiplicationExpressionElements());
	}
	
	public ParserRule getMultiplicationExpressionRule() {
		return getMultiplicationExpressionAccess().getRule();
	}

	//UnaryExpression returns Expression:
	//	unaryOperator=UnaryOperator? right=ConcreteExpression;
	public UnaryExpressionElements getUnaryExpressionAccess() {
		return (pUnaryExpression != null) ? pUnaryExpression : (pUnaryExpression = new UnaryExpressionElements());
	}
	
	public ParserRule getUnaryExpressionRule() {
		return getUnaryExpressionAccess().getRule();
	}

	//ConcreteExpression returns Expression:
	//	ParenthesesExpression | //	ComparisonOperatorExpression |
	//	ExistsExpression | AllExpression | AnyExpression | SomeExpression | CollectionExpression | NullComparisonExpression |
	//	EmptyComparisonExpression | LikeExpression | InExpression | BetweenExpression;
	public ConcreteExpressionElements getConcreteExpressionAccess() {
		return (pConcreteExpression != null) ? pConcreteExpression : (pConcreteExpression = new ConcreteExpressionElements());
	}
	
	public ParserRule getConcreteExpressionRule() {
		return getConcreteExpressionAccess().getRule();
	}

	//ParenthesesExpression returns Expression: //	'(' (ConditionalOrExpression | Subquery) ')'
	//	"(" ExpressionTerm ")";
	public ParenthesesExpressionElements getParenthesesExpressionAccess() {
		return (pParenthesesExpression != null) ? pParenthesesExpression : (pParenthesesExpression = new ParenthesesExpressionElements());
	}
	
	public ParserRule getParenthesesExpressionRule() {
		return getParenthesesExpressionAccess().getRule();
	}

	////ParExpression returns Expression:
	////	"(" ExpressionTerm ")"
	////;
	////ComparisonOperatorExpression:
	////	left=Variable operator=ComparisonOperator right=ExpressionTerm 
	////;
	//ExistsExpression returns Expression: //	(isNot?='NOT')? // collision with general logical NOT
	//	"EXISTS" right=Subquery;
	public ExistsExpressionElements getExistsExpressionAccess() {
		return (pExistsExpression != null) ? pExistsExpression : (pExistsExpression = new ExistsExpressionElements());
	}
	
	public ParserRule getExistsExpressionRule() {
		return getExistsExpressionAccess().getRule();
	}

	//AllExpression returns Expression:
	//	"ALL" right=Subquery;
	public AllExpressionElements getAllExpressionAccess() {
		return (pAllExpression != null) ? pAllExpression : (pAllExpression = new AllExpressionElements());
	}
	
	public ParserRule getAllExpressionRule() {
		return getAllExpressionAccess().getRule();
	}

	//AnyExpression returns Expression:
	//	"ANY" right=Subquery;
	public AnyExpressionElements getAnyExpressionAccess() {
		return (pAnyExpression != null) ? pAnyExpression : (pAnyExpression = new AnyExpressionElements());
	}
	
	public ParserRule getAnyExpressionRule() {
		return getAnyExpressionAccess().getRule();
	}

	//SomeExpression returns Expression:
	//	"SOME" right=Subquery;
	public SomeExpressionElements getSomeExpressionAccess() {
		return (pSomeExpression != null) ? pSomeExpression : (pSomeExpression = new SomeExpressionElements());
	}
	
	public ParserRule getSomeExpressionRule() {
		return getSomeExpressionAccess().getRule();
	}

	//CollectionExpression returns Expression:
	//	left=Variable isNot?="NOT"? "MEMBER" "OF"? right=AliasAttributeExpression;
	public CollectionExpressionElements getCollectionExpressionAccess() {
		return (pCollectionExpression != null) ? pCollectionExpression : (pCollectionExpression = new CollectionExpressionElements());
	}
	
	public ParserRule getCollectionExpressionRule() {
		return getCollectionExpressionAccess().getRule();
	}

	//NullComparisonExpression returns Expression:
	//	left=Variable "IS" isNot?="NOT"? "NULL";
	public NullComparisonExpressionElements getNullComparisonExpressionAccess() {
		return (pNullComparisonExpression != null) ? pNullComparisonExpression : (pNullComparisonExpression = new NullComparisonExpressionElements());
	}
	
	public ParserRule getNullComparisonExpressionRule() {
		return getNullComparisonExpressionAccess().getRule();
	}

	//EmptyComparisonExpression returns Expression:
	//	left=Variable "IS" isNot?="NOT"? "EMPTY";
	public EmptyComparisonExpressionElements getEmptyComparisonExpressionAccess() {
		return (pEmptyComparisonExpression != null) ? pEmptyComparisonExpression : (pEmptyComparisonExpression = new EmptyComparisonExpressionElements());
	}
	
	public ParserRule getEmptyComparisonExpressionRule() {
		return getEmptyComparisonExpressionAccess().getRule();
	}

	//LikeExpression returns Expression:
	//	left=Variable isNot?="NOT"? "LIKE" right=StringLiteral;
	public LikeExpressionElements getLikeExpressionAccess() {
		return (pLikeExpression != null) ? pLikeExpression : (pLikeExpression = new LikeExpressionElements());
	}
	
	public ParserRule getLikeExpressionRule() {
		return getLikeExpressionAccess().getRule();
	}

	//InExpression returns Expression:
	//	InSeqExpression | InQueryExpression;
	public InExpressionElements getInExpressionAccess() {
		return (pInExpression != null) ? pInExpression : (pInExpression = new InExpressionElements());
	}
	
	public ParserRule getInExpressionRule() {
		return getInExpressionAccess().getRule();
	}

	//InSeqExpression returns Expression:
	//	left=Variable isNot?="NOT"? "IN" "(" items+=Variable ("," items+=Variable)* ")";
	public InSeqExpressionElements getInSeqExpressionAccess() {
		return (pInSeqExpression != null) ? pInSeqExpression : (pInSeqExpression = new InSeqExpressionElements());
	}
	
	public ParserRule getInSeqExpressionRule() {
		return getInSeqExpressionAccess().getRule();
	}

	//InQueryExpression returns Expression:
	//	left=Variable isNot?="NOT"? "IN" query=Subquery;
	public InQueryExpressionElements getInQueryExpressionAccess() {
		return (pInQueryExpression != null) ? pInQueryExpression : (pInQueryExpression = new InQueryExpressionElements());
	}
	
	public ParserRule getInQueryExpressionRule() {
		return getInQueryExpressionAccess().getRule();
	}

	//BetweenExpression returns Expression:
	//	left=Variable isNot?="NOT"? "BETWEEN" min=Value "AND" max=Value;
	public BetweenExpressionElements getBetweenExpressionAccess() {
		return (pBetweenExpression != null) ? pBetweenExpression : (pBetweenExpression = new BetweenExpressionElements());
	}
	
	public ParserRule getBetweenExpressionRule() {
		return getBetweenExpressionAccess().getRule();
	}

	//Variable:
	//	AliasAttributeExpression | ParameterExpression | Value;
	public VariableElements getVariableAccess() {
		return (pVariable != null) ? pVariable : (pVariable = new VariableElements());
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}

	//ExpressionTerm:
	//	Variable | Subquery;
	public ExpressionTermElements getExpressionTermAccess() {
		return (pExpressionTerm != null) ? pExpressionTerm : (pExpressionTerm = new ExpressionTermElements());
	}
	
	public ParserRule getExpressionTermRule() {
		return getExpressionTermAccess().getRule();
	}

	//AliasAttributeExpression:
	//	alias=[VariableDeclaration] ("." attributes+=ID)*;
	public AliasAttributeExpressionElements getAliasAttributeExpressionAccess() {
		return (pAliasAttributeExpression != null) ? pAliasAttributeExpression : (pAliasAttributeExpression = new AliasAttributeExpressionElements());
	}
	
	public ParserRule getAliasAttributeExpressionRule() {
		return getAliasAttributeExpressionAccess().getRule();
	}

	//ParameterExpression:
	//	":" name=ID;
	public ParameterExpressionElements getParameterExpressionAccess() {
		return (pParameterExpression != null) ? pParameterExpression : (pParameterExpression = new ParameterExpressionElements());
	}
	
	public ParserRule getParameterExpressionRule() {
		return getParameterExpressionAccess().getRule();
	}

	//Function:
	//	StringFunction | NumericFunction;
	public FunctionElements getFunctionAccess() {
		return (pFunction != null) ? pFunction : (pFunction = new FunctionElements());
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}

	//StringFunction returns Function:
	//	name=StringFunctionName "(" params+=Variable ("," params+=Variable) ")";
	public StringFunctionElements getStringFunctionAccess() {
		return (pStringFunction != null) ? pStringFunction : (pStringFunction = new StringFunctionElements());
	}
	
	public ParserRule getStringFunctionRule() {
		return getStringFunctionAccess().getRule();
	}

	//StringFunctionName:
	//	"CONCAT" | "SUBSTRING" | //	TRIM ([[trim_specification] [trim_character] FROM] string_primary) | 
	//	"LOWER" | "UPPER" | "LENGTH" | "LOCATE";
	public StringFunctionNameElements getStringFunctionNameAccess() {
		return (pStringFunctionName != null) ? pStringFunctionName : (pStringFunctionName = new StringFunctionNameElements());
	}
	
	public ParserRule getStringFunctionNameRule() {
		return getStringFunctionNameAccess().getRule();
	}

	//NumericFunction returns Function:
	//	name=NumericFunctionName "(" params+=Variable ("," params+=Variable) ")";
	public NumericFunctionElements getNumericFunctionAccess() {
		return (pNumericFunction != null) ? pNumericFunction : (pNumericFunction = new NumericFunctionElements());
	}
	
	public ParserRule getNumericFunctionRule() {
		return getNumericFunctionAccess().getRule();
	}

	//NumericFunctionName:
	//	"ABS" | "SQRT" | "MOD" | "SIZE";
	public NumericFunctionNameElements getNumericFunctionNameAccess() {
		return (pNumericFunctionName != null) ? pNumericFunctionName : (pNumericFunctionName = new NumericFunctionNameElements());
	}
	
	public ParserRule getNumericFunctionNameRule() {
		return getNumericFunctionNameAccess().getRule();
	}

	//DateTimeFunctionName:
	//	"CURRENT_DATE" | "CURRENT_TIME" | "CURRENT_TIMESTAMP";
	public DateTimeFunctionNameElements getDateTimeFunctionNameAccess() {
		return (pDateTimeFunctionName != null) ? pDateTimeFunctionName : (pDateTimeFunctionName = new DateTimeFunctionNameElements());
	}
	
	public ParserRule getDateTimeFunctionNameRule() {
		return getDateTimeFunctionNameAccess().getRule();
	}

	////DoubleExpression: 
	////	value=SIGNED_DOUBLE
	////; 
	////
	////LongExpression: 
	////	value=SINGED_LONG	
	////;
	//ParameterName:
	//	ID;
	public ParameterNameElements getParameterNameAccess() {
		return (pParameterName != null) ? pParameterName : (pParameterName = new ParameterNameElements());
	}
	
	public ParserRule getParameterNameRule() {
		return getParameterNameAccess().getRule();
	}

	//Value:
	//	IntegerLiteral | StringLiteral | NullLiteral | BooleanLiteral;
	public ValueElements getValueAccess() {
		return (pValue != null) ? pValue : (pValue = new ValueElements());
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}

	//IntegerLiteral:
	//	value=INT;
	public IntegerLiteralElements getIntegerLiteralAccess() {
		return (pIntegerLiteral != null) ? pIntegerLiteral : (pIntegerLiteral = new IntegerLiteralElements());
	}
	
	public ParserRule getIntegerLiteralRule() {
		return getIntegerLiteralAccess().getRule();
	}

	//StringLiteral:
	//	value=STRING;
	public StringLiteralElements getStringLiteralAccess() {
		return (pStringLiteral != null) ? pStringLiteral : (pStringLiteral = new StringLiteralElements());
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}

	//NullLiteral:
	//	value="NULL";
	public NullLiteralElements getNullLiteralAccess() {
		return (pNullLiteral != null) ? pNullLiteral : (pNullLiteral = new NullLiteralElements());
	}
	
	public ParserRule getNullLiteralRule() {
		return getNullLiteralAccess().getRule();
	}

	//BooleanLiteral:
	//	value=("TRUE" | "FALSE");
	public BooleanLiteralElements getBooleanLiteralAccess() {
		return (pBooleanLiteral != null) ? pBooleanLiteral : (pBooleanLiteral = new BooleanLiteralElements());
	}
	
	public ParserRule getBooleanLiteralRule() {
		return getBooleanLiteralAccess().getRule();
	}

	////IntegerLiteral:
	////	INT
	////;                                 
	////
	////StringLiteral:
	////	STRING
	////;                                         
	////
	////BooleanLiteral:
	////	'true' | 'false'
	////;
	////
	////NullLiteral:
	////	'null'
	////;
	////
	////Literal:
	////	IntegerLiteral |
	////	BooleanLiteral |
	////	StringLiteral |
	////	NullLiteral
	////;
	//Subquery returns SelectStatement:
	//	"(" SelectStatement ")";
	public SubqueryElements getSubqueryAccess() {
		return (pSubquery != null) ? pSubquery : (pSubquery = new SubqueryElements());
	}
	
	public ParserRule getSubqueryRule() {
		return getSubqueryAccess().getRule();
	}

	//enum UnaryOperator:
	//	positive="+" | negative="-" | logicalNot="NOT";
	public UnaryOperatorElements getUnaryOperatorAccess() {
		return (unknownRuleUnaryOperator != null) ? unknownRuleUnaryOperator : (unknownRuleUnaryOperator = new UnaryOperatorElements());
	}
	
	public EnumRule getUnaryOperatorRule() {
		return getUnaryOperatorAccess().getRule();
	}

	//enum AdditionOperator:
	//	add="+" | subtract="-";
	public AdditionOperatorElements getAdditionOperatorAccess() {
		return (unknownRuleAdditionOperator != null) ? unknownRuleAdditionOperator : (unknownRuleAdditionOperator = new AdditionOperatorElements());
	}
	
	public EnumRule getAdditionOperatorRule() {
		return getAdditionOperatorAccess().getRule();
	}

	//enum MultiplicationOperator:
	//	multiply="*" | divide="/";
	public MultiplicationOperatorElements getMultiplicationOperatorAccess() {
		return (unknownRuleMultiplicationOperator != null) ? unknownRuleMultiplicationOperator : (unknownRuleMultiplicationOperator = new MultiplicationOperatorElements());
	}
	
	public EnumRule getMultiplicationOperatorRule() {
		return getMultiplicationOperatorAccess().getRule();
	}

	//enum ComparisonOperator:
	//	lessThen="<" | greaterThen=">" | lessEqual="<=" | greaterEqual=">=" | equal="=" | notEqual="<>";
	public ComparisonOperatorElements getComparisonOperatorAccess() {
		return (unknownRuleComparisonOperator != null) ? unknownRuleComparisonOperator : (unknownRuleComparisonOperator = new ComparisonOperatorElements());
	}
	
	public EnumRule getComparisonOperatorRule() {
		return getComparisonOperatorAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
