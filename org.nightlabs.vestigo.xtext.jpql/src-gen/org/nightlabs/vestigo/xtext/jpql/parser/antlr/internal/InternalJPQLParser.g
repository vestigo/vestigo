/*
* generated by Xtext
*/
parser grammar InternalJPQLParser;

options {
	tokenVocab=InternalJPQLLexer;
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	
}

@header {
package org.nightlabs.vestigo.xtext.jpql.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.nightlabs.vestigo.xtext.jpql.services.JPQLGrammarAccess;

}

@members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/
 

	private JPQLGrammarAccess grammarAccess;
	 	
	public InternalJPQLParser(TokenStream input, JPQLGrammarAccess grammarAccess) {
		this(input);
		this.grammarAccess = grammarAccess;
		registerRules(grammarAccess.getGrammar());
	}
	
	@Override
	protected String getFirstRuleName() {
		return "JPQLQuery";	
	} 
	   	   	
	@Override
	protected JPQLGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}
}

@rulecatch { 
	catch (RecognitionException re) { 
	    recover(input,re); 
	    appendSkippedTokens();
	}
}




// Entry rule entryRuleJPQLQuery
entryRuleJPQLQuery returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getJPQLQueryRule()); }
	 iv_ruleJPQLQuery=ruleJPQLQuery 
	 { $current=$iv_ruleJPQLQuery.current; } 
	 EOF 
;

// Rule JPQLQuery
ruleJPQLQuery returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getJPQLQueryAccess().getSelectStatementParserRuleCall_0()); 
    }
    this_SelectStatement_0=ruleSelectStatement
    {
        $current = $this_SelectStatement_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getJPQLQueryAccess().getUpdateStatementParserRuleCall_1()); 
    }
    this_UpdateStatement_1=ruleUpdateStatement
    {
        $current = $this_UpdateStatement_1.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getJPQLQueryAccess().getDeleteStatementParserRuleCall_2()); 
    }
    this_DeleteStatement_2=ruleDeleteStatement
    {
        $current = $this_DeleteStatement_2.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleSelectStatement
entryRuleSelectStatement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getSelectStatementRule()); }
	 iv_ruleSelectStatement=ruleSelectStatement 
	 { $current=$iv_ruleSelectStatement.current; } 
	 EOF 
;

// Rule SelectStatement
ruleSelectStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSelectStatementAccess().getSelectClauseSelectClauseParserRuleCall_0_0()); 
	    }
		lv_selectClause_0_0=ruleSelectClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectStatementRule());
	        }
       		set(
       			$current, 
       			"selectClause",
        		lv_selectClause_0_0, 
        		"SelectClause");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectStatementAccess().getFromClauseFromClauseParserRuleCall_1_0()); 
	    }
		lv_fromClause_1_0=ruleFromClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectStatementRule());
	        }
       		set(
       			$current, 
       			"fromClause",
        		lv_fromClause_1_0, 
        		"FromClause");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectStatementAccess().getWhereClauseWhereClauseParserRuleCall_2_0()); 
	    }
		lv_whereClause_2_0=ruleWhereClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectStatementRule());
	        }
       		set(
       			$current, 
       			"whereClause",
        		lv_whereClause_2_0, 
        		"WhereClause");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectStatementAccess().getGroupByClauseGroupByClauseParserRuleCall_3_0()); 
	    }
		lv_groupByClause_3_0=ruleGroupByClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectStatementRule());
	        }
       		set(
       			$current, 
       			"groupByClause",
        		lv_groupByClause_3_0, 
        		"GroupByClause");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectStatementAccess().getOrderByClauseOrderByClauseParserRuleCall_4_0()); 
	    }
		lv_orderByClause_4_0=ruleOrderByClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectStatementRule());
	        }
       		set(
       			$current, 
       			"orderByClause",
        		lv_orderByClause_4_0, 
        		"OrderByClause");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleGroupByClause
entryRuleGroupByClause returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getGroupByClauseRule()); }
	 iv_ruleGroupByClause=ruleGroupByClause 
	 { $current=$iv_ruleGroupByClause.current; } 
	 EOF 
;

// Rule GroupByClause
ruleGroupByClause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_55
    {
    	newLeafNode(otherlv_0, grammarAccess.getGroupByClauseAccess().getGROUPKeyword_0());
    }

	otherlv_1=KEYWORD_18
    {
    	newLeafNode(otherlv_1, grammarAccess.getGroupByClauseAccess().getBYKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGroupByClauseAccess().getGroupingAliasAttributeExpressionParserRuleCall_2_0()); 
	    }
		lv_grouping_2_0=ruleAliasAttributeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGroupByClauseRule());
	        }
       		add(
       			$current, 
       			"grouping",
        		lv_grouping_2_0, 
        		"AliasAttributeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_3=KEYWORD_5
    {
    	newLeafNode(otherlv_3, grammarAccess.getGroupByClauseAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGroupByClauseAccess().getGroupingAliasAttributeExpressionParserRuleCall_3_1_0()); 
	    }
		lv_grouping_4_0=ruleAliasAttributeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGroupByClauseRule());
	        }
       		add(
       			$current, 
       			"grouping",
        		lv_grouping_4_0, 
        		"AliasAttributeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*(
(
		{ 
	        newCompositeNode(grammarAccess.getGroupByClauseAccess().getHavingClauseHavingClauseParserRuleCall_4_0()); 
	    }
		lv_havingClause_5_0=ruleHavingClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGroupByClauseRule());
	        }
       		set(
       			$current, 
       			"havingClause",
        		lv_havingClause_5_0, 
        		"HavingClause");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleHavingClause
entryRuleHavingClause returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getHavingClauseRule()); }
	 iv_ruleHavingClause=ruleHavingClause 
	 { $current=$iv_ruleHavingClause.current; } 
	 EOF 
;

// Rule HavingClause
ruleHavingClause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_67
    {
    	newLeafNode(otherlv_0, grammarAccess.getHavingClauseAccess().getHAVINGKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getHavingClauseAccess().getHavingOrExpressionParserRuleCall_1_0()); 
	    }
		lv_having_1_0=ruleOrExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHavingClauseRule());
	        }
       		set(
       			$current, 
       			"having",
        		lv_having_1_0, 
        		"OrExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleOrderByClause
entryRuleOrderByClause returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getOrderByClauseRule()); }
	 iv_ruleOrderByClause=ruleOrderByClause 
	 { $current=$iv_ruleOrderByClause.current; } 
	 EOF 
;

// Rule OrderByClause
ruleOrderByClause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_60
    {
    	newLeafNode(otherlv_0, grammarAccess.getOrderByClauseAccess().getORDERKeyword_0());
    }

	otherlv_1=KEYWORD_18
    {
    	newLeafNode(otherlv_1, grammarAccess.getOrderByClauseAccess().getBYKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOrderByClauseAccess().getOrderingOrderBySpecParserRuleCall_2_0()); 
	    }
		lv_ordering_2_0=ruleOrderBySpec		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrderByClauseRule());
	        }
       		add(
       			$current, 
       			"ordering",
        		lv_ordering_2_0, 
        		"OrderBySpec");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_3=KEYWORD_5
    {
    	newLeafNode(otherlv_3, grammarAccess.getOrderByClauseAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOrderByClauseAccess().getOrderingOrderBySpecParserRuleCall_3_1_0()); 
	    }
		lv_ordering_4_0=ruleOrderBySpec		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrderByClauseRule());
	        }
       		add(
       			$current, 
       			"ordering",
        		lv_ordering_4_0, 
        		"OrderBySpec");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleOrderBySpec
entryRuleOrderBySpec returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getOrderBySpecRule()); }
	 iv_ruleOrderBySpec=ruleOrderBySpec 
	 { $current=$iv_ruleOrderBySpec.current; } 
	 EOF 
;

// Rule OrderBySpec
ruleOrderBySpec returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getOrderBySpecAccess().getAliasAttributeExpressionParserRuleCall_0()); 
    }
    this_AliasAttributeExpression_0=ruleAliasAttributeExpression
    {
        $current = $this_AliasAttributeExpression_0.current;
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOrderBySpecAccess().getDirectionOrderByDirectionEnumRuleCall_1_0()); 
	    }
		lv_direction_1_0=ruleOrderByDirection		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrderBySpecRule());
	        }
       		set(
       			$current, 
       			"direction",
        		lv_direction_1_0, 
        		"OrderByDirection");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleUpdateStatement
entryRuleUpdateStatement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getUpdateStatementRule()); }
	 iv_ruleUpdateStatement=ruleUpdateStatement 
	 { $current=$iv_ruleUpdateStatement.current; } 
	 EOF 
;

// Rule UpdateStatement
ruleUpdateStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getUpdateStatementAccess().getUpdateClauseUpdateClauseParserRuleCall_0_0()); 
	    }
		lv_updateClause_0_0=ruleUpdateClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUpdateStatementRule());
	        }
       		set(
       			$current, 
       			"updateClause",
        		lv_updateClause_0_0, 
        		"UpdateClause");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getUpdateStatementAccess().getSetClauseSetClauseParserRuleCall_1_0()); 
	    }
		lv_setClause_1_0=ruleSetClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUpdateStatementRule());
	        }
       		set(
       			$current, 
       			"setClause",
        		lv_setClause_1_0, 
        		"SetClause");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getUpdateStatementAccess().getWhereClauseWhereClauseParserRuleCall_2_0()); 
	    }
		lv_whereClause_2_0=ruleWhereClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUpdateStatementRule());
	        }
       		set(
       			$current, 
       			"whereClause",
        		lv_whereClause_2_0, 
        		"WhereClause");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleUpdateClause
entryRuleUpdateClause returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getUpdateClauseRule()); }
	 iv_ruleUpdateClause=ruleUpdateClause 
	 { $current=$iv_ruleUpdateClause.current; } 
	 EOF 
;

// Rule UpdateClause
ruleUpdateClause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_74
    {
    	newLeafNode(otherlv_0, grammarAccess.getUpdateClauseAccess().getUPDATEKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUpdateClauseAccess().getFromEntriesFromEntryParserRuleCall_1_0()); 
	    }
		lv_fromEntries_1_0=ruleFromEntry		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUpdateClauseRule());
	        }
       		add(
       			$current, 
       			"fromEntries",
        		lv_fromEntries_1_0, 
        		"FromEntry");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_2=KEYWORD_5
    {
    	newLeafNode(otherlv_2, grammarAccess.getUpdateClauseAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUpdateClauseAccess().getFromEntriesFromEntryParserRuleCall_2_1_0()); 
	    }
		lv_fromEntries_3_0=ruleFromEntry		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUpdateClauseRule());
	        }
       		add(
       			$current, 
       			"fromEntries",
        		lv_fromEntries_3_0, 
        		"FromEntry");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleSetClause
entryRuleSetClause returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getSetClauseRule()); }
	 iv_ruleSetClause=ruleSetClause 
	 { $current=$iv_ruleSetClause.current; } 
	 EOF 
;

// Rule SetClause
ruleSetClause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_35
    {
    	newLeafNode(otherlv_0, grammarAccess.getSetClauseAccess().getSETKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSetClauseAccess().getItemsUpdateItemParserRuleCall_1_0()); 
	    }
		lv_items_1_0=ruleUpdateItem		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSetClauseRule());
	        }
       		add(
       			$current, 
       			"items",
        		lv_items_1_0, 
        		"UpdateItem");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_2=KEYWORD_5
    {
    	newLeafNode(otherlv_2, grammarAccess.getSetClauseAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSetClauseAccess().getItemsUpdateItemParserRuleCall_2_1_0()); 
	    }
		lv_items_3_0=ruleUpdateItem		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSetClauseRule());
	        }
       		add(
       			$current, 
       			"items",
        		lv_items_3_0, 
        		"UpdateItem");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleUpdateItem
entryRuleUpdateItem returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getUpdateItemRule()); }
	 iv_ruleUpdateItem=ruleUpdateItem 
	 { $current=$iv_ruleUpdateItem.current; } 
	 EOF 
;

// Rule UpdateItem
ruleUpdateItem returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getUpdateItemAccess().getAliasAliasAttributeExpressionParserRuleCall_0_0()); 
	    }
		lv_alias_0_0=ruleAliasAttributeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUpdateItemRule());
	        }
       		set(
       			$current, 
       			"alias",
        		lv_alias_0_0, 
        		"AliasAttributeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_1=KEYWORD_11
    {
    	newLeafNode(otherlv_1, grammarAccess.getUpdateItemAccess().getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUpdateItemAccess().getValueLiteralParserRuleCall_2_0()); 
	    }
		lv_value_2_0=ruleLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUpdateItemRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"Literal");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleDeleteStatement
entryRuleDeleteStatement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getDeleteStatementRule()); }
	 iv_ruleDeleteStatement=ruleDeleteStatement 
	 { $current=$iv_ruleDeleteStatement.current; } 
	 EOF 
;

// Rule DeleteStatement
ruleDeleteStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getDeleteStatementAccess().getDeleteClauseDeleteClauseParserRuleCall_0_0()); 
	    }
		lv_deleteClause_0_0=ruleDeleteClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeleteStatementRule());
	        }
       		set(
       			$current, 
       			"deleteClause",
        		lv_deleteClause_0_0, 
        		"DeleteClause");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDeleteStatementAccess().getWhereClauseWhereClauseParserRuleCall_1_0()); 
	    }
		lv_whereClause_1_0=ruleWhereClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeleteStatementRule());
	        }
       		set(
       			$current, 
       			"whereClause",
        		lv_whereClause_1_0, 
        		"WhereClause");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleDeleteClause
entryRuleDeleteClause returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getDeleteClauseRule()); }
	 iv_ruleDeleteClause=ruleDeleteClause 
	 { $current=$iv_ruleDeleteClause.current; } 
	 EOF 
;

// Rule DeleteClause
ruleDeleteClause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_65
    {
    	newLeafNode(otherlv_0, grammarAccess.getDeleteClauseAccess().getDELETEKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDeleteClauseAccess().getFromClauseFromClauseParserRuleCall_1_0()); 
	    }
		lv_fromClause_1_0=ruleFromClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeleteClauseRule());
	        }
       		set(
       			$current, 
       			"fromClause",
        		lv_fromClause_1_0, 
        		"FromClause");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleSelectClause
entryRuleSelectClause returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getSelectClauseRule()); }
	 iv_ruleSelectClause=ruleSelectClause 
	 { $current=$iv_ruleSelectClause.current; } 
	 EOF 
;

// Rule SelectClause
ruleSelectClause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_73
    {
    	newLeafNode(otherlv_0, grammarAccess.getSelectClauseAccess().getSELECTKeyword_0());
    }
(
(
		lv_isDistinct_1_0=
	KEYWORD_77
    {
        newLeafNode(lv_isDistinct_1_0, grammarAccess.getSelectClauseAccess().getIsDistinctDISTINCTKeyword_1_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSelectClauseRule());
	        }
       		setWithLastConsumed($current, "isDistinct", true, "DISTINCT");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectClauseAccess().getExpressionsSelectExpressionParserRuleCall_2_0()); 
	    }
		lv_expressions_2_0=ruleSelectExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectClauseRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_2_0, 
        		"SelectExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_3=KEYWORD_5
    {
    	newLeafNode(otherlv_3, grammarAccess.getSelectClauseAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectClauseAccess().getExpressionsSelectExpressionParserRuleCall_3_1_0()); 
	    }
		lv_expressions_4_0=ruleSelectExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectClauseRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_4_0, 
        		"SelectExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleSelectExpression
entryRuleSelectExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getSelectExpressionRule()); }
	 iv_ruleSelectExpression=ruleSelectExpression 
	 { $current=$iv_ruleSelectExpression.current; } 
	 EOF 
;

// Rule SelectExpression
ruleSelectExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSelectExpressionAccess().getOrExpressionParserRuleCall_0()); 
    }
    this_OrExpression_0=ruleOrExpression
    {
        $current = $this_OrExpression_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSelectExpressionAccess().getSelectAggregateExpressionParserRuleCall_1()); 
    }
    this_SelectAggregateExpression_1=ruleSelectAggregateExpression
    {
        $current = $this_SelectAggregateExpression_1.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSelectExpressionAccess().getSelectConstructorExpressionParserRuleCall_2()); 
    }
    this_SelectConstructorExpression_2=ruleSelectConstructorExpression
    {
        $current = $this_SelectConstructorExpression_2.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleSelectAggregateExpression
entryRuleSelectAggregateExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getSelectAggregateExpressionRule()); }
	 iv_ruleSelectAggregateExpression=ruleSelectAggregateExpression 
	 { $current=$iv_ruleSelectAggregateExpression.current; } 
	 EOF 
;

// Rule SelectAggregateExpression
ruleSelectAggregateExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSelectAggregateExpressionAccess().getAvgAggregateParserRuleCall_0()); 
    }
    this_AvgAggregate_0=ruleAvgAggregate
    {
        $current = $this_AvgAggregate_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSelectAggregateExpressionAccess().getCountAggregateParserRuleCall_1()); 
    }
    this_CountAggregate_1=ruleCountAggregate
    {
        $current = $this_CountAggregate_1.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSelectAggregateExpressionAccess().getMaxAggregateParserRuleCall_2()); 
    }
    this_MaxAggregate_2=ruleMaxAggregate
    {
        $current = $this_MaxAggregate_2.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSelectAggregateExpressionAccess().getMinAggregateParserRuleCall_3()); 
    }
    this_MinAggregate_3=ruleMinAggregate
    {
        $current = $this_MinAggregate_3.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSelectAggregateExpressionAccess().getSumAggregateParserRuleCall_4()); 
    }
    this_SumAggregate_4=ruleSumAggregate
    {
        $current = $this_SumAggregate_4.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAvgAggregate
entryRuleAvgAggregate returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getAvgAggregateRule()); }
	 iv_ruleAvgAggregate=ruleAvgAggregate 
	 { $current=$iv_ruleAvgAggregate.current; } 
	 EOF 
;

// Rule AvgAggregate
ruleAvgAggregate returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_28
    {
    	newLeafNode(otherlv_0, grammarAccess.getAvgAggregateAccess().getAVGKeyword_0());
    }

	otherlv_1=KEYWORD_1
    {
    	newLeafNode(otherlv_1, grammarAccess.getAvgAggregateAccess().getLeftParenthesisKeyword_1());
    }
(
(
		lv_isDistinct_2_0=
	KEYWORD_77
    {
        newLeafNode(lv_isDistinct_2_0, grammarAccess.getAvgAggregateAccess().getIsDistinctDISTINCTKeyword_2_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAvgAggregateRule());
	        }
       		setWithLastConsumed($current, "isDistinct", true, "DISTINCT");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getAvgAggregateAccess().getItemAliasAttributeExpressionParserRuleCall_3_0()); 
	    }
		lv_item_3_0=ruleAliasAttributeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAvgAggregateRule());
	        }
       		set(
       			$current, 
       			"item",
        		lv_item_3_0, 
        		"AliasAttributeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_4=KEYWORD_2
    {
    	newLeafNode(otherlv_4, grammarAccess.getAvgAggregateAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleCountAggregate
entryRuleCountAggregate returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getCountAggregateRule()); }
	 iv_ruleCountAggregate=ruleCountAggregate 
	 { $current=$iv_ruleCountAggregate.current; } 
	 EOF 
;

// Rule CountAggregate
ruleCountAggregate returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_51
    {
    	newLeafNode(otherlv_0, grammarAccess.getCountAggregateAccess().getCOUNTKeyword_0());
    }

	otherlv_1=KEYWORD_1
    {
    	newLeafNode(otherlv_1, grammarAccess.getCountAggregateAccess().getLeftParenthesisKeyword_1());
    }
(
(
		lv_isDistinct_2_0=
	KEYWORD_77
    {
        newLeafNode(lv_isDistinct_2_0, grammarAccess.getCountAggregateAccess().getIsDistinctDISTINCTKeyword_2_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCountAggregateRule());
	        }
       		setWithLastConsumed($current, "isDistinct", true, "DISTINCT");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getCountAggregateAccess().getItemAliasAttributeExpressionParserRuleCall_3_0()); 
	    }
		lv_item_3_0=ruleAliasAttributeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCountAggregateRule());
	        }
       		set(
       			$current, 
       			"item",
        		lv_item_3_0, 
        		"AliasAttributeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_4=KEYWORD_2
    {
    	newLeafNode(otherlv_4, grammarAccess.getCountAggregateAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleMaxAggregate
entryRuleMaxAggregate returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getMaxAggregateRule()); }
	 iv_ruleMaxAggregate=ruleMaxAggregate 
	 { $current=$iv_ruleMaxAggregate.current; } 
	 EOF 
;

// Rule MaxAggregate
ruleMaxAggregate returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_30
    {
    	newLeafNode(otherlv_0, grammarAccess.getMaxAggregateAccess().getMAXKeyword_0());
    }

	otherlv_1=KEYWORD_1
    {
    	newLeafNode(otherlv_1, grammarAccess.getMaxAggregateAccess().getLeftParenthesisKeyword_1());
    }
(
(
		lv_isDistinct_2_0=
	KEYWORD_77
    {
        newLeafNode(lv_isDistinct_2_0, grammarAccess.getMaxAggregateAccess().getIsDistinctDISTINCTKeyword_2_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMaxAggregateRule());
	        }
       		setWithLastConsumed($current, "isDistinct", true, "DISTINCT");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getMaxAggregateAccess().getItemAliasAttributeExpressionParserRuleCall_3_0()); 
	    }
		lv_item_3_0=ruleAliasAttributeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMaxAggregateRule());
	        }
       		set(
       			$current, 
       			"item",
        		lv_item_3_0, 
        		"AliasAttributeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_4=KEYWORD_2
    {
    	newLeafNode(otherlv_4, grammarAccess.getMaxAggregateAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleMinAggregate
entryRuleMinAggregate returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getMinAggregateRule()); }
	 iv_ruleMinAggregate=ruleMinAggregate 
	 { $current=$iv_ruleMinAggregate.current; } 
	 EOF 
;

// Rule MinAggregate
ruleMinAggregate returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_31
    {
    	newLeafNode(otherlv_0, grammarAccess.getMinAggregateAccess().getMINKeyword_0());
    }

	otherlv_1=KEYWORD_1
    {
    	newLeafNode(otherlv_1, grammarAccess.getMinAggregateAccess().getLeftParenthesisKeyword_1());
    }
(
(
		lv_isDistinct_2_0=
	KEYWORD_77
    {
        newLeafNode(lv_isDistinct_2_0, grammarAccess.getMinAggregateAccess().getIsDistinctDISTINCTKeyword_2_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMinAggregateRule());
	        }
       		setWithLastConsumed($current, "isDistinct", true, "DISTINCT");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getMinAggregateAccess().getItemAliasAttributeExpressionParserRuleCall_3_0()); 
	    }
		lv_item_3_0=ruleAliasAttributeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMinAggregateRule());
	        }
       		set(
       			$current, 
       			"item",
        		lv_item_3_0, 
        		"AliasAttributeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_4=KEYWORD_2
    {
    	newLeafNode(otherlv_4, grammarAccess.getMinAggregateAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleSumAggregate
entryRuleSumAggregate returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getSumAggregateRule()); }
	 iv_ruleSumAggregate=ruleSumAggregate 
	 { $current=$iv_ruleSumAggregate.current; } 
	 EOF 
;

// Rule SumAggregate
ruleSumAggregate returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_36
    {
    	newLeafNode(otherlv_0, grammarAccess.getSumAggregateAccess().getSUMKeyword_0());
    }

	otherlv_1=KEYWORD_1
    {
    	newLeafNode(otherlv_1, grammarAccess.getSumAggregateAccess().getLeftParenthesisKeyword_1());
    }
(
(
		lv_isDistinct_2_0=
	KEYWORD_77
    {
        newLeafNode(lv_isDistinct_2_0, grammarAccess.getSumAggregateAccess().getIsDistinctDISTINCTKeyword_2_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSumAggregateRule());
	        }
       		setWithLastConsumed($current, "isDistinct", true, "DISTINCT");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getSumAggregateAccess().getItemAliasAttributeExpressionParserRuleCall_3_0()); 
	    }
		lv_item_3_0=ruleAliasAttributeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSumAggregateRule());
	        }
       		set(
       			$current, 
       			"item",
        		lv_item_3_0, 
        		"AliasAttributeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_4=KEYWORD_2
    {
    	newLeafNode(otherlv_4, grammarAccess.getSumAggregateAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleSelectConstructorExpression
entryRuleSelectConstructorExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getSelectConstructorExpressionRule()); }
	 iv_ruleSelectConstructorExpression=ruleSelectConstructorExpression 
	 { $current=$iv_ruleSelectConstructorExpression.current; } 
	 EOF 
;

// Rule SelectConstructorExpression
ruleSelectConstructorExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_33
    {
    	newLeafNode(otherlv_0, grammarAccess.getSelectConstructorExpressionAccess().getNEWKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getSelectConstructorExpressionAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSelectConstructorExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)
	otherlv_2=KEYWORD_1
    {
    	newLeafNode(otherlv_2, grammarAccess.getSelectConstructorExpressionAccess().getLeftParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectConstructorExpressionAccess().getItemsAliasAttributeExpressionParserRuleCall_3_0()); 
	    }
		lv_items_3_0=ruleAliasAttributeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectConstructorExpressionRule());
	        }
       		add(
       			$current, 
       			"items",
        		lv_items_3_0, 
        		"AliasAttributeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_4=KEYWORD_5
    {
    	newLeafNode(otherlv_4, grammarAccess.getSelectConstructorExpressionAccess().getCommaKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectConstructorExpressionAccess().getItemsAliasAttributeExpressionParserRuleCall_4_1_0()); 
	    }
		lv_items_5_0=ruleAliasAttributeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectConstructorExpressionRule());
	        }
       		add(
       			$current, 
       			"items",
        		lv_items_5_0, 
        		"AliasAttributeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*
	otherlv_6=KEYWORD_2
    {
    	newLeafNode(otherlv_6, grammarAccess.getSelectConstructorExpressionAccess().getRightParenthesisKeyword_5());
    }
)
;





// Entry rule entryRuleFromClause
entryRuleFromClause returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getFromClauseRule()); }
	 iv_ruleFromClause=ruleFromClause 
	 { $current=$iv_ruleFromClause.current; } 
	 EOF 
;

// Rule FromClause
ruleFromClause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_39
    {
    	newLeafNode(otherlv_0, grammarAccess.getFromClauseAccess().getFROMKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFromClauseAccess().getFromEntriesFromClassParserRuleCall_1_0()); 
	    }
		lv_fromEntries_1_0=ruleFromClass		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFromClauseRule());
	        }
       		add(
       			$current, 
       			"fromEntries",
        		lv_fromEntries_1_0, 
        		"FromClass");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_2=KEYWORD_5
    {
    	newLeafNode(otherlv_2, grammarAccess.getFromClauseAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFromClauseAccess().getFromEntriesFromEntryParserRuleCall_2_1_0()); 
	    }
		lv_fromEntries_3_0=ruleFromEntry		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFromClauseRule());
	        }
       		add(
       			$current, 
       			"fromEntries",
        		lv_fromEntries_3_0, 
        		"FromEntry");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleFromEntry
entryRuleFromEntry returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getFromEntryRule()); }
	 iv_ruleFromEntry=ruleFromEntry 
	 { $current=$iv_ruleFromEntry.current; } 
	 EOF 
;

// Rule FromEntry
ruleFromEntry returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFromEntryAccess().getFromClassParserRuleCall_0()); 
    }
    this_FromClass_0=ruleFromClass
    {
        $current = $this_FromClass_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFromEntryAccess().getFromCollectionParserRuleCall_1()); 
    }
    this_FromCollection_1=ruleFromCollection
    {
        $current = $this_FromCollection_1.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleVariableDeclaration
entryRuleVariableDeclaration returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getVariableDeclarationRule()); }
	 iv_ruleVariableDeclaration=ruleVariableDeclaration 
	 { $current=$iv_ruleVariableDeclaration.current; } 
	 EOF 
;

// Rule VariableDeclaration
ruleVariableDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	otherlv_0=KEYWORD_17
    {
    	newLeafNode(otherlv_0, grammarAccess.getVariableDeclarationAccess().getASKeyword_0());
    }
)?(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getVariableDeclarationAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleFromClass
entryRuleFromClass returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getFromClassRule()); }
	 iv_ruleFromClass=ruleFromClass 
	 { $current=$iv_ruleFromClass.current; } 
	 EOF 
;

// Rule FromClass
ruleFromClass returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFromClassAccess().getFromClassIdParserRuleCall_0()); 
    }
    this_FromClassId_0=ruleFromClassId
    {
        $current = $this_FromClassId_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFromClassAccess().getFromClassVarParserRuleCall_1()); 
    }
    this_FromClassVar_1=ruleFromClassVar
    {
        $current = $this_FromClassVar_1.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleQualifiedIdentifier
entryRuleQualifiedIdentifier returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getQualifiedIdentifierRule()); } 
	 iv_ruleQualifiedIdentifier=ruleQualifiedIdentifier 
	 { $current=$iv_ruleQualifiedIdentifier.current.getText(); }  
	 EOF 
;

// Rule QualifiedIdentifier
ruleQualifiedIdentifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getQualifiedIdentifierAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw=KEYWORD_7 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedIdentifierAccess().getFullStopKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getQualifiedIdentifierAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;





// Entry rule entryRuleFromClassId
entryRuleFromClassId returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getFromClassIdRule()); }
	 iv_ruleFromClassId=ruleFromClassId 
	 { $current=$iv_ruleFromClassId.current; } 
	 EOF 
;

// Rule FromClassId
ruleFromClassId returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getFromClassIdAccess().getTypeQualifiedIdentifierParserRuleCall_0()); 
	    }
		lv_type_0_0=ruleQualifiedIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFromClassIdRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"QualifiedIdentifier");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleFromClassVar
entryRuleFromClassVar returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getFromClassVarRule()); }
	 iv_ruleFromClassVar=ruleFromClassVar 
	 { $current=$iv_ruleFromClassVar.current; } 
	 EOF 
;

// Rule FromClassVar
ruleFromClassVar returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFromClassVarAccess().getTypeQualifiedIdentifierParserRuleCall_0_0()); 
	    }
		lv_type_0_0=ruleQualifiedIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFromClassVarRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"QualifiedIdentifier");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFromClassVarAccess().getVariableVariableDeclarationParserRuleCall_1_0()); 
	    }
		lv_variable_1_0=ruleVariableDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFromClassVarRule());
	        }
       		set(
       			$current, 
       			"variable",
        		lv_variable_1_0, 
        		"VariableDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFromClassVarAccess().getJoinsFromJoinParserRuleCall_2_0()); 
	    }
		lv_joins_2_0=ruleFromJoin		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFromClassVarRule());
	        }
       		add(
       			$current, 
       			"joins",
        		lv_joins_2_0, 
        		"FromJoin");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleFromCollection
entryRuleFromCollection returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getFromCollectionRule()); }
	 iv_ruleFromCollection=ruleFromCollection 
	 { $current=$iv_ruleFromCollection.current; } 
	 EOF 
;

// Rule FromCollection
ruleFromCollection returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_19
    {
    	newLeafNode(otherlv_0, grammarAccess.getFromCollectionAccess().getINKeyword_0());
    }

	otherlv_1=KEYWORD_1
    {
    	newLeafNode(otherlv_1, grammarAccess.getFromCollectionAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFromCollectionAccess().getPathAliasAttributeExpressionParserRuleCall_2_0()); 
	    }
		lv_path_2_0=ruleAliasAttributeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFromCollectionRule());
	        }
       		set(
       			$current, 
       			"path",
        		lv_path_2_0, 
        		"AliasAttributeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_3=KEYWORD_2
    {
    	newLeafNode(otherlv_3, grammarAccess.getFromCollectionAccess().getRightParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFromCollectionAccess().getVariableVariableDeclarationParserRuleCall_4_0()); 
	    }
		lv_variable_4_0=ruleVariableDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFromCollectionRule());
	        }
       		set(
       			$current, 
       			"variable",
        		lv_variable_4_0, 
        		"VariableDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleFromJoin
entryRuleFromJoin returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getFromJoinRule()); }
	 iv_ruleFromJoin=ruleFromJoin 
	 { $current=$iv_ruleFromJoin.current; } 
	 EOF 
;

// Rule FromJoin
ruleFromJoin returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFromJoinAccess().getJoinParserRuleCall_0()); 
    }
    this_Join_0=ruleJoin
    {
        $current = $this_Join_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFromJoinAccess().getLeftJoinParserRuleCall_1()); 
    }
    this_LeftJoin_1=ruleLeftJoin
    {
        $current = $this_LeftJoin_1.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFromJoinAccess().getInnerJoinParserRuleCall_2()); 
    }
    this_InnerJoin_2=ruleInnerJoin
    {
        $current = $this_InnerJoin_2.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleJoin
entryRuleJoin returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getJoinRule()); }
	 iv_ruleJoin=ruleJoin 
	 { $current=$iv_ruleJoin.current; } 
	 EOF 
;

// Rule Join
ruleJoin returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_41
    {
    	newLeafNode(otherlv_0, grammarAccess.getJoinAccess().getJOINKeyword_0());
    }
(
(
		lv_isFetch_1_0=
	KEYWORD_54
    {
        newLeafNode(lv_isFetch_1_0, grammarAccess.getJoinAccess().getIsFetchFETCHKeyword_1_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getJoinRule());
	        }
       		setWithLastConsumed($current, "isFetch", true, "FETCH");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getJoinAccess().getPathAliasAttributeExpressionParserRuleCall_2_0()); 
	    }
		lv_path_2_0=ruleAliasAttributeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJoinRule());
	        }
       		set(
       			$current, 
       			"path",
        		lv_path_2_0, 
        		"AliasAttributeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getJoinAccess().getVariableVariableDeclarationParserRuleCall_3_0()); 
	    }
		lv_variable_3_0=ruleVariableDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJoinRule());
	        }
       		set(
       			$current, 
       			"variable",
        		lv_variable_3_0, 
        		"VariableDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleLeftJoin
entryRuleLeftJoin returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getLeftJoinRule()); }
	 iv_ruleLeftJoin=ruleLeftJoin 
	 { $current=$iv_ruleLeftJoin.current; } 
	 EOF 
;

// Rule LeftJoin
ruleLeftJoin returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_42
    {
    	newLeafNode(otherlv_0, grammarAccess.getLeftJoinAccess().getLEFTKeyword_0());
    }
(
(
		lv_isOuter_1_0=
	KEYWORD_61
    {
        newLeafNode(lv_isOuter_1_0, grammarAccess.getLeftJoinAccess().getIsOuterOUTERKeyword_1_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLeftJoinRule());
	        }
       		setWithLastConsumed($current, "isOuter", true, "OUTER");
	    }

)
)?
	otherlv_2=KEYWORD_41
    {
    	newLeafNode(otherlv_2, grammarAccess.getLeftJoinAccess().getJOINKeyword_2());
    }
(
(
		lv_isFetch_3_0=
	KEYWORD_54
    {
        newLeafNode(lv_isFetch_3_0, grammarAccess.getLeftJoinAccess().getIsFetchFETCHKeyword_3_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLeftJoinRule());
	        }
       		setWithLastConsumed($current, "isFetch", true, "FETCH");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getLeftJoinAccess().getPathAliasAttributeExpressionParserRuleCall_4_0()); 
	    }
		lv_path_4_0=ruleAliasAttributeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLeftJoinRule());
	        }
       		set(
       			$current, 
       			"path",
        		lv_path_4_0, 
        		"AliasAttributeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLeftJoinAccess().getVariableVariableDeclarationParserRuleCall_5_0()); 
	    }
		lv_variable_5_0=ruleVariableDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLeftJoinRule());
	        }
       		set(
       			$current, 
       			"variable",
        		lv_variable_5_0, 
        		"VariableDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleInnerJoin
entryRuleInnerJoin returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getInnerJoinRule()); }
	 iv_ruleInnerJoin=ruleInnerJoin 
	 { $current=$iv_ruleInnerJoin.current; } 
	 EOF 
;

// Rule InnerJoin
ruleInnerJoin returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_57
    {
    	newLeafNode(otherlv_0, grammarAccess.getInnerJoinAccess().getINNERKeyword_0());
    }

	otherlv_1=KEYWORD_41
    {
    	newLeafNode(otherlv_1, grammarAccess.getInnerJoinAccess().getJOINKeyword_1());
    }
(
(
		lv_isFetch_2_0=
	KEYWORD_54
    {
        newLeafNode(lv_isFetch_2_0, grammarAccess.getInnerJoinAccess().getIsFetchFETCHKeyword_2_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInnerJoinRule());
	        }
       		setWithLastConsumed($current, "isFetch", true, "FETCH");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getInnerJoinAccess().getPathAliasAttributeExpressionParserRuleCall_3_0()); 
	    }
		lv_path_3_0=ruleAliasAttributeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInnerJoinRule());
	        }
       		set(
       			$current, 
       			"path",
        		lv_path_3_0, 
        		"AliasAttributeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getInnerJoinAccess().getVariableVariableDeclarationParserRuleCall_4_0()); 
	    }
		lv_variable_4_0=ruleVariableDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInnerJoinRule());
	        }
       		set(
       			$current, 
       			"variable",
        		lv_variable_4_0, 
        		"VariableDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleWhereClause
entryRuleWhereClause returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getWhereClauseRule()); }
	 iv_ruleWhereClause=ruleWhereClause 
	 { $current=$iv_ruleWhereClause.current; } 
	 EOF 
;

// Rule WhereClause
ruleWhereClause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_63
    {
    	newLeafNode(otherlv_0, grammarAccess.getWhereClauseAccess().getWHEREKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWhereClauseAccess().getWhereEntryOrExpressionParserRuleCall_1_0()); 
	    }
		lv_whereEntry_1_0=ruleOrExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWhereClauseRule());
	        }
       		set(
       			$current, 
       			"whereEntry",
        		lv_whereEntry_1_0, 
        		"OrExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleOrExpression
entryRuleOrExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getOrExpressionRule()); }
	 iv_ruleOrExpression=ruleOrExpression 
	 { $current=$iv_ruleOrExpression.current; } 
	 EOF 
;

// Rule OrExpression
ruleOrExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0()); 
    }
    this_AndExpression_0=ruleAndExpression
    {
        $current = $this_AndExpression_0.current;
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getOrExpressionAccess().getOrExpressionEntriesAction_1_0(),
            $current);
    }
)(
	otherlv_2=KEYWORD_22
    {
    	newLeafNode(otherlv_2, grammarAccess.getOrExpressionAccess().getORKeyword_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOrExpressionAccess().getEntriesAndExpressionParserRuleCall_1_1_1_0()); 
	    }
		lv_entries_3_0=ruleAndExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrExpressionRule());
	        }
       		add(
       			$current, 
       			"entries",
        		lv_entries_3_0, 
        		"AndExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))+)?)
;





// Entry rule entryRuleAndExpression
entryRuleAndExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getAndExpressionRule()); }
	 iv_ruleAndExpression=ruleAndExpression 
	 { $current=$iv_ruleAndExpression.current; } 
	 EOF 
;

// Rule AndExpression
ruleAndExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAndExpressionAccess().getComparisonOperatorExpressionParserRuleCall_0()); 
    }
    this_ComparisonOperatorExpression_0=ruleComparisonOperatorExpression
    {
        $current = $this_ComparisonOperatorExpression_0.current;
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getAndExpressionAccess().getAndExpressionEntriesAction_1_0(),
            $current);
    }
)(
	otherlv_2=KEYWORD_25
    {
    	newLeafNode(otherlv_2, grammarAccess.getAndExpressionAccess().getANDKeyword_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAndExpressionAccess().getEntriesComparisonOperatorExpressionParserRuleCall_1_1_1_0()); 
	    }
		lv_entries_3_0=ruleComparisonOperatorExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAndExpressionRule());
	        }
       		add(
       			$current, 
       			"entries",
        		lv_entries_3_0, 
        		"ComparisonOperatorExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))+)?)
;





// Entry rule entryRuleComparisonOperatorExpression
entryRuleComparisonOperatorExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getComparisonOperatorExpressionRule()); }
	 iv_ruleComparisonOperatorExpression=ruleComparisonOperatorExpression 
	 { $current=$iv_ruleComparisonOperatorExpression.current; } 
	 EOF 
;

// Rule ComparisonOperatorExpression
ruleComparisonOperatorExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getComparisonOperatorExpressionAccess().getAdditionExpressionParserRuleCall_0()); 
    }
    this_AdditionExpression_0=ruleAdditionExpression
    {
        $current = $this_AdditionExpression_0.current;
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getComparisonOperatorExpressionAccess().getComparisonOperatorExpressionLeftAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getComparisonOperatorExpressionAccess().getOperatorComparisonOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleComparisonOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComparisonOperatorExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"ComparisonOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getComparisonOperatorExpressionAccess().getRightAdditionExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleAdditionExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComparisonOperatorExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"AdditionExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAdditionExpression
entryRuleAdditionExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getAdditionExpressionRule()); }
	 iv_ruleAdditionExpression=ruleAdditionExpression 
	 { $current=$iv_ruleAdditionExpression.current; } 
	 EOF 
;

// Rule AdditionExpression
ruleAdditionExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAdditionExpressionAccess().getMultiplicationExpressionParserRuleCall_0()); 
    }
    this_MultiplicationExpression_0=ruleMultiplicationExpression
    {
        $current = $this_MultiplicationExpression_0.current;
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAdditionExpressionAccess().getAdditionExpressionLeftAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAdditionExpressionAccess().getOperatorAdditionOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleAdditionOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditionExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"AdditionOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAdditionExpressionAccess().getRightMultiplicationExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleMultiplicationExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditionExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"MultiplicationExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleMultiplicationExpression
entryRuleMultiplicationExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getMultiplicationExpressionRule()); }
	 iv_ruleMultiplicationExpression=ruleMultiplicationExpression 
	 { $current=$iv_ruleMultiplicationExpression.current; } 
	 EOF 
;

// Rule MultiplicationExpression
ruleMultiplicationExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getMultiplicationExpressionAccess().getUnaryExpressionParserRuleCall_0()); 
    }
    this_UnaryExpression_0=ruleUnaryExpression
    {
        $current = $this_UnaryExpression_0.current;
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getMultiplicationExpressionAccess().getMultiplicationExpressionLeftAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicationExpressionAccess().getOperatorMultiplicationOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleMultiplicationOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicationExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"MultiplicationOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicationExpressionAccess().getRightUnaryExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleUnaryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicationExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"UnaryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleUnaryExpression
entryRuleUnaryExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getUnaryExpressionRule()); }
	 iv_ruleUnaryExpression=ruleUnaryExpression 
	 { $current=$iv_ruleUnaryExpression.current; } 
	 EOF 
;

// Rule UnaryExpression
ruleUnaryExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryExpressionAccess().getUnaryOperatorUnaryOperatorEnumRuleCall_0_0()); 
	    }
		lv_unaryOperator_0_0=ruleUnaryOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryExpressionRule());
	        }
       		set(
       			$current, 
       			"unaryOperator",
        		lv_unaryOperator_0_0, 
        		"UnaryOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryExpressionAccess().getRightConcreteExpressionParserRuleCall_1_0()); 
	    }
		lv_right_1_0=ruleConcreteExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_1_0, 
        		"ConcreteExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleConcreteExpression
entryRuleConcreteExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getConcreteExpressionRule()); }
	 iv_ruleConcreteExpression=ruleConcreteExpression 
	 { $current=$iv_ruleConcreteExpression.current; } 
	 EOF 
;

// Rule ConcreteExpression
ruleConcreteExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getConcreteExpressionAccess().getParenthesesExpressionParserRuleCall_0()); 
    }
    this_ParenthesesExpression_0=ruleParenthesesExpression
    {
        $current = $this_ParenthesesExpression_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getConcreteExpressionAccess().getExistsExpressionParserRuleCall_1()); 
    }
    this_ExistsExpression_1=ruleExistsExpression
    {
        $current = $this_ExistsExpression_1.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getConcreteExpressionAccess().getAllExpressionParserRuleCall_2()); 
    }
    this_AllExpression_2=ruleAllExpression
    {
        $current = $this_AllExpression_2.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getConcreteExpressionAccess().getAnyExpressionParserRuleCall_3()); 
    }
    this_AnyExpression_3=ruleAnyExpression
    {
        $current = $this_AnyExpression_3.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getConcreteExpressionAccess().getSomeExpressionParserRuleCall_4()); 
    }
    this_SomeExpression_4=ruleSomeExpression
    {
        $current = $this_SomeExpression_4.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getConcreteExpressionAccess().getCollectionExpressionParserRuleCall_5()); 
    }
    this_CollectionExpression_5=ruleCollectionExpression
    {
        $current = $this_CollectionExpression_5.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getConcreteExpressionAccess().getNullComparisonExpressionParserRuleCall_6()); 
    }
    this_NullComparisonExpression_6=ruleNullComparisonExpression
    {
        $current = $this_NullComparisonExpression_6.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getConcreteExpressionAccess().getEmptyComparisonExpressionParserRuleCall_7()); 
    }
    this_EmptyComparisonExpression_7=ruleEmptyComparisonExpression
    {
        $current = $this_EmptyComparisonExpression_7.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getConcreteExpressionAccess().getLikeExpressionParserRuleCall_8()); 
    }
    this_LikeExpression_8=ruleLikeExpression
    {
        $current = $this_LikeExpression_8.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getConcreteExpressionAccess().getInExpressionParserRuleCall_9()); 
    }
    this_InExpression_9=ruleInExpression
    {
        $current = $this_InExpression_9.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getConcreteExpressionAccess().getBetweenExpressionParserRuleCall_10()); 
    }
    this_BetweenExpression_10=ruleBetweenExpression
    {
        $current = $this_BetweenExpression_10.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getConcreteExpressionAccess().getFunctionExpressionParserRuleCall_11()); 
    }
    this_FunctionExpression_11=ruleFunctionExpression
    {
        $current = $this_FunctionExpression_11.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getConcreteExpressionAccess().getAliasAttributeExpressionParserRuleCall_12()); 
    }
    this_AliasAttributeExpression_12=ruleAliasAttributeExpression
    {
        $current = $this_AliasAttributeExpression_12.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getConcreteExpressionAccess().getLiteralParserRuleCall_13()); 
    }
    this_Literal_13=ruleLiteral
    {
        $current = $this_Literal_13.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getConcreteExpressionAccess().getParameterExpressionParserRuleCall_14()); 
    }
    this_ParameterExpression_14=ruleParameterExpression
    {
        $current = $this_ParameterExpression_14.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleParenthesesExpression
entryRuleParenthesesExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getParenthesesExpressionRule()); }
	 iv_ruleParenthesesExpression=ruleParenthesesExpression 
	 { $current=$iv_ruleParenthesesExpression.current; } 
	 EOF 
;

// Rule ParenthesesExpression
ruleParenthesesExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_1
    {
    	newLeafNode(otherlv_0, grammarAccess.getParenthesesExpressionAccess().getLeftParenthesisKeyword_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getParenthesesExpressionAccess().getExpressionTermParserRuleCall_1()); 
    }
    this_ExpressionTerm_1=ruleExpressionTerm
    {
        $current = $this_ExpressionTerm_1.current;
        afterParserOrEnumRuleCall();
    }

	otherlv_2=KEYWORD_2
    {
    	newLeafNode(otherlv_2, grammarAccess.getParenthesesExpressionAccess().getRightParenthesisKeyword_2());
    }
)
;





// Entry rule entryRuleExistsExpression
entryRuleExistsExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getExistsExpressionRule()); }
	 iv_ruleExistsExpression=ruleExistsExpression 
	 { $current=$iv_ruleExistsExpression.current; } 
	 EOF 
;

// Rule ExistsExpression
ruleExistsExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_66
    {
    	newLeafNode(otherlv_0, grammarAccess.getExistsExpressionAccess().getEXISTSKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExistsExpressionAccess().getRightSubqueryParserRuleCall_1_0()); 
	    }
		lv_right_1_0=ruleSubquery		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExistsExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_1_0, 
        		"Subquery");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleAllExpression
entryRuleAllExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getAllExpressionRule()); }
	 iv_ruleAllExpression=ruleAllExpression 
	 { $current=$iv_ruleAllExpression.current; } 
	 EOF 
;

// Rule AllExpression
ruleAllExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_24
    {
    	newLeafNode(otherlv_0, grammarAccess.getAllExpressionAccess().getALLKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAllExpressionAccess().getRightSubqueryParserRuleCall_1_0()); 
	    }
		lv_right_1_0=ruleSubquery		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAllExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_1_0, 
        		"Subquery");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleAnyExpression
entryRuleAnyExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getAnyExpressionRule()); }
	 iv_ruleAnyExpression=ruleAnyExpression 
	 { $current=$iv_ruleAnyExpression.current; } 
	 EOF 
;

// Rule AnyExpression
ruleAnyExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_26
    {
    	newLeafNode(otherlv_0, grammarAccess.getAnyExpressionAccess().getANYKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAnyExpressionAccess().getRightSubqueryParserRuleCall_1_0()); 
	    }
		lv_right_1_0=ruleSubquery		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnyExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_1_0, 
        		"Subquery");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleSomeExpression
entryRuleSomeExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getSomeExpressionRule()); }
	 iv_ruleSomeExpression=ruleSomeExpression 
	 { $current=$iv_ruleSomeExpression.current; } 
	 EOF 
;

// Rule SomeExpression
ruleSomeExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_46
    {
    	newLeafNode(otherlv_0, grammarAccess.getSomeExpressionAccess().getSOMEKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSomeExpressionAccess().getRightSubqueryParserRuleCall_1_0()); 
	    }
		lv_right_1_0=ruleSubquery		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSomeExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_1_0, 
        		"Subquery");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleCollectionExpression
entryRuleCollectionExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getCollectionExpressionRule()); }
	 iv_ruleCollectionExpression=ruleCollectionExpression 
	 { $current=$iv_ruleCollectionExpression.current; } 
	 EOF 
;

// Rule CollectionExpression
ruleCollectionExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getCollectionExpressionAccess().getLeftVariableParserRuleCall_0_0()); 
	    }
		lv_left_0_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCollectionExpressionRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_0_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_isNot_1_0=
	KEYWORD_34
    {
        newLeafNode(lv_isNot_1_0, grammarAccess.getCollectionExpressionAccess().getIsNotNOTKeyword_1_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCollectionExpressionRule());
	        }
       		setWithLastConsumed($current, "isNot", true, "NOT");
	    }

)
)?
	otherlv_2=KEYWORD_70
    {
    	newLeafNode(otherlv_2, grammarAccess.getCollectionExpressionAccess().getMEMBERKeyword_2());
    }
(
	otherlv_3=KEYWORD_21
    {
    	newLeafNode(otherlv_3, grammarAccess.getCollectionExpressionAccess().getOFKeyword_3());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getCollectionExpressionAccess().getRightAliasAttributeExpressionParserRuleCall_4_0()); 
	    }
		lv_right_4_0=ruleAliasAttributeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCollectionExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_4_0, 
        		"AliasAttributeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleNullComparisonExpression
entryRuleNullComparisonExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getNullComparisonExpressionRule()); }
	 iv_ruleNullComparisonExpression=ruleNullComparisonExpression 
	 { $current=$iv_ruleNullComparisonExpression.current; } 
	 EOF 
;

// Rule NullComparisonExpression
ruleNullComparisonExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getNullComparisonExpressionAccess().getLeftVariableParserRuleCall_0_0()); 
	    }
		lv_left_0_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNullComparisonExpressionRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_0_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_1=KEYWORD_20
    {
    	newLeafNode(otherlv_1, grammarAccess.getNullComparisonExpressionAccess().getISKeyword_1());
    }
(
(
		lv_isNot_2_0=
	KEYWORD_34
    {
        newLeafNode(lv_isNot_2_0, grammarAccess.getNullComparisonExpressionAccess().getIsNotNOTKeyword_2_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNullComparisonExpressionRule());
	        }
       		setWithLastConsumed($current, "isNot", true, "NOT");
	    }

)
)?
	otherlv_3=KEYWORD_44
    {
    	newLeafNode(otherlv_3, grammarAccess.getNullComparisonExpressionAccess().getNULLKeyword_3());
    }
)
;





// Entry rule entryRuleEmptyComparisonExpression
entryRuleEmptyComparisonExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getEmptyComparisonExpressionRule()); }
	 iv_ruleEmptyComparisonExpression=ruleEmptyComparisonExpression 
	 { $current=$iv_ruleEmptyComparisonExpression.current; } 
	 EOF 
;

// Rule EmptyComparisonExpression
ruleEmptyComparisonExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getEmptyComparisonExpressionAccess().getLeftVariableParserRuleCall_0_0()); 
	    }
		lv_left_0_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEmptyComparisonExpressionRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_0_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_1=KEYWORD_20
    {
    	newLeafNode(otherlv_1, grammarAccess.getEmptyComparisonExpressionAccess().getISKeyword_1());
    }
(
(
		lv_isNot_2_0=
	KEYWORD_34
    {
        newLeafNode(lv_isNot_2_0, grammarAccess.getEmptyComparisonExpressionAccess().getIsNotNOTKeyword_2_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEmptyComparisonExpressionRule());
	        }
       		setWithLastConsumed($current, "isNot", true, "NOT");
	    }

)
)?
	otherlv_3=KEYWORD_52
    {
    	newLeafNode(otherlv_3, grammarAccess.getEmptyComparisonExpressionAccess().getEMPTYKeyword_3());
    }
)
;





// Entry rule entryRuleLikeExpression
entryRuleLikeExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getLikeExpressionRule()); }
	 iv_ruleLikeExpression=ruleLikeExpression 
	 { $current=$iv_ruleLikeExpression.current; } 
	 EOF 
;

// Rule LikeExpression
ruleLikeExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getLikeExpressionAccess().getLeftVariableParserRuleCall_0_0()); 
	    }
		lv_left_0_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLikeExpressionRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_0_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_isNot_1_0=
	KEYWORD_34
    {
        newLeafNode(lv_isNot_1_0, grammarAccess.getLikeExpressionAccess().getIsNotNOTKeyword_1_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLikeExpressionRule());
	        }
       		setWithLastConsumed($current, "isNot", true, "NOT");
	    }

)
)?
	otherlv_2=KEYWORD_43
    {
    	newLeafNode(otherlv_2, grammarAccess.getLikeExpressionAccess().getLIKEKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLikeExpressionAccess().getRightStringLiteralParserRuleCall_3_0()); 
	    }
		lv_right_3_0=ruleStringLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLikeExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"StringLiteral");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleInExpression
entryRuleInExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getInExpressionRule()); }
	 iv_ruleInExpression=ruleInExpression 
	 { $current=$iv_ruleInExpression.current; } 
	 EOF 
;

// Rule InExpression
ruleInExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getInExpressionAccess().getInSeqExpressionParserRuleCall_0()); 
    }
    this_InSeqExpression_0=ruleInSeqExpression
    {
        $current = $this_InSeqExpression_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getInExpressionAccess().getInQueryExpressionParserRuleCall_1()); 
    }
    this_InQueryExpression_1=ruleInQueryExpression
    {
        $current = $this_InQueryExpression_1.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleInSeqExpression
entryRuleInSeqExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getInSeqExpressionRule()); }
	 iv_ruleInSeqExpression=ruleInSeqExpression 
	 { $current=$iv_ruleInSeqExpression.current; } 
	 EOF 
;

// Rule InSeqExpression
ruleInSeqExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getInSeqExpressionAccess().getLeftVariableParserRuleCall_0_0()); 
	    }
		lv_left_0_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInSeqExpressionRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_0_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_isNot_1_0=
	KEYWORD_34
    {
        newLeafNode(lv_isNot_1_0, grammarAccess.getInSeqExpressionAccess().getIsNotNOTKeyword_1_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInSeqExpressionRule());
	        }
       		setWithLastConsumed($current, "isNot", true, "NOT");
	    }

)
)?
	otherlv_2=KEYWORD_19
    {
    	newLeafNode(otherlv_2, grammarAccess.getInSeqExpressionAccess().getINKeyword_2());
    }

	otherlv_3=KEYWORD_1
    {
    	newLeafNode(otherlv_3, grammarAccess.getInSeqExpressionAccess().getLeftParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInSeqExpressionAccess().getItemsVariableParserRuleCall_4_0()); 
	    }
		lv_items_4_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInSeqExpressionRule());
	        }
       		add(
       			$current, 
       			"items",
        		lv_items_4_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_5=KEYWORD_5
    {
    	newLeafNode(otherlv_5, grammarAccess.getInSeqExpressionAccess().getCommaKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInSeqExpressionAccess().getItemsVariableParserRuleCall_5_1_0()); 
	    }
		lv_items_6_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInSeqExpressionRule());
	        }
       		add(
       			$current, 
       			"items",
        		lv_items_6_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
))*
	otherlv_7=KEYWORD_2
    {
    	newLeafNode(otherlv_7, grammarAccess.getInSeqExpressionAccess().getRightParenthesisKeyword_6());
    }
)
;





// Entry rule entryRuleInQueryExpression
entryRuleInQueryExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getInQueryExpressionRule()); }
	 iv_ruleInQueryExpression=ruleInQueryExpression 
	 { $current=$iv_ruleInQueryExpression.current; } 
	 EOF 
;

// Rule InQueryExpression
ruleInQueryExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getInQueryExpressionAccess().getLeftVariableParserRuleCall_0_0()); 
	    }
		lv_left_0_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInQueryExpressionRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_0_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_isNot_1_0=
	KEYWORD_34
    {
        newLeafNode(lv_isNot_1_0, grammarAccess.getInQueryExpressionAccess().getIsNotNOTKeyword_1_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInQueryExpressionRule());
	        }
       		setWithLastConsumed($current, "isNot", true, "NOT");
	    }

)
)?
	otherlv_2=KEYWORD_19
    {
    	newLeafNode(otherlv_2, grammarAccess.getInQueryExpressionAccess().getINKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInQueryExpressionAccess().getQuerySubqueryParserRuleCall_3_0()); 
	    }
		lv_query_3_0=ruleSubquery		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInQueryExpressionRule());
	        }
       		set(
       			$current, 
       			"query",
        		lv_query_3_0, 
        		"Subquery");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleBetweenExpression
entryRuleBetweenExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getBetweenExpressionRule()); }
	 iv_ruleBetweenExpression=ruleBetweenExpression 
	 { $current=$iv_ruleBetweenExpression.current; } 
	 EOF 
;

// Rule BetweenExpression
ruleBetweenExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getBetweenExpressionAccess().getLeftVariableParserRuleCall_0_0()); 
	    }
		lv_left_0_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBetweenExpressionRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_0_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_isNot_1_0=
	KEYWORD_34
    {
        newLeafNode(lv_isNot_1_0, grammarAccess.getBetweenExpressionAccess().getIsNotNOTKeyword_1_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBetweenExpressionRule());
	        }
       		setWithLastConsumed($current, "isNot", true, "NOT");
	    }

)
)?
	otherlv_2=KEYWORD_75
    {
    	newLeafNode(otherlv_2, grammarAccess.getBetweenExpressionAccess().getBETWEENKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBetweenExpressionAccess().getMinLiteralParserRuleCall_3_0()); 
	    }
		lv_min_3_0=ruleLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBetweenExpressionRule());
	        }
       		set(
       			$current, 
       			"min",
        		lv_min_3_0, 
        		"Literal");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_4=KEYWORD_25
    {
    	newLeafNode(otherlv_4, grammarAccess.getBetweenExpressionAccess().getANDKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBetweenExpressionAccess().getMaxLiteralParserRuleCall_5_0()); 
	    }
		lv_max_5_0=ruleLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBetweenExpressionRule());
	        }
       		set(
       			$current, 
       			"max",
        		lv_max_5_0, 
        		"Literal");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	 iv_ruleVariable=ruleVariable 
	 { $current=$iv_ruleVariable.current; } 
	 EOF 
;

// Rule Variable
ruleVariable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getVariableAccess().getAliasAttributeExpressionParserRuleCall_0()); 
    }
    this_AliasAttributeExpression_0=ruleAliasAttributeExpression
    {
        $current = $this_AliasAttributeExpression_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getVariableAccess().getParameterExpressionParserRuleCall_1()); 
    }
    this_ParameterExpression_1=ruleParameterExpression
    {
        $current = $this_ParameterExpression_1.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getVariableAccess().getLiteralParserRuleCall_2()); 
    }
    this_Literal_2=ruleLiteral
    {
        $current = $this_Literal_2.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleExpressionTerm
entryRuleExpressionTerm returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getExpressionTermRule()); }
	 iv_ruleExpressionTerm=ruleExpressionTerm 
	 { $current=$iv_ruleExpressionTerm.current; } 
	 EOF 
;

// Rule ExpressionTerm
ruleExpressionTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExpressionTermAccess().getVariableParserRuleCall_0()); 
    }
    this_Variable_0=ruleVariable
    {
        $current = $this_Variable_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExpressionTermAccess().getSubqueryParserRuleCall_1()); 
    }
    this_Subquery_1=ruleSubquery
    {
        $current = $this_Subquery_1.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAliasAttributeExpression
entryRuleAliasAttributeExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getAliasAttributeExpressionRule()); }
	 iv_ruleAliasAttributeExpression=ruleAliasAttributeExpression 
	 { $current=$iv_ruleAliasAttributeExpression.current; } 
	 EOF 
;

// Rule AliasAttributeExpression
ruleAliasAttributeExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAliasAttributeExpressionRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getAliasAttributeExpressionAccess().getAliasVariableDeclarationCrossReference_0_0()); 
	}

)
)(
	otherlv_1=KEYWORD_7
    {
    	newLeafNode(otherlv_1, grammarAccess.getAliasAttributeExpressionAccess().getFullStopKeyword_1_0());
    }
(
(
		lv_attributes_2_0=RULE_ID
		{
			newLeafNode(lv_attributes_2_0, grammarAccess.getAliasAttributeExpressionAccess().getAttributesIDTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAliasAttributeExpressionRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"attributes",
        		lv_attributes_2_0, 
        		"ID");
	    }

)
))*)
;





// Entry rule entryRuleParameterExpression
entryRuleParameterExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getParameterExpressionRule()); }
	 iv_ruleParameterExpression=ruleParameterExpression 
	 { $current=$iv_ruleParameterExpression.current; } 
	 EOF 
;

// Rule ParameterExpression
ruleParameterExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	otherlv_0=KEYWORD_9
    {
    	newLeafNode(otherlv_0, grammarAccess.getParameterExpressionAccess().getColonKeyword_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParameterExpressionAccess().getNameParameterNameParserRuleCall_0_1_0()); 
	    }
		lv_name_1_0=ruleParameterName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterExpressionRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ParameterName");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
	otherlv_2=KEYWORD_13
    {
    	newLeafNode(otherlv_2, grammarAccess.getParameterExpressionAccess().getQuestionMarkKeyword_1_0());
    }
(
(
		lv_index_3_0=RULE_INT
		{
			newLeafNode(lv_index_3_0, grammarAccess.getParameterExpressionAccess().getIndexINTTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParameterExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"index",
        		lv_index_3_0, 
        		"INT");
	    }

)
)))
;





// Entry rule entryRuleFunctionExpression
entryRuleFunctionExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getFunctionExpressionRule()); }
	 iv_ruleFunctionExpression=ruleFunctionExpression 
	 { $current=$iv_ruleFunctionExpression.current; } 
	 EOF 
;

// Rule FunctionExpression
ruleFunctionExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFunctionExpressionAccess().getArithmeticFunctionExpressionParserRuleCall_0()); 
    }
    this_ArithmeticFunctionExpression_0=ruleArithmeticFunctionExpression
    {
        $current = $this_ArithmeticFunctionExpression_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFunctionExpressionAccess().getCollectionFunctionExpressionParserRuleCall_1()); 
    }
    this_CollectionFunctionExpression_1=ruleCollectionFunctionExpression
    {
        $current = $this_CollectionFunctionExpression_1.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFunctionExpressionAccess().getStringFunctionExpressionParserRuleCall_2()); 
    }
    this_StringFunctionExpression_2=ruleStringFunctionExpression
    {
        $current = $this_StringFunctionExpression_2.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFunctionExpressionAccess().getTemporalFunctionExpressionParserRuleCall_3()); 
    }
    this_TemporalFunctionExpression_3=ruleTemporalFunctionExpression
    {
        $current = $this_TemporalFunctionExpression_3.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleStringFunctionExpression
entryRuleStringFunctionExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getStringFunctionExpressionRule()); }
	 iv_ruleStringFunctionExpression=ruleStringFunctionExpression 
	 { $current=$iv_ruleStringFunctionExpression.current; } 
	 EOF 
;

// Rule StringFunctionExpression
ruleStringFunctionExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		lv_name_0_0=
	KEYWORD_64
    {
        newLeafNode(lv_name_0_0, grammarAccess.getStringFunctionExpressionAccess().getNameCONCATKeyword_0_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStringFunctionExpressionRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_0, "CONCAT");
	    }

)
)
	otherlv_1=KEYWORD_1
    {
    	newLeafNode(otherlv_1, grammarAccess.getStringFunctionExpressionAccess().getLeftParenthesisKeyword_0_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStringFunctionExpressionAccess().getFieldsVariableParserRuleCall_0_2_0()); 
	    }
		lv_fields_2_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStringFunctionExpressionRule());
	        }
       		add(
       			$current, 
       			"fields",
        		lv_fields_2_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_3=KEYWORD_5
    {
    	newLeafNode(otherlv_3, grammarAccess.getStringFunctionExpressionAccess().getCommaKeyword_0_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStringFunctionExpressionAccess().getFieldsVariableParserRuleCall_0_3_1_0()); 
	    }
		lv_fields_4_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStringFunctionExpressionRule());
	        }
       		add(
       			$current, 
       			"fields",
        		lv_fields_4_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
))*
	otherlv_5=KEYWORD_2
    {
    	newLeafNode(otherlv_5, grammarAccess.getStringFunctionExpressionAccess().getRightParenthesisKeyword_0_4());
    }
)
    |((
(
		lv_name_6_0=
	KEYWORD_79
    {
        newLeafNode(lv_name_6_0, grammarAccess.getStringFunctionExpressionAccess().getNameSUBSTRINGKeyword_1_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStringFunctionExpressionRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_6_0, "SUBSTRING");
	    }

)
)
	otherlv_7=KEYWORD_1
    {
    	newLeafNode(otherlv_7, grammarAccess.getStringFunctionExpressionAccess().getLeftParenthesisKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStringFunctionExpressionAccess().getFieldVariableParserRuleCall_1_2_0()); 
	    }
		lv_field_8_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStringFunctionExpressionRule());
	        }
       		set(
       			$current, 
       			"field",
        		lv_field_8_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_9=KEYWORD_5
    {
    	newLeafNode(otherlv_9, grammarAccess.getStringFunctionExpressionAccess().getCommaKeyword_1_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStringFunctionExpressionAccess().getStartPosVariableParserRuleCall_1_4_0()); 
	    }
		lv_startPos_10_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStringFunctionExpressionRule());
	        }
       		set(
       			$current, 
       			"startPos",
        		lv_startPos_10_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_11=KEYWORD_5
    {
    	newLeafNode(otherlv_11, grammarAccess.getStringFunctionExpressionAccess().getCommaKeyword_1_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStringFunctionExpressionAccess().getLengthVariableParserRuleCall_1_5_1_0()); 
	    }
		lv_length_12_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStringFunctionExpressionRule());
	        }
       		set(
       			$current, 
       			"length",
        		lv_length_12_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
))?
	otherlv_13=KEYWORD_2
    {
    	newLeafNode(otherlv_13, grammarAccess.getStringFunctionExpressionAccess().getRightParenthesisKeyword_1_6());
    }
)
    |((
(
		lv_name_14_0=
	KEYWORD_48
    {
        newLeafNode(lv_name_14_0, grammarAccess.getStringFunctionExpressionAccess().getNameTRIMKeyword_2_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStringFunctionExpressionRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_14_0, "TRIM");
	    }

)
)
	otherlv_15=KEYWORD_1
    {
    	newLeafNode(otherlv_15, grammarAccess.getStringFunctionExpressionAccess().getLeftParenthesisKeyword_2_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStringFunctionExpressionAccess().getTrimSpecTrimSpecEnumRuleCall_2_2_0()); 
	    }
		lv_trimSpec_16_0=ruleTrimSpec		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStringFunctionExpressionRule());
	        }
       		set(
       			$current, 
       			"trimSpec",
        		lv_trimSpec_16_0, 
        		"TrimSpec");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getStringFunctionExpressionAccess().getTrimCharVariableParserRuleCall_2_3_0()); 
	    }
		lv_trimChar_17_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStringFunctionExpressionRule());
	        }
       		set(
       			$current, 
       			"trimChar",
        		lv_trimChar_17_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
	otherlv_18=KEYWORD_39
    {
    	newLeafNode(otherlv_18, grammarAccess.getStringFunctionExpressionAccess().getFROMKeyword_2_4());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getStringFunctionExpressionAccess().getFieldVariableParserRuleCall_2_5_0()); 
	    }
		lv_field_19_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStringFunctionExpressionRule());
	        }
       		set(
       			$current, 
       			"field",
        		lv_field_19_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_20=KEYWORD_2
    {
    	newLeafNode(otherlv_20, grammarAccess.getStringFunctionExpressionAccess().getRightParenthesisKeyword_2_6());
    }
)
    |((
(
		lv_name_21_0=
	KEYWORD_58
    {
        newLeafNode(lv_name_21_0, grammarAccess.getStringFunctionExpressionAccess().getNameLOWERKeyword_3_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStringFunctionExpressionRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_21_0, "LOWER");
	    }

)
)
	otherlv_22=KEYWORD_1
    {
    	newLeafNode(otherlv_22, grammarAccess.getStringFunctionExpressionAccess().getLeftParenthesisKeyword_3_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStringFunctionExpressionAccess().getFieldVariableParserRuleCall_3_2_0()); 
	    }
		lv_field_23_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStringFunctionExpressionRule());
	        }
       		set(
       			$current, 
       			"field",
        		lv_field_23_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_24=KEYWORD_2
    {
    	newLeafNode(otherlv_24, grammarAccess.getStringFunctionExpressionAccess().getRightParenthesisKeyword_3_3());
    }
)
    |((
(
		lv_name_25_0=
	KEYWORD_62
    {
        newLeafNode(lv_name_25_0, grammarAccess.getStringFunctionExpressionAccess().getNameUPPERKeyword_4_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStringFunctionExpressionRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_25_0, "UPPER");
	    }

)
)
	otherlv_26=KEYWORD_1
    {
    	newLeafNode(otherlv_26, grammarAccess.getStringFunctionExpressionAccess().getLeftParenthesisKeyword_4_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStringFunctionExpressionAccess().getFieldVariableParserRuleCall_4_2_0()); 
	    }
		lv_field_27_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStringFunctionExpressionRule());
	        }
       		set(
       			$current, 
       			"field",
        		lv_field_27_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_28=KEYWORD_2
    {
    	newLeafNode(otherlv_28, grammarAccess.getStringFunctionExpressionAccess().getRightParenthesisKeyword_4_3());
    }
)
    |((
(
		lv_name_29_0=
	KEYWORD_68
    {
        newLeafNode(lv_name_29_0, grammarAccess.getStringFunctionExpressionAccess().getNameLENGTHKeyword_5_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStringFunctionExpressionRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_29_0, "LENGTH");
	    }

)
)
	otherlv_30=KEYWORD_1
    {
    	newLeafNode(otherlv_30, grammarAccess.getStringFunctionExpressionAccess().getLeftParenthesisKeyword_5_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStringFunctionExpressionAccess().getFieldVariableParserRuleCall_5_2_0()); 
	    }
		lv_field_31_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStringFunctionExpressionRule());
	        }
       		set(
       			$current, 
       			"field",
        		lv_field_31_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_32=KEYWORD_2
    {
    	newLeafNode(otherlv_32, grammarAccess.getStringFunctionExpressionAccess().getRightParenthesisKeyword_5_3());
    }
)
    |((
(
		lv_name_33_0=
	KEYWORD_69
    {
        newLeafNode(lv_name_33_0, grammarAccess.getStringFunctionExpressionAccess().getNameLOCATEKeyword_6_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStringFunctionExpressionRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_33_0, "LOCATE");
	    }

)
)
	otherlv_34=KEYWORD_1
    {
    	newLeafNode(otherlv_34, grammarAccess.getStringFunctionExpressionAccess().getLeftParenthesisKeyword_6_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStringFunctionExpressionAccess().getFieldsVariableParserRuleCall_6_2_0()); 
	    }
		lv_fields_35_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStringFunctionExpressionRule());
	        }
       		add(
       			$current, 
       			"fields",
        		lv_fields_35_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_36=KEYWORD_5
    {
    	newLeafNode(otherlv_36, grammarAccess.getStringFunctionExpressionAccess().getCommaKeyword_6_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStringFunctionExpressionAccess().getFieldsVariableParserRuleCall_6_4_0()); 
	    }
		lv_fields_37_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStringFunctionExpressionRule());
	        }
       		add(
       			$current, 
       			"fields",
        		lv_fields_37_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_38=KEYWORD_5
    {
    	newLeafNode(otherlv_38, grammarAccess.getStringFunctionExpressionAccess().getCommaKeyword_6_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStringFunctionExpressionAccess().getStartPosVariableParserRuleCall_6_5_1_0()); 
	    }
		lv_startPos_39_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStringFunctionExpressionRule());
	        }
       		set(
       			$current, 
       			"startPos",
        		lv_startPos_39_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
))?
	otherlv_40=KEYWORD_2
    {
    	newLeafNode(otherlv_40, grammarAccess.getStringFunctionExpressionAccess().getRightParenthesisKeyword_6_6());
    }
))
;





// Entry rule entryRuleArithmeticFunctionExpression
entryRuleArithmeticFunctionExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getArithmeticFunctionExpressionRule()); }
	 iv_ruleArithmeticFunctionExpression=ruleArithmeticFunctionExpression 
	 { $current=$iv_ruleArithmeticFunctionExpression.current; } 
	 EOF 
;

// Rule ArithmeticFunctionExpression
ruleArithmeticFunctionExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		lv_name_0_0=
	KEYWORD_23
    {
        newLeafNode(lv_name_0_0, grammarAccess.getArithmeticFunctionExpressionAccess().getNameABSKeyword_0_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArithmeticFunctionExpressionRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_0, "ABS");
	    }

)
)
	otherlv_1=KEYWORD_1
    {
    	newLeafNode(otherlv_1, grammarAccess.getArithmeticFunctionExpressionAccess().getLeftParenthesisKeyword_0_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArithmeticFunctionExpressionAccess().getFieldVariableParserRuleCall_0_2_0()); 
	    }
		lv_field_2_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArithmeticFunctionExpressionRule());
	        }
       		set(
       			$current, 
       			"field",
        		lv_field_2_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_3=KEYWORD_2
    {
    	newLeafNode(otherlv_3, grammarAccess.getArithmeticFunctionExpressionAccess().getRightParenthesisKeyword_0_3());
    }
)
    |((
(
		lv_name_4_0=
	KEYWORD_47
    {
        newLeafNode(lv_name_4_0, grammarAccess.getArithmeticFunctionExpressionAccess().getNameSQRTKeyword_1_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArithmeticFunctionExpressionRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_4_0, "SQRT");
	    }

)
)
	otherlv_5=KEYWORD_1
    {
    	newLeafNode(otherlv_5, grammarAccess.getArithmeticFunctionExpressionAccess().getLeftParenthesisKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArithmeticFunctionExpressionAccess().getFieldVariableParserRuleCall_1_2_0()); 
	    }
		lv_field_6_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArithmeticFunctionExpressionRule());
	        }
       		set(
       			$current, 
       			"field",
        		lv_field_6_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_7=KEYWORD_2
    {
    	newLeafNode(otherlv_7, grammarAccess.getArithmeticFunctionExpressionAccess().getRightParenthesisKeyword_1_3());
    }
)
    |((
(
		lv_name_8_0=
	KEYWORD_32
    {
        newLeafNode(lv_name_8_0, grammarAccess.getArithmeticFunctionExpressionAccess().getNameMODKeyword_2_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArithmeticFunctionExpressionRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_8_0, "MOD");
	    }

)
)
	otherlv_9=KEYWORD_1
    {
    	newLeafNode(otherlv_9, grammarAccess.getArithmeticFunctionExpressionAccess().getLeftParenthesisKeyword_2_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArithmeticFunctionExpressionAccess().getFieldsVariableParserRuleCall_2_2_0()); 
	    }
		lv_fields_10_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArithmeticFunctionExpressionRule());
	        }
       		add(
       			$current, 
       			"fields",
        		lv_fields_10_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_11=KEYWORD_5
    {
    	newLeafNode(otherlv_11, grammarAccess.getArithmeticFunctionExpressionAccess().getCommaKeyword_2_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArithmeticFunctionExpressionAccess().getFieldsVariableParserRuleCall_2_4_0()); 
	    }
		lv_fields_12_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArithmeticFunctionExpressionRule());
	        }
       		add(
       			$current, 
       			"fields",
        		lv_fields_12_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
)+
	otherlv_13=KEYWORD_2
    {
    	newLeafNode(otherlv_13, grammarAccess.getArithmeticFunctionExpressionAccess().getRightParenthesisKeyword_2_5());
    }
))
;





// Entry rule entryRuleCollectionFunctionExpression
entryRuleCollectionFunctionExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getCollectionFunctionExpressionRule()); }
	 iv_ruleCollectionFunctionExpression=ruleCollectionFunctionExpression 
	 { $current=$iv_ruleCollectionFunctionExpression.current; } 
	 EOF 
;

// Rule CollectionFunctionExpression
ruleCollectionFunctionExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		lv_name_0_0=
	KEYWORD_56
    {
        newLeafNode(lv_name_0_0, grammarAccess.getCollectionFunctionExpressionAccess().getNameINDEXKeyword_0_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCollectionFunctionExpressionRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_0, "INDEX");
	    }

)
)
	otherlv_1=KEYWORD_1
    {
    	newLeafNode(otherlv_1, grammarAccess.getCollectionFunctionExpressionAccess().getLeftParenthesisKeyword_0_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCollectionFunctionExpressionAccess().getFieldVariableParserRuleCall_0_2_0()); 
	    }
		lv_field_2_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCollectionFunctionExpressionRule());
	        }
       		set(
       			$current, 
       			"field",
        		lv_field_2_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_3=KEYWORD_2
    {
    	newLeafNode(otherlv_3, grammarAccess.getCollectionFunctionExpressionAccess().getRightParenthesisKeyword_0_3());
    }
)
    |((
(
		lv_name_4_0=
	KEYWORD_45
    {
        newLeafNode(lv_name_4_0, grammarAccess.getCollectionFunctionExpressionAccess().getNameSIZEKeyword_1_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCollectionFunctionExpressionRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_4_0, "SIZE");
	    }

)
)
	otherlv_5=KEYWORD_1
    {
    	newLeafNode(otherlv_5, grammarAccess.getCollectionFunctionExpressionAccess().getLeftParenthesisKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCollectionFunctionExpressionAccess().getFieldVariableParserRuleCall_1_2_0()); 
	    }
		lv_field_6_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCollectionFunctionExpressionRule());
	        }
       		set(
       			$current, 
       			"field",
        		lv_field_6_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_7=KEYWORD_2
    {
    	newLeafNode(otherlv_7, grammarAccess.getCollectionFunctionExpressionAccess().getRightParenthesisKeyword_1_3());
    }
))
;





// Entry rule entryRuleTemporalFunctionExpression
entryRuleTemporalFunctionExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getTemporalFunctionExpressionRule()); }
	 iv_ruleTemporalFunctionExpression=ruleTemporalFunctionExpression 
	 { $current=$iv_ruleTemporalFunctionExpression.current; } 
	 EOF 
;

// Rule TemporalFunctionExpression
ruleTemporalFunctionExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		lv_name_0_0=
	KEYWORD_80
    {
        newLeafNode(lv_name_0_0, grammarAccess.getTemporalFunctionExpressionAccess().getNameCURRENT_DATEKeyword_0_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTemporalFunctionExpressionRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_0, "CURRENT_DATE");
	    }

)
)(
	otherlv_1=KEYWORD_1
    {
    	newLeafNode(otherlv_1, grammarAccess.getTemporalFunctionExpressionAccess().getLeftParenthesisKeyword_0_1_0());
    }

	otherlv_2=KEYWORD_2
    {
    	newLeafNode(otherlv_2, grammarAccess.getTemporalFunctionExpressionAccess().getRightParenthesisKeyword_0_1_1());
    }
)?)
    |((
(
		lv_name_3_0=
	KEYWORD_81
    {
        newLeafNode(lv_name_3_0, grammarAccess.getTemporalFunctionExpressionAccess().getNameCURRENT_TIMEKeyword_1_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTemporalFunctionExpressionRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_3_0, "CURRENT_TIME");
	    }

)
)(
	otherlv_4=KEYWORD_1
    {
    	newLeafNode(otherlv_4, grammarAccess.getTemporalFunctionExpressionAccess().getLeftParenthesisKeyword_1_1_0());
    }

	otherlv_5=KEYWORD_2
    {
    	newLeafNode(otherlv_5, grammarAccess.getTemporalFunctionExpressionAccess().getRightParenthesisKeyword_1_1_1());
    }
)?)
    |((
(
		lv_name_6_0=
	KEYWORD_82
    {
        newLeafNode(lv_name_6_0, grammarAccess.getTemporalFunctionExpressionAccess().getNameCURRENT_TIMESTAMPKeyword_2_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTemporalFunctionExpressionRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_6_0, "CURRENT_TIMESTAMP");
	    }

)
)(
	otherlv_7=KEYWORD_1
    {
    	newLeafNode(otherlv_7, grammarAccess.getTemporalFunctionExpressionAccess().getLeftParenthesisKeyword_2_1_0());
    }

	otherlv_8=KEYWORD_2
    {
    	newLeafNode(otherlv_8, grammarAccess.getTemporalFunctionExpressionAccess().getRightParenthesisKeyword_2_1_1());
    }
)?)
    |((
(
		lv_name_9_0=
	KEYWORD_50
    {
        newLeafNode(lv_name_9_0, grammarAccess.getTemporalFunctionExpressionAccess().getNameYEARKeyword_3_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTemporalFunctionExpressionRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_9_0, "YEAR");
	    }

)
)
	otherlv_10=KEYWORD_1
    {
    	newLeafNode(otherlv_10, grammarAccess.getTemporalFunctionExpressionAccess().getLeftParenthesisKeyword_3_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTemporalFunctionExpressionAccess().getFieldVariableParserRuleCall_3_2_0()); 
	    }
		lv_field_11_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTemporalFunctionExpressionRule());
	        }
       		set(
       			$current, 
       			"field",
        		lv_field_11_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_12=KEYWORD_2
    {
    	newLeafNode(otherlv_12, grammarAccess.getTemporalFunctionExpressionAccess().getRightParenthesisKeyword_3_3());
    }
)
    |((
(
		lv_name_13_0=
	KEYWORD_59
    {
        newLeafNode(lv_name_13_0, grammarAccess.getTemporalFunctionExpressionAccess().getNameMONTHKeyword_4_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTemporalFunctionExpressionRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_13_0, "MONTH");
	    }

)
)
	otherlv_14=KEYWORD_1
    {
    	newLeafNode(otherlv_14, grammarAccess.getTemporalFunctionExpressionAccess().getLeftParenthesisKeyword_4_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTemporalFunctionExpressionAccess().getFieldVariableParserRuleCall_4_2_0()); 
	    }
		lv_field_15_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTemporalFunctionExpressionRule());
	        }
       		set(
       			$current, 
       			"field",
        		lv_field_15_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_16=KEYWORD_2
    {
    	newLeafNode(otherlv_16, grammarAccess.getTemporalFunctionExpressionAccess().getRightParenthesisKeyword_4_3());
    }
)
    |((
(
		lv_name_17_0=
	KEYWORD_29
    {
        newLeafNode(lv_name_17_0, grammarAccess.getTemporalFunctionExpressionAccess().getNameDAYKeyword_5_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTemporalFunctionExpressionRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_17_0, "DAY");
	    }

)
)
	otherlv_18=KEYWORD_1
    {
    	newLeafNode(otherlv_18, grammarAccess.getTemporalFunctionExpressionAccess().getLeftParenthesisKeyword_5_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTemporalFunctionExpressionAccess().getFieldVariableParserRuleCall_5_2_0()); 
	    }
		lv_field_19_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTemporalFunctionExpressionRule());
	        }
       		set(
       			$current, 
       			"field",
        		lv_field_19_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_20=KEYWORD_2
    {
    	newLeafNode(otherlv_20, grammarAccess.getTemporalFunctionExpressionAccess().getRightParenthesisKeyword_5_3());
    }
)
    |((
(
		lv_name_21_0=
	KEYWORD_40
    {
        newLeafNode(lv_name_21_0, grammarAccess.getTemporalFunctionExpressionAccess().getNameHOURKeyword_6_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTemporalFunctionExpressionRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_21_0, "HOUR");
	    }

)
)
	otherlv_22=KEYWORD_1
    {
    	newLeafNode(otherlv_22, grammarAccess.getTemporalFunctionExpressionAccess().getLeftParenthesisKeyword_6_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTemporalFunctionExpressionAccess().getFieldVariableParserRuleCall_6_2_0()); 
	    }
		lv_field_23_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTemporalFunctionExpressionRule());
	        }
       		set(
       			$current, 
       			"field",
        		lv_field_23_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_24=KEYWORD_2
    {
    	newLeafNode(otherlv_24, grammarAccess.getTemporalFunctionExpressionAccess().getRightParenthesisKeyword_6_3());
    }
)
    |((
(
		lv_name_25_0=
	KEYWORD_71
    {
        newLeafNode(lv_name_25_0, grammarAccess.getTemporalFunctionExpressionAccess().getNameMINUTEKeyword_7_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTemporalFunctionExpressionRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_25_0, "MINUTE");
	    }

)
)
	otherlv_26=KEYWORD_1
    {
    	newLeafNode(otherlv_26, grammarAccess.getTemporalFunctionExpressionAccess().getLeftParenthesisKeyword_7_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTemporalFunctionExpressionAccess().getFieldVariableParserRuleCall_7_2_0()); 
	    }
		lv_field_27_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTemporalFunctionExpressionRule());
	        }
       		set(
       			$current, 
       			"field",
        		lv_field_27_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_28=KEYWORD_2
    {
    	newLeafNode(otherlv_28, grammarAccess.getTemporalFunctionExpressionAccess().getRightParenthesisKeyword_7_3());
    }
)
    |((
(
		lv_name_29_0=
	KEYWORD_72
    {
        newLeafNode(lv_name_29_0, grammarAccess.getTemporalFunctionExpressionAccess().getNameSECONDKeyword_8_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTemporalFunctionExpressionRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_29_0, "SECOND");
	    }

)
)
	otherlv_30=KEYWORD_1
    {
    	newLeafNode(otherlv_30, grammarAccess.getTemporalFunctionExpressionAccess().getLeftParenthesisKeyword_8_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTemporalFunctionExpressionAccess().getFieldVariableParserRuleCall_8_2_0()); 
	    }
		lv_field_31_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTemporalFunctionExpressionRule());
	        }
       		set(
       			$current, 
       			"field",
        		lv_field_31_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_32=KEYWORD_2
    {
    	newLeafNode(otherlv_32, grammarAccess.getTemporalFunctionExpressionAccess().getRightParenthesisKeyword_8_3());
    }
))
;





// Entry rule entryRuleParameterName
entryRuleParameterName returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getParameterNameRule()); } 
	 iv_ruleParameterName=ruleParameterName 
	 { $current=$iv_ruleParameterName.current.getText(); }  
	 EOF 
;

// Rule ParameterName
ruleParameterName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getParameterNameAccess().getIDTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleLiteral
entryRuleLiteral returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getLiteralRule()); }
	 iv_ruleLiteral=ruleLiteral 
	 { $current=$iv_ruleLiteral.current; } 
	 EOF 
;

// Rule Literal
ruleLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getIntegerLiteralParserRuleCall_0()); 
    }
    this_IntegerLiteral_0=ruleIntegerLiteral
    {
        $current = $this_IntegerLiteral_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getFloatLiteralParserRuleCall_1()); 
    }
    this_FloatLiteral_1=ruleFloatLiteral
    {
        $current = $this_FloatLiteral_1.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_2()); 
    }
    this_StringLiteral_2=ruleStringLiteral
    {
        $current = $this_StringLiteral_2.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getNullLiteralParserRuleCall_3()); 
    }
    this_NullLiteral_3=ruleNullLiteral
    {
        $current = $this_NullLiteral_3.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getBooleanLiteralParserRuleCall_4()); 
    }
    this_BooleanLiteral_4=ruleBooleanLiteral
    {
        $current = $this_BooleanLiteral_4.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleIntegerLiteral
entryRuleIntegerLiteral returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getIntegerLiteralRule()); }
	 iv_ruleIntegerLiteral=ruleIntegerLiteral 
	 { $current=$iv_ruleIntegerLiteral.current; } 
	 EOF 
;

// Rule IntegerLiteral
ruleIntegerLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_INT
		{
			newLeafNode(lv_value_0_0, grammarAccess.getIntegerLiteralAccess().getValueINTTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIntegerLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"INT");
	    }

)
)
;





// Entry rule entryRuleFloatLiteral
entryRuleFloatLiteral returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getFloatLiteralRule()); }
	 iv_ruleFloatLiteral=ruleFloatLiteral 
	 { $current=$iv_ruleFloatLiteral.current; } 
	 EOF 
;

// Rule FloatLiteral
ruleFloatLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getFloatLiteralAccess().getValueFloatParserRuleCall_0()); 
	    }
		lv_value_0_0=ruleFloat		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFloatLiteralRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"Float");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleFloat
entryRuleFloat returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getFloatRule()); }
	 iv_ruleFloat=ruleFloat 
	 { $current=$iv_ruleFloat.current; } 
	 EOF 
;

// Rule Float
ruleFloat returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_integerValue_0_0=RULE_INT
		{
			newLeafNode(lv_integerValue_0_0, grammarAccess.getFloatAccess().getIntegerValueINTTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFloatRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"integerValue",
        		lv_integerValue_0_0, 
        		"INT");
	    }

)
)
	otherlv_1=KEYWORD_7
    {
    	newLeafNode(otherlv_1, grammarAccess.getFloatAccess().getFullStopKeyword_1());
    }
(
(
		lv_fractionValue_2_0=RULE_INT
		{
			newLeafNode(lv_fractionValue_2_0, grammarAccess.getFloatAccess().getFractionValueINTTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFloatRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"fractionValue",
        		lv_fractionValue_2_0, 
        		"INT");
	    }

)
))
;





// Entry rule entryRuleStringLiteral
entryRuleStringLiteral returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getStringLiteralRule()); }
	 iv_ruleStringLiteral=ruleStringLiteral 
	 { $current=$iv_ruleStringLiteral.current; } 
	 EOF 
;

// Rule StringLiteral
ruleStringLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_STRING
		{
			newLeafNode(lv_value_0_0, grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStringLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"STRING");
	    }

)
)
;





// Entry rule entryRuleNullLiteral
entryRuleNullLiteral returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getNullLiteralRule()); }
	 iv_ruleNullLiteral=ruleNullLiteral 
	 { $current=$iv_ruleNullLiteral.current; } 
	 EOF 
;

// Rule NullLiteral
ruleNullLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=
	KEYWORD_44
    {
        newLeafNode(lv_value_0_0, grammarAccess.getNullLiteralAccess().getValueNULLKeyword_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNullLiteralRule());
	        }
       		setWithLastConsumed($current, "value", lv_value_0_0, "NULL");
	    }

)
)
;





// Entry rule entryRuleBooleanLiteral
entryRuleBooleanLiteral returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getBooleanLiteralRule()); }
	 iv_ruleBooleanLiteral=ruleBooleanLiteral 
	 { $current=$iv_ruleBooleanLiteral.current; } 
	 EOF 
;

// Rule BooleanLiteral
ruleBooleanLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
(
		lv_value_0_1=
	KEYWORD_49
    {
        newLeafNode(lv_value_0_1, grammarAccess.getBooleanLiteralAccess().getValueTRUEKeyword_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBooleanLiteralRule());
	        }
       		setWithLastConsumed($current, "value", lv_value_0_1, null);
	    }

    |		lv_value_0_2=
	KEYWORD_53
    {
        newLeafNode(lv_value_0_2, grammarAccess.getBooleanLiteralAccess().getValueFALSEKeyword_0_1());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBooleanLiteralRule());
	        }
       		setWithLastConsumed($current, "value", lv_value_0_2, null);
	    }

)

)
)
;





// Entry rule entryRuleSubquery
entryRuleSubquery returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getSubqueryRule()); }
	 iv_ruleSubquery=ruleSubquery 
	 { $current=$iv_ruleSubquery.current; } 
	 EOF 
;

// Rule Subquery
ruleSubquery returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_1
    {
    	newLeafNode(otherlv_0, grammarAccess.getSubqueryAccess().getLeftParenthesisKeyword_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSubqueryAccess().getSelectStatementParserRuleCall_1()); 
    }
    this_SelectStatement_1=ruleSelectStatement
    {
        $current = $this_SelectStatement_1.current;
        afterParserOrEnumRuleCall();
    }

	otherlv_2=KEYWORD_2
    {
    	newLeafNode(otherlv_2, grammarAccess.getSubqueryAccess().getRightParenthesisKeyword_2());
    }
)
;





// Rule OrderByDirection
ruleOrderByDirection returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((    enumLiteral_0=KEYWORD_27
    {
        $current = grammarAccess.getOrderByDirectionAccess().getAscEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getOrderByDirectionAccess().getAscEnumLiteralDeclaration_0()); 
    }
)
    |(    enumLiteral_1=KEYWORD_38
    {
        $current = grammarAccess.getOrderByDirectionAccess().getDescEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getOrderByDirectionAccess().getDescEnumLiteralDeclaration_1()); 
    }
));



// Rule TrimSpec
ruleTrimSpec returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((    enumLiteral_0=KEYWORD_76
    {
        $current = grammarAccess.getTrimSpecAccess().getLeadingEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getTrimSpecAccess().getLeadingEnumLiteralDeclaration_0()); 
    }
)
    |(    enumLiteral_1=KEYWORD_78
    {
        $current = grammarAccess.getTrimSpecAccess().getTrailingEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getTrimSpecAccess().getTrailingEnumLiteralDeclaration_1()); 
    }
)
    |(    enumLiteral_2=KEYWORD_37
    {
        $current = grammarAccess.getTrimSpecAccess().getBothEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getTrimSpecAccess().getBothEnumLiteralDeclaration_2()); 
    }
));



// Rule UnaryOperator
ruleUnaryOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((    enumLiteral_0=KEYWORD_4
    {
        $current = grammarAccess.getUnaryOperatorAccess().getPositiveEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getUnaryOperatorAccess().getPositiveEnumLiteralDeclaration_0()); 
    }
)
    |(    enumLiteral_1=KEYWORD_6
    {
        $current = grammarAccess.getUnaryOperatorAccess().getNegativeEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getUnaryOperatorAccess().getNegativeEnumLiteralDeclaration_1()); 
    }
)
    |(    enumLiteral_2=KEYWORD_34
    {
        $current = grammarAccess.getUnaryOperatorAccess().getLogicalNotEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getUnaryOperatorAccess().getLogicalNotEnumLiteralDeclaration_2()); 
    }
));



// Rule AdditionOperator
ruleAdditionOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((    enumLiteral_0=KEYWORD_4
    {
        $current = grammarAccess.getAdditionOperatorAccess().getAddEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getAdditionOperatorAccess().getAddEnumLiteralDeclaration_0()); 
    }
)
    |(    enumLiteral_1=KEYWORD_6
    {
        $current = grammarAccess.getAdditionOperatorAccess().getSubtractEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getAdditionOperatorAccess().getSubtractEnumLiteralDeclaration_1()); 
    }
));



// Rule MultiplicationOperator
ruleMultiplicationOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((    enumLiteral_0=KEYWORD_3
    {
        $current = grammarAccess.getMultiplicationOperatorAccess().getMultiplyEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getMultiplicationOperatorAccess().getMultiplyEnumLiteralDeclaration_0()); 
    }
)
    |(    enumLiteral_1=KEYWORD_8
    {
        $current = grammarAccess.getMultiplicationOperatorAccess().getDivideEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getMultiplicationOperatorAccess().getDivideEnumLiteralDeclaration_1()); 
    }
));



// Rule ComparisonOperator
ruleComparisonOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((    enumLiteral_0=KEYWORD_10
    {
        $current = grammarAccess.getComparisonOperatorAccess().getLessThenEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getComparisonOperatorAccess().getLessThenEnumLiteralDeclaration_0()); 
    }
)
    |(    enumLiteral_1=KEYWORD_12
    {
        $current = grammarAccess.getComparisonOperatorAccess().getGreaterThenEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getComparisonOperatorAccess().getGreaterThenEnumLiteralDeclaration_1()); 
    }
)
    |(    enumLiteral_2=KEYWORD_14
    {
        $current = grammarAccess.getComparisonOperatorAccess().getLessEqualEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getComparisonOperatorAccess().getLessEqualEnumLiteralDeclaration_2()); 
    }
)
    |(    enumLiteral_3=KEYWORD_16
    {
        $current = grammarAccess.getComparisonOperatorAccess().getGreaterEqualEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getComparisonOperatorAccess().getGreaterEqualEnumLiteralDeclaration_3()); 
    }
)
    |(    enumLiteral_4=KEYWORD_11
    {
        $current = grammarAccess.getComparisonOperatorAccess().getEqualEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getComparisonOperatorAccess().getEqualEnumLiteralDeclaration_4()); 
    }
)
    |(    enumLiteral_5=KEYWORD_15
    {
        $current = grammarAccess.getComparisonOperatorAccess().getNotEqualEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getComparisonOperatorAccess().getNotEqualEnumLiteralDeclaration_5()); 
    }
));



