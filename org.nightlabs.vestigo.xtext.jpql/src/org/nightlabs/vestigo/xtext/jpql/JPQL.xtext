grammar org.nightlabs.vestigo.xtext.jpql.JPQL with org.eclipse.xtext.common.Terminals

generate jPQL "http://www.nightlabs.org/vestigo/xtext/jdoql/JPQL"

// http://www.datanucleus.org/products/accessplatform_3_1/jpa/jpql.html
// Current spec: JPA 3.0, JPQL BNF at bottom
// http://docs.oracle.com/cd/E28613_01/apirefs.1211/e24396/ejb3_langref.html

JPQLQuery:
	SelectStatement |
	UpdateStatement |
	DeleteStatement
;

SelectStatement:
	(selectClause=SelectClause)?
	fromClause=FromClause
	(whereClause=WhereClause)?
	(groupByClause=GroupByClause)?
	(orderByClause=OrderByClause)?
;

GroupByClause:
	'GROUP' 'BY' grouping+=AliasAttributeExpression (',' grouping+=AliasAttributeExpression)* (havingClause=HavingClause)?
;

HavingClause:
	'HAVING' having=OrExpression
;

OrderByClause:
	'ORDER' 'BY' ordering+=OrderBySpec (',' ordering+=OrderBySpec)*
;

OrderBySpec:
	AliasAttributeExpression direction=OrderByDirection
;

enum OrderByDirection:
	asc='ASC' |
	desc='DESC'
;

UpdateStatement:
	updateClause=UpdateClause
	setClause=SetClause
	(whereClause=WhereClause)?
;

UpdateClause:
	'UPDATE' fromEntries+=FromEntry (',' fromEntries+=FromEntry)*
;

SetClause:
	'SET' items+=UpdateItem (',' items+=UpdateItem)*
;

UpdateItem:
	alias=AliasAttributeExpression '=' value=Literal
;

DeleteStatement:
	deleteClause=DeleteClause
	(whereClause=WhereClause)?
;

DeleteClause:
	'DELETE' fromClause=FromClause
;

SelectClause:
	'SELECT' (isDistinct?='DISTINCT')? expressions+=SelectExpression (',' expressions+=SelectExpression)*
;

SelectExpression:
//	AliasAttributeExpression |
	OrExpression |
	SelectAggregateExpression |
	SelectConstructorExpression
;

SelectAggregateExpression:
	AvgAggregate |
	CountAggregate |
	MaxAggregate |
	MinAggregate |
	SumAggregate
;

AvgAggregate:
	'AVG' '(' (isDistinct?='DISTINCT')? item=AliasAttributeExpression ')'
;

CountAggregate:
	'COUNT' '(' (isDistinct?='DISTINCT')?item=AliasAttributeExpression ')'
;

MaxAggregate:
	'MAX' '(' (isDistinct?='DISTINCT')? item=AliasAttributeExpression ')'
;

MinAggregate:
	'MIN' '(' (isDistinct?='DISTINCT')? item=AliasAttributeExpression ')'
;

SumAggregate:
	'SUM' '(' (isDistinct?='DISTINCT')?item=AliasAttributeExpression ')'
;

SelectConstructorExpression:
	'NEW' name=ID '(' items+=AliasAttributeExpression (',' items+=AliasAttributeExpression)* ')'
;

FromClause:
	'FROM' fromEntries+=FromClass (',' fromEntries+=FromEntry )*
;

FromEntry:
	FromClass |
	FromCollection
;

VariableDeclaration returns VariableDeclaration:
	'AS'? name=ID
;

FromClass:
	FromClassId | 
	FromClassVar
;

QualifiedIdentifier:
	ID ('.'ID)*
;

FromClassId returns FromClass:
	type=QualifiedIdentifier
;

FromClassVar returns FromClass:
	type=QualifiedIdentifier variable=VariableDeclaration (joins+=FromJoin)*
;

FromCollection returns FromCollection:	
	'IN' '(' path=AliasAttributeExpression ')' variable=VariableDeclaration
;

FromJoin:
	Join |
	LeftJoin |
	InnerJoin
;

Join:
	'JOIN' (isFetch?='FETCH')? path=AliasAttributeExpression variable=VariableDeclaration
;

LeftJoin:
	'LEFT' (isOuter?='OUTER')? 'JOIN' (isFetch?='FETCH')? path=AliasAttributeExpression variable=VariableDeclaration
;

InnerJoin:
	'INNER' 'JOIN' (isFetch?='FETCH')? path=AliasAttributeExpression variable=VariableDeclaration
;

WhereClause:
	'WHERE' whereEntry=OrExpression
;

OrExpression returns Expression:
	AndExpression ({OrExpression.entries+=current} "OR" entries+=AndExpression)*
;

AndExpression returns Expression:
	ComparisonOperatorExpression ({AndExpression.entries+=current} "AND" entries+=ComparisonOperatorExpression)*
;

ComparisonOperatorExpression returns Expression:
	AdditionExpression ({ComparisonOperatorExpression.left=current} operator=ComparisonOperator right=AdditionExpression)*
;

AdditionExpression returns Expression:
	MultiplicationExpression ({AdditionExpression.left=current} operator=AdditionOperator right=MultiplicationExpression)*
;

MultiplicationExpression returns Expression:
	UnaryExpression ({MultiplicationExpression.left=current} operator=MultiplicationOperator right=UnaryExpression)*
;

UnaryExpression returns Expression:
	(unaryOperator=UnaryOperator)? right=ConcreteExpression
;

ConcreteExpression returns Expression:
	ParenthesesExpression |
//	ComparisonOperatorExpression |
	ExistsExpression |
	AllExpression |
	AnyExpression |
	SomeExpression |
	CollectionExpression |
	NullComparisonExpression |
	EmptyComparisonExpression |
	LikeExpression |
	InExpression |
	BetweenExpression |
	FunctionExpression |
//	AliasAttributeExpression |
//	Literal |
//	ParameterExpression
	Variable
;

ParenthesesExpression returns Expression:
//	'(' (ConditionalOrExpression | Subquery) ')'
	'(' ExpressionTerm ')'
;


ExistsExpression returns Expression:
//	(isNot?='NOT')? // collision with general logical NOT
	'EXISTS' right=Subquery
;

AllExpression returns Expression:
	'ALL' right=Subquery
;

AnyExpression returns Expression:
	'ANY' right=Subquery
;

SomeExpression returns Expression:
	'SOME' right=Subquery
;

CollectionExpression returns Expression:
	left=Variable (isNot?='NOT')? 'MEMBER' ('OF')? right=AliasAttributeExpression
;

NullComparisonExpression returns Expression:
	left=Variable 'IS' (isNot?='NOT')? 'NULL'
;

EmptyComparisonExpression returns Expression:
	left=Variable 'IS' (isNot?='NOT')? 'EMPTY'
;

LikeExpression returns Expression:
	left=Variable (isNot?='NOT')? 'LIKE' right=StringLiteral
;

InExpression returns Expression:
	InSeqExpression |
	InQueryExpression
;

InSeqExpression returns Expression:
	left=Variable (isNot?='NOT')? 'IN' '(' items+=Variable (',' items+=Variable)* ')'
;

InQueryExpression returns Expression:
	left=Variable (isNot?='NOT')? 'IN' query=Subquery
;

BetweenExpression returns Expression:
	left=Variable (isNot?='NOT')? 'BETWEEN' min=Literal 'AND' max=Literal
;

Variable:
	AliasAttributeExpression | 
	ParameterExpression |
	Literal
;

ExpressionTerm:
	Variable |
	Subquery
;

AliasAttributeExpression:
	alias=[VariableDeclaration|ID] ("." attributes+=ID)*
;

ParameterExpression:
	':'name=ParameterName | '?'index=INT
;

FunctionExpression returns Expression:
	ArithmeticFunctionExpression |
	CollectionFunctionExpression |
	StringFunctionExpression |
	TemporalFunctionExpression
;

StringFunctionExpression returns FunctionExpression:
	name='CONCAT' '(' fields+=ConcreteExpression (',' fields+=ConcreteExpression)* ')' |
	name='SUBSTRING' '(' field=ConcreteExpression ',' startPos=AdditionExpression (',' length=AdditionExpression)? ')' |
	name='TRIM' '(' (trimSpec=TrimSpec)? (trimChar=ConcreteExpression)? 'FROM'? field=Variable ')' |
	name='LOWER' '(' field=ConcreteExpression ')' |
	name='UPPER' '(' field=ConcreteExpression ')' |
	name='LENGTH' '(' field=ConcreteExpression ')' |
	name='LOCATE' '(' fields+=ConcreteExpression ',' fields+=ConcreteExpression (',' startPos=AdditionExpression)? ')'
;

enum TrimSpec:
	leading='LEADING' | trailing='TRAILING' | both='BOTH'
;

ArithmeticFunctionExpression returns FunctionExpression:
	name='ABS' '(' field=AdditionExpression ')' |
	name='SQRT' '(' field=AdditionExpression ')' |
	name='MOD' '(' fields+=AdditionExpression ',' fields+=AdditionExpression ')'
;

CollectionFunctionExpression returns FunctionExpression:
	name='INDEX' '(' field=Variable ')' |
	name='SIZE' '(' field=Variable ')'
;

TemporalFunctionExpression returns FunctionExpression:
	name='CURRENT_DATE' ('('')')? |
	name='CURRENT_TIME' ('('')')? |
	name='CURRENT_TIMESTAMP' ('('')')? |
	name='YEAR' '(' field=AdditionExpression ')' |
	name='MONTH' '(' field=AdditionExpression ')' |
	name='DAY' '(' field=AdditionExpression ')' |
	name='HOUR' '(' field=AdditionExpression ')' |
	name='MINUTE' '(' field=AdditionExpression ')' |
	name='SECOND' '(' field=AdditionExpression ')'
;

ParameterName: ID; 

Literal:
	IntegerLiteral |
	FloatLiteral |
	StringLiteral |
	NullLiteral |
	BooleanLiteral
;

IntegerLiteral:
	value=INT
;

FloatLiteral:
	value=Float
;

Float:
	integerValue=INT '.' fractionValue=INT
;

StringLiteral: 
	value=STRING
; 

NullLiteral:
	value='NULL'
;

BooleanLiteral: 
	value=('TRUE' | 'FALSE')
;

Subquery returns SelectStatement:
	'(' SelectStatement ')'
;

enum UnaryOperator: 
	positive='+' |
	negative='-' |
	logicalNot='NOT'
;

enum AdditionOperator:
	add='+' |
	subtract='-'
;

enum MultiplicationOperator:
	multiply='*' |
	divide='/'
;

enum ComparisonOperator:
	lessThen="<" | 
	greaterThen=">" | 
	lessEqual="<=" | 
	greaterEqual=">=" | 
	equal="=" | 
	notEqual="<>"
;
