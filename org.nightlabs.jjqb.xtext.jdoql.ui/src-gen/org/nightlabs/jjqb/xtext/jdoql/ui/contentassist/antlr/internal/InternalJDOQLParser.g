/*
* generated by Xtext
*/
parser grammar InternalJDOQLParser;

options {
	tokenVocab=InternalJDOQLLexer;
	superClass=AbstractInternalContentAssistParser;
	
}

@header {
package org.nightlabs.jjqb.xtext.jdoql.ui.contentassist.antlr.internal; 

import java.util.Map;
import java.util.HashMap;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.nightlabs.jjqb.xtext.jdoql.services.JDOQLGrammarAccess;

}

@members {
 
 	private JDOQLGrammarAccess grammarAccess;
 	
 	private final Map<String, String> tokenNameToValue = new HashMap<String, String>();
 	
 	{
		tokenNameToValue.put("KEYWORD_1", "'!'");
		tokenNameToValue.put("KEYWORD_2", "'\%'");
		tokenNameToValue.put("KEYWORD_3", "'&'");
		tokenNameToValue.put("KEYWORD_4", "'('");
		tokenNameToValue.put("KEYWORD_5", "')'");
		tokenNameToValue.put("KEYWORD_6", "'*'");
		tokenNameToValue.put("KEYWORD_7", "'+'");
		tokenNameToValue.put("KEYWORD_8", "','");
		tokenNameToValue.put("KEYWORD_9", "'-'");
		tokenNameToValue.put("KEYWORD_10", "'.'");
		tokenNameToValue.put("KEYWORD_11", "'/'");
		tokenNameToValue.put("KEYWORD_12", "'<'");
		tokenNameToValue.put("KEYWORD_13", "'>'");
		tokenNameToValue.put("KEYWORD_14", "'|'");
		tokenNameToValue.put("KEYWORD_15", "'~'");
		tokenNameToValue.put("KEYWORD_16", "'!='");
		tokenNameToValue.put("KEYWORD_17", "'&&'");
		tokenNameToValue.put("KEYWORD_18", "'<='");
		tokenNameToValue.put("KEYWORD_19", "'=='");
		tokenNameToValue.put("KEYWORD_20", "'>='");
		tokenNameToValue.put("KEYWORD_21", "'as'");
		tokenNameToValue.put("KEYWORD_22", "'||'");
		tokenNameToValue.put("KEYWORD_23", "'int'");
		tokenNameToValue.put("KEYWORD_24", "'byte'");
		tokenNameToValue.put("KEYWORD_25", "'char'");
		tokenNameToValue.put("KEYWORD_26", "'from'");
		tokenNameToValue.put("KEYWORD_27", "'into'");
		tokenNameToValue.put("KEYWORD_28", "'long'");
		tokenNameToValue.put("KEYWORD_29", "'null'");
		tokenNameToValue.put("KEYWORD_30", "'this'");
		tokenNameToValue.put("KEYWORD_31", "'true'");
		tokenNameToValue.put("KEYWORD_32", "'false'");
		tokenNameToValue.put("KEYWORD_33", "'float'");
		tokenNameToValue.put("KEYWORD_34", "'short'");
		tokenNameToValue.put("KEYWORD_35", "'where'");
		tokenNameToValue.put("KEYWORD_36", "'double'");
		tokenNameToValue.put("KEYWORD_37", "'select'");
		tokenNameToValue.put("KEYWORD_38", "'unique'");
		tokenNameToValue.put("KEYWORD_39", "'boolean'");
		tokenNameToValue.put("KEYWORD_40", "'distinct'");
		tokenNameToValue.put("KEYWORD_41", "'instanceof'");
		tokenNameToValue.put("KEYWORD_42", "'exclude subclasses'");
 	}
 	
    public void setGrammarAccess(JDOQLGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }

	@Override
    protected String getValueForTokenName(String tokenName) {
    	String result = tokenNameToValue.get(tokenName);
    	if (result == null)
    		result = tokenName;
    	return result;
    }
}




// Entry rule entryRuleSingleStringJDOQL
entryRuleSingleStringJDOQL 
:
{ before(grammarAccess.getSingleStringJDOQLRule()); }
	 ruleSingleStringJDOQL
{ after(grammarAccess.getSingleStringJDOQLRule()); } 
	 EOF 
;

// Rule SingleStringJDOQL
ruleSingleStringJDOQL 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSingleStringJDOQLAccess().getGroup()); }
(rule__SingleStringJDOQL__Group__0)
{ after(grammarAccess.getSingleStringJDOQLAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSelect
entryRuleSelect 
:
{ before(grammarAccess.getSelectRule()); }
	 ruleSelect
{ after(grammarAccess.getSelectRule()); } 
	 EOF 
;

// Rule Select
ruleSelect 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSelectAccess().getGroup()); }
(rule__Select__Group__0)
{ after(grammarAccess.getSelectAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleResultClause
entryRuleResultClause 
:
{ before(grammarAccess.getResultClauseRule()); }
	 ruleResultClause
{ after(grammarAccess.getResultClauseRule()); } 
	 EOF 
;

// Rule ResultClause
ruleResultClause 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getResultClauseAccess().getGroup()); }
(rule__ResultClause__Group__0)
{ after(grammarAccess.getResultClauseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIntoClause
entryRuleIntoClause 
:
{ before(grammarAccess.getIntoClauseRule()); }
	 ruleIntoClause
{ after(grammarAccess.getIntoClauseRule()); } 
	 EOF 
;

// Rule IntoClause
ruleIntoClause 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getIntoClauseAccess().getGroup()); }
(rule__IntoClause__Group__0)
{ after(grammarAccess.getIntoClauseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFrom
entryRuleFrom 
:
{ before(grammarAccess.getFromRule()); }
	 ruleFrom
{ after(grammarAccess.getFromRule()); } 
	 EOF 
;

// Rule From
ruleFrom 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getFromAccess().getGroup()); }
(rule__From__Group__0)
{ after(grammarAccess.getFromAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleWhere
entryRuleWhere 
:
{ before(grammarAccess.getWhereRule()); }
	 ruleWhere
{ after(grammarAccess.getWhereRule()); } 
	 EOF 
;

// Rule Where
ruleWhere 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getWhereAccess().getGroup()); }
(rule__Where__Group__0)
{ after(grammarAccess.getWhereAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExcludeClause
entryRuleExcludeClause 
:
{ before(grammarAccess.getExcludeClauseRule()); }
	 ruleExcludeClause
{ after(grammarAccess.getExcludeClauseRule()); } 
	 EOF 
;

// Rule ExcludeClause
ruleExcludeClause 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getExcludeClauseAccess().getExcludeSubclassesAssignment()); }
(rule__ExcludeClause__ExcludeSubclassesAssignment)
{ after(grammarAccess.getExcludeClauseAccess().getExcludeSubclassesAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQualifiedIdentifier
entryRuleQualifiedIdentifier 
:
{ before(grammarAccess.getQualifiedIdentifierRule()); }
	 ruleQualifiedIdentifier
{ after(grammarAccess.getQualifiedIdentifierRule()); } 
	 EOF 
;

// Rule QualifiedIdentifier
ruleQualifiedIdentifier 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getQualifiedIdentifierAccess().getGroup()); }
(rule__QualifiedIdentifier__Group__0)
{ after(grammarAccess.getQualifiedIdentifierAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCandidateClassName
entryRuleCandidateClassName 
:
{ before(grammarAccess.getCandidateClassNameRule()); }
	 ruleCandidateClassName
{ after(grammarAccess.getCandidateClassNameRule()); } 
	 EOF 
;

// Rule CandidateClassName
ruleCandidateClassName 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getCandidateClassNameAccess().getQualifiedIdentifierParserRuleCall()); }
	ruleQualifiedIdentifier
{ after(grammarAccess.getCandidateClassNameAccess().getQualifiedIdentifierParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleClassOrInterfaceName
entryRuleClassOrInterfaceName 
:
{ before(grammarAccess.getClassOrInterfaceNameRule()); }
	 ruleClassOrInterfaceName
{ after(grammarAccess.getClassOrInterfaceNameRule()); } 
	 EOF 
;

// Rule ClassOrInterfaceName
ruleClassOrInterfaceName 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getClassOrInterfaceNameAccess().getQualifiedIdentifierParserRuleCall()); }
	ruleQualifiedIdentifier
{ after(grammarAccess.getClassOrInterfaceNameAccess().getQualifiedIdentifierParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleResultSpecs
entryRuleResultSpecs 
:
{ before(grammarAccess.getResultSpecsRule()); }
	 ruleResultSpecs
{ after(grammarAccess.getResultSpecsRule()); } 
	 EOF 
;

// Rule ResultSpecs
ruleResultSpecs 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getResultSpecsAccess().getGroup()); }
(rule__ResultSpecs__Group__0)
{ after(grammarAccess.getResultSpecsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleResultSpec
entryRuleResultSpec 
:
{ before(grammarAccess.getResultSpecRule()); }
	 ruleResultSpec
{ after(grammarAccess.getResultSpecRule()); } 
	 EOF 
;

// Rule ResultSpec
ruleResultSpec 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getResultSpecAccess().getGroup()); }
(rule__ResultSpec__Group__0)
{ after(grammarAccess.getResultSpecAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleResultNaming
entryRuleResultNaming 
:
{ before(grammarAccess.getResultNamingRule()); }
	 ruleResultNaming
{ after(grammarAccess.getResultNamingRule()); } 
	 EOF 
;

// Rule ResultNaming
ruleResultNaming 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getResultNamingAccess().getGroup()); }
(rule__ResultNaming__Group__0)
{ after(grammarAccess.getResultNamingAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBooleanExpression
entryRuleBooleanExpression 
:
{ before(grammarAccess.getBooleanExpressionRule()); }
	 ruleBooleanExpression
{ after(grammarAccess.getBooleanExpressionRule()); } 
	 EOF 
;

// Rule BooleanExpression
ruleBooleanExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getBooleanExpressionAccess().getGroup()); }
(rule__BooleanExpression__Group__0)
{ after(grammarAccess.getBooleanExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBooleanOp
entryRuleBooleanOp 
:
{ before(grammarAccess.getBooleanOpRule()); }
	 ruleBooleanOp
{ after(grammarAccess.getBooleanOpRule()); } 
	 EOF 
;

// Rule BooleanOp
ruleBooleanOp 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getBooleanOpAccess().getAlternatives()); }
(rule__BooleanOp__Alternatives)
{ after(grammarAccess.getBooleanOpAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpression
entryRuleExpression 
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getExpressionAccess().getGroup()); }
(rule__Expression__Group__0)
{ after(grammarAccess.getExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInfixOp
entryRuleInfixOp 
:
{ before(grammarAccess.getInfixOpRule()); }
	 ruleInfixOp
{ after(grammarAccess.getInfixOpRule()); } 
	 EOF 
;

// Rule InfixOp
ruleInfixOp 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getInfixOpAccess().getAlternatives()); }
(rule__InfixOp__Alternatives)
{ after(grammarAccess.getInfixOpAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnaryExpression
entryRuleUnaryExpression 
:
{ before(grammarAccess.getUnaryExpressionRule()); }
	 ruleUnaryExpression
{ after(grammarAccess.getUnaryExpressionRule()); } 
	 EOF 
;

// Rule UnaryExpression
ruleUnaryExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getUnaryExpressionAccess().getAlternatives()); }
(rule__UnaryExpression__Alternatives)
{ after(grammarAccess.getUnaryExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCast
entryRuleCast 
:
{ before(grammarAccess.getCastRule()); }
	 ruleCast
{ after(grammarAccess.getCastRule()); } 
	 EOF 
;

// Rule Cast
ruleCast 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getCastAccess().getGroup()); }
(rule__Cast__Group__0)
{ after(grammarAccess.getCastAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrefixOp
entryRulePrefixOp 
:
{ before(grammarAccess.getPrefixOpRule()); }
	 rulePrefixOp
{ after(grammarAccess.getPrefixOpRule()); } 
	 EOF 
;

// Rule PrefixOp
rulePrefixOp 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getPrefixOpAccess().getAlternatives()); }
(rule__PrefixOp__Alternatives)
{ after(grammarAccess.getPrefixOpAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrimary
entryRulePrimary 
:
{ before(grammarAccess.getPrimaryRule()); }
	 rulePrimary
{ after(grammarAccess.getPrimaryRule()); } 
	 EOF 
;

// Rule Primary
rulePrimary 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getPrimaryAccess().getAlternatives()); }
(rule__Primary__Alternatives)
{ after(grammarAccess.getPrimaryAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleType
entryRuleType 
:
{ before(grammarAccess.getTypeRule()); }
	 ruleType
{ after(grammarAccess.getTypeRule()); } 
	 EOF 
;

// Rule Type
ruleType 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getTypeAccess().getAlternatives()); }
(rule__Type__Alternatives)
{ after(grammarAccess.getTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrimitiveType
entryRulePrimitiveType 
:
{ before(grammarAccess.getPrimitiveTypeRule()); }
	 rulePrimitiveType
{ after(grammarAccess.getPrimitiveTypeRule()); } 
	 EOF 
;

// Rule PrimitiveType
rulePrimitiveType 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getPrimitiveTypeAccess().getAlternatives()); }
(rule__PrimitiveType__Alternatives)
{ after(grammarAccess.getPrimitiveTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNumericType
entryRuleNumericType 
:
{ before(grammarAccess.getNumericTypeRule()); }
	 ruleNumericType
{ after(grammarAccess.getNumericTypeRule()); } 
	 EOF 
;

// Rule NumericType
ruleNumericType 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getNumericTypeAccess().getAlternatives()); }
(rule__NumericType__Alternatives)
{ after(grammarAccess.getNumericTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIntegralType
entryRuleIntegralType 
:
{ before(grammarAccess.getIntegralTypeRule()); }
	 ruleIntegralType
{ after(grammarAccess.getIntegralTypeRule()); } 
	 EOF 
;

// Rule IntegralType
ruleIntegralType 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getIntegralTypeAccess().getAlternatives()); }
(rule__IntegralType__Alternatives)
{ after(grammarAccess.getIntegralTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFloatingPointType
entryRuleFloatingPointType 
:
{ before(grammarAccess.getFloatingPointTypeRule()); }
	 ruleFloatingPointType
{ after(grammarAccess.getFloatingPointTypeRule()); } 
	 EOF 
;

// Rule FloatingPointType
ruleFloatingPointType 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getFloatingPointTypeAccess().getAlternatives()); }
(rule__FloatingPointType__Alternatives)
{ after(grammarAccess.getFloatingPointTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIntegerLiteral
entryRuleIntegerLiteral 
:
{ before(grammarAccess.getIntegerLiteralRule()); }
	 ruleIntegerLiteral
{ after(grammarAccess.getIntegerLiteralRule()); } 
	 EOF 
;

// Rule IntegerLiteral
ruleIntegerLiteral 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getIntegerLiteralAccess().getINTTerminalRuleCall()); }
	RULE_INT
{ after(grammarAccess.getIntegerLiteralAccess().getINTTerminalRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}







// Entry rule entryRuleStringLiteral
entryRuleStringLiteral 
:
{ before(grammarAccess.getStringLiteralRule()); }
	 ruleStringLiteral
{ after(grammarAccess.getStringLiteralRule()); } 
	 EOF 
;

// Rule StringLiteral
ruleStringLiteral 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getStringLiteralAccess().getSTRINGTerminalRuleCall()); }
	RULE_STRING
{ after(grammarAccess.getStringLiteralAccess().getSTRINGTerminalRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBooleanLiteral
entryRuleBooleanLiteral 
:
{ before(grammarAccess.getBooleanLiteralRule()); }
	 ruleBooleanLiteral
{ after(grammarAccess.getBooleanLiteralRule()); } 
	 EOF 
;

// Rule BooleanLiteral
ruleBooleanLiteral 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getBooleanLiteralAccess().getAlternatives()); }
(rule__BooleanLiteral__Alternatives)
{ after(grammarAccess.getBooleanLiteralAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNullLiteral
entryRuleNullLiteral 
:
{ before(grammarAccess.getNullLiteralRule()); }
	 ruleNullLiteral
{ after(grammarAccess.getNullLiteralRule()); } 
	 EOF 
;

// Rule NullLiteral
ruleNullLiteral 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getNullLiteralAccess().getNullKeyword()); }

	KEYWORD_29 

{ after(grammarAccess.getNullLiteralAccess().getNullKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLiteral
entryRuleLiteral 
:
{ before(grammarAccess.getLiteralRule()); }
	 ruleLiteral
{ after(grammarAccess.getLiteralRule()); } 
	 EOF 
;

// Rule Literal
ruleLiteral 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getLiteralAccess().getAlternatives()); }
(rule__Literal__Alternatives)
{ after(grammarAccess.getLiteralAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__BooleanOp__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanOpAccess().getGreaterThanSignKeyword_0()); }

	KEYWORD_13 

{ after(grammarAccess.getBooleanOpAccess().getGreaterThanSignKeyword_0()); }
)

    |(
{ before(grammarAccess.getBooleanOpAccess().getGreaterThanSignEqualsSignKeyword_1()); }

	KEYWORD_20 

{ after(grammarAccess.getBooleanOpAccess().getGreaterThanSignEqualsSignKeyword_1()); }
)

    |(
{ before(grammarAccess.getBooleanOpAccess().getLessThanSignKeyword_2()); }

	KEYWORD_12 

{ after(grammarAccess.getBooleanOpAccess().getLessThanSignKeyword_2()); }
)

    |(
{ before(grammarAccess.getBooleanOpAccess().getLessThanSignEqualsSignKeyword_3()); }

	KEYWORD_18 

{ after(grammarAccess.getBooleanOpAccess().getLessThanSignEqualsSignKeyword_3()); }
)

    |(
{ before(grammarAccess.getBooleanOpAccess().getInstanceofKeyword_4()); }

	KEYWORD_41 

{ after(grammarAccess.getBooleanOpAccess().getInstanceofKeyword_4()); }
)

    |(
{ before(grammarAccess.getBooleanOpAccess().getEqualsSignEqualsSignKeyword_5()); }

	KEYWORD_19 

{ after(grammarAccess.getBooleanOpAccess().getEqualsSignEqualsSignKeyword_5()); }
)

    |(
{ before(grammarAccess.getBooleanOpAccess().getExclamationMarkEqualsSignKeyword_6()); }

	KEYWORD_16 

{ after(grammarAccess.getBooleanOpAccess().getExclamationMarkEqualsSignKeyword_6()); }
)

    |(
{ before(grammarAccess.getBooleanOpAccess().getAmpersandAmpersandKeyword_7()); }

	KEYWORD_17 

{ after(grammarAccess.getBooleanOpAccess().getAmpersandAmpersandKeyword_7()); }
)

    |(
{ before(grammarAccess.getBooleanOpAccess().getVerticalLineVerticalLineKeyword_8()); }

	KEYWORD_22 

{ after(grammarAccess.getBooleanOpAccess().getVerticalLineVerticalLineKeyword_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InfixOp__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInfixOpAccess().getAsteriskKeyword_0()); }

	KEYWORD_6 

{ after(grammarAccess.getInfixOpAccess().getAsteriskKeyword_0()); }
)

    |(
{ before(grammarAccess.getInfixOpAccess().getSolidusKeyword_1()); }

	KEYWORD_11 

{ after(grammarAccess.getInfixOpAccess().getSolidusKeyword_1()); }
)

    |(
{ before(grammarAccess.getInfixOpAccess().getPercentSignKeyword_2()); }

	KEYWORD_2 

{ after(grammarAccess.getInfixOpAccess().getPercentSignKeyword_2()); }
)

    |(
{ before(grammarAccess.getInfixOpAccess().getPlusSignKeyword_3()); }

	KEYWORD_7 

{ after(grammarAccess.getInfixOpAccess().getPlusSignKeyword_3()); }
)

    |(
{ before(grammarAccess.getInfixOpAccess().getHyphenMinusKeyword_4()); }

	KEYWORD_9 

{ after(grammarAccess.getInfixOpAccess().getHyphenMinusKeyword_4()); }
)

    |(
{ before(grammarAccess.getInfixOpAccess().getAmpersandKeyword_5()); }

	KEYWORD_3 

{ after(grammarAccess.getInfixOpAccess().getAmpersandKeyword_5()); }
)

    |(
{ before(grammarAccess.getInfixOpAccess().getVerticalLineKeyword_6()); }

	KEYWORD_14 

{ after(grammarAccess.getInfixOpAccess().getVerticalLineKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getGroup_0()); }
(rule__UnaryExpression__Group_0__0)
{ after(grammarAccess.getUnaryExpressionAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getUnaryExpressionAccess().getGroup_1()); }
(rule__UnaryExpression__Group_1__0)
{ after(grammarAccess.getUnaryExpressionAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getUnaryExpressionAccess().getExpressionAssignment_2()); }
(rule__UnaryExpression__ExpressionAssignment_2)
{ after(grammarAccess.getUnaryExpressionAccess().getExpressionAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrefixOp__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrefixOpAccess().getPlusSignKeyword_0()); }

	KEYWORD_7 

{ after(grammarAccess.getPrefixOpAccess().getPlusSignKeyword_0()); }
)

    |(
{ before(grammarAccess.getPrefixOpAccess().getHyphenMinusKeyword_1()); }

	KEYWORD_9 

{ after(grammarAccess.getPrefixOpAccess().getHyphenMinusKeyword_1()); }
)

    |(
{ before(grammarAccess.getPrefixOpAccess().getTildeKeyword_2()); }

	KEYWORD_15 

{ after(grammarAccess.getPrefixOpAccess().getTildeKeyword_2()); }
)

    |(
{ before(grammarAccess.getPrefixOpAccess().getExclamationMarkKeyword_3()); }

	KEYWORD_1 

{ after(grammarAccess.getPrefixOpAccess().getExclamationMarkKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryAccess().getLiteralAssignment_0()); }
(rule__Primary__LiteralAssignment_0)
{ after(grammarAccess.getPrimaryAccess().getLiteralAssignment_0()); }
)

    |(
{ before(grammarAccess.getPrimaryAccess().getThisAssignment_1()); }
(rule__Primary__ThisAssignment_1)
{ after(grammarAccess.getPrimaryAccess().getThisAssignment_1()); }
)

    |(
{ before(grammarAccess.getPrimaryAccess().getClassOrInterfaceAssignment_2()); }
(rule__Primary__ClassOrInterfaceAssignment_2)
{ after(grammarAccess.getPrimaryAccess().getClassOrInterfaceAssignment_2()); }
)

    |(
{ before(grammarAccess.getPrimaryAccess().getGroup_3()); }
(rule__Primary__Group_3__0)
{ after(grammarAccess.getPrimaryAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getPrimitiveTypeParserRuleCall_0()); }
	rulePrimitiveType
{ after(grammarAccess.getTypeAccess().getPrimitiveTypeParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getClassOrInterfaceNameParserRuleCall_1()); }
	ruleClassOrInterfaceName
{ after(grammarAccess.getTypeAccess().getClassOrInterfaceNameParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimitiveType__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimitiveTypeAccess().getNumericTypeParserRuleCall_0()); }
	ruleNumericType
{ after(grammarAccess.getPrimitiveTypeAccess().getNumericTypeParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getPrimitiveTypeAccess().getBooleanKeyword_1()); }

	KEYWORD_39 

{ after(grammarAccess.getPrimitiveTypeAccess().getBooleanKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumericType__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericTypeAccess().getIntegralTypeParserRuleCall_0()); }
	ruleIntegralType
{ after(grammarAccess.getNumericTypeAccess().getIntegralTypeParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getNumericTypeAccess().getFloatingPointTypeParserRuleCall_1()); }
	ruleFloatingPointType
{ after(grammarAccess.getNumericTypeAccess().getFloatingPointTypeParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntegralType__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegralTypeAccess().getByteKeyword_0()); }

	KEYWORD_24 

{ after(grammarAccess.getIntegralTypeAccess().getByteKeyword_0()); }
)

    |(
{ before(grammarAccess.getIntegralTypeAccess().getShortKeyword_1()); }

	KEYWORD_34 

{ after(grammarAccess.getIntegralTypeAccess().getShortKeyword_1()); }
)

    |(
{ before(grammarAccess.getIntegralTypeAccess().getIntKeyword_2()); }

	KEYWORD_23 

{ after(grammarAccess.getIntegralTypeAccess().getIntKeyword_2()); }
)

    |(
{ before(grammarAccess.getIntegralTypeAccess().getLongKeyword_3()); }

	KEYWORD_28 

{ after(grammarAccess.getIntegralTypeAccess().getLongKeyword_3()); }
)

    |(
{ before(grammarAccess.getIntegralTypeAccess().getCharKeyword_4()); }

	KEYWORD_25 

{ after(grammarAccess.getIntegralTypeAccess().getCharKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FloatingPointType__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFloatingPointTypeAccess().getFloatKeyword_0()); }

	KEYWORD_33 

{ after(grammarAccess.getFloatingPointTypeAccess().getFloatKeyword_0()); }
)

    |(
{ before(grammarAccess.getFloatingPointTypeAccess().getDoubleKeyword_1()); }

	KEYWORD_36 

{ after(grammarAccess.getFloatingPointTypeAccess().getDoubleKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanLiteral__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanLiteralAccess().getTrueKeyword_0()); }

	KEYWORD_31 

{ after(grammarAccess.getBooleanLiteralAccess().getTrueKeyword_0()); }
)

    |(
{ before(grammarAccess.getBooleanLiteralAccess().getFalseKeyword_1()); }

	KEYWORD_32 

{ after(grammarAccess.getBooleanLiteralAccess().getFalseKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getIntegerLiteralParserRuleCall_0()); }
	ruleIntegerLiteral
{ after(grammarAccess.getLiteralAccess().getIntegerLiteralParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getBooleanLiteralParserRuleCall_1()); }
	ruleBooleanLiteral
{ after(grammarAccess.getLiteralAccess().getBooleanLiteralParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_2()); }
	ruleStringLiteral
{ after(grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getNullLiteralParserRuleCall_3()); }
	ruleNullLiteral
{ after(grammarAccess.getLiteralAccess().getNullLiteralParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__SingleStringJDOQL__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SingleStringJDOQL__Group__0__Impl
	rule__SingleStringJDOQL__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SingleStringJDOQL__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSingleStringJDOQLAccess().getSelectAssignment_0()); }
(rule__SingleStringJDOQL__SelectAssignment_0)
{ after(grammarAccess.getSingleStringJDOQLAccess().getSelectAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SingleStringJDOQL__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SingleStringJDOQL__Group__1__Impl
	rule__SingleStringJDOQL__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SingleStringJDOQL__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSingleStringJDOQLAccess().getFromAssignment_1()); }
(rule__SingleStringJDOQL__FromAssignment_1)
{ after(grammarAccess.getSingleStringJDOQLAccess().getFromAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SingleStringJDOQL__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SingleStringJDOQL__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SingleStringJDOQL__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSingleStringJDOQLAccess().getWhereAssignment_2()); }
(rule__SingleStringJDOQL__WhereAssignment_2)?
{ after(grammarAccess.getSingleStringJDOQLAccess().getWhereAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Select__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Select__Group__0__Impl
	rule__Select__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectAccess().getSelectKeyword_0()); }

	KEYWORD_37 

{ after(grammarAccess.getSelectAccess().getSelectKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Select__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Select__Group__1__Impl
	rule__Select__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectAccess().getUniqueKeyword_1()); }
(
	KEYWORD_38 
)?
{ after(grammarAccess.getSelectAccess().getUniqueKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Select__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Select__Group__2__Impl
	rule__Select__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectAccess().getResultClauseAssignment_2()); }
(rule__Select__ResultClauseAssignment_2)?
{ after(grammarAccess.getSelectAccess().getResultClauseAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Select__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Select__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectAccess().getIntoClauseAssignment_3()); }
(rule__Select__IntoClauseAssignment_3)?
{ after(grammarAccess.getSelectAccess().getIntoClauseAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ResultClause__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ResultClause__Group__0__Impl
	rule__ResultClause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ResultClause__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getResultClauseAccess().getDistinctKeyword_0()); }
(
	KEYWORD_40 
)?
{ after(grammarAccess.getResultClauseAccess().getDistinctKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ResultClause__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ResultClause__Group__1__Impl
	rule__ResultClause__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ResultClause__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getResultClauseAccess().getResultSpecsAssignment_1()); }
(rule__ResultClause__ResultSpecsAssignment_1)
{ after(grammarAccess.getResultClauseAccess().getResultSpecsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ResultClause__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ResultClause__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ResultClause__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getResultClauseAccess().getCommaKeyword_2()); }
(
	KEYWORD_8 
)?
{ after(grammarAccess.getResultClauseAccess().getCommaKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__IntoClause__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntoClause__Group__0__Impl
	rule__IntoClause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IntoClause__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntoClauseAccess().getIntoKeyword_0()); }

	KEYWORD_27 

{ after(grammarAccess.getIntoClauseAccess().getIntoKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IntoClause__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntoClause__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IntoClause__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntoClauseAccess().getResultClassNameAssignment_1()); }
(rule__IntoClause__ResultClassNameAssignment_1)
{ after(grammarAccess.getIntoClauseAccess().getResultClassNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__From__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__From__Group__0__Impl
	rule__From__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__From__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromAccess().getFromKeyword_0()); }

	KEYWORD_26 

{ after(grammarAccess.getFromAccess().getFromKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__From__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__From__Group__1__Impl
	rule__From__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__From__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromAccess().getCandidateClassNameAssignment_1()); }
(rule__From__CandidateClassNameAssignment_1)
{ after(grammarAccess.getFromAccess().getCandidateClassNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__From__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__From__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__From__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromAccess().getExcludeClauseAssignment_2()); }
(rule__From__ExcludeClauseAssignment_2)?
{ after(grammarAccess.getFromAccess().getExcludeClauseAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Where__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Where__Group__0__Impl
	rule__Where__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Where__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhereAccess().getWhereKeyword_0()); }

	KEYWORD_35 

{ after(grammarAccess.getWhereAccess().getWhereKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Where__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Where__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Where__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhereAccess().getEAssignment_1()); }
(rule__Where__EAssignment_1)
{ after(grammarAccess.getWhereAccess().getEAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedIdentifier__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedIdentifier__Group__0__Impl
	rule__QualifiedIdentifier__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedIdentifier__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedIdentifierAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getQualifiedIdentifierAccess().getIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedIdentifier__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedIdentifier__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedIdentifier__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedIdentifierAccess().getGroup_1()); }
(rule__QualifiedIdentifier__Group_1__0)*
{ after(grammarAccess.getQualifiedIdentifierAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedIdentifier__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedIdentifier__Group_1__0__Impl
	rule__QualifiedIdentifier__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedIdentifier__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedIdentifierAccess().getFullStopKeyword_1_0()); }

	KEYWORD_10 

{ after(grammarAccess.getQualifiedIdentifierAccess().getFullStopKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedIdentifier__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedIdentifier__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedIdentifier__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedIdentifierAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
{ after(grammarAccess.getQualifiedIdentifierAccess().getIDTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ResultSpecs__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ResultSpecs__Group__0__Impl
	rule__ResultSpecs__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ResultSpecs__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getResultSpecsAccess().getResultSpecParserRuleCall_0()); }
	ruleResultSpec
{ after(grammarAccess.getResultSpecsAccess().getResultSpecParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ResultSpecs__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ResultSpecs__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ResultSpecs__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getResultSpecsAccess().getCommaKeyword_1()); }
(
	KEYWORD_8 
)?
{ after(grammarAccess.getResultSpecsAccess().getCommaKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ResultSpec__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ResultSpec__Group__0__Impl
	rule__ResultSpec__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ResultSpec__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getResultSpecAccess().getExpressionParserRuleCall_0()); }
	ruleExpression
{ after(grammarAccess.getResultSpecAccess().getExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ResultSpec__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ResultSpec__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ResultSpec__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getResultSpecAccess().getResultNamingAssignment_1()); }
(rule__ResultSpec__ResultNamingAssignment_1)?
{ after(grammarAccess.getResultSpecAccess().getResultNamingAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ResultNaming__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ResultNaming__Group__0__Impl
	rule__ResultNaming__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ResultNaming__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getResultNamingAccess().getAsKeyword_0()); }

	KEYWORD_21 

{ after(grammarAccess.getResultNamingAccess().getAsKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ResultNaming__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ResultNaming__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ResultNaming__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getResultNamingAccess().getIdentifierAssignment_1()); }
(rule__ResultNaming__IdentifierAssignment_1)
{ after(grammarAccess.getResultNamingAccess().getIdentifierAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BooleanExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BooleanExpression__Group__0__Impl
	rule__BooleanExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanExpressionAccess().getLeftAssignment_0()); }
(rule__BooleanExpression__LeftAssignment_0)
{ after(grammarAccess.getBooleanExpressionAccess().getLeftAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BooleanExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BooleanExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanExpressionAccess().getGroup_1()); }
(rule__BooleanExpression__Group_1__0)
{ after(grammarAccess.getBooleanExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BooleanExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BooleanExpression__Group_1__0__Impl
	rule__BooleanExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanExpressionAccess().getOpAssignment_1_0()); }
(rule__BooleanExpression__OpAssignment_1_0)
{ after(grammarAccess.getBooleanExpressionAccess().getOpAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BooleanExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BooleanExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanExpressionAccess().getRightAssignment_1_1()); }
(rule__BooleanExpression__RightAssignment_1_1)
{ after(grammarAccess.getBooleanExpressionAccess().getRightAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Expression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group__0__Impl
	rule__Expression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getLeftAssignment_0()); }
(rule__Expression__LeftAssignment_0)
{ after(grammarAccess.getExpressionAccess().getLeftAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getGroup_1()); }
(rule__Expression__Group_1__0)?
{ after(grammarAccess.getExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Expression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group_1__0__Impl
	rule__Expression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getOpAssignment_1_0()); }
(rule__Expression__OpAssignment_1_0)
{ after(grammarAccess.getExpressionAccess().getOpAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getRightAssignment_1_1()); }
(rule__Expression__RightAssignment_1_1)
{ after(grammarAccess.getExpressionAccess().getRightAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UnaryExpression__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryExpression__Group_0__0__Impl
	rule__UnaryExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getModifierAssignment_0_0()); }
(rule__UnaryExpression__ModifierAssignment_0_0)
{ after(grammarAccess.getUnaryExpressionAccess().getModifierAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryExpression__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryExpression__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getExpressionAssignment_0_1()); }
(rule__UnaryExpression__ExpressionAssignment_0_1)
{ after(grammarAccess.getUnaryExpressionAccess().getExpressionAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UnaryExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryExpression__Group_1__0__Impl
	rule__UnaryExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getCastAssignment_1_0()); }
(rule__UnaryExpression__CastAssignment_1_0)
{ after(grammarAccess.getUnaryExpressionAccess().getCastAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getExpressionAssignment_1_1()); }
(rule__UnaryExpression__ExpressionAssignment_1_1)
{ after(grammarAccess.getUnaryExpressionAccess().getExpressionAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Cast__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Cast__Group__0__Impl
	rule__Cast__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Cast__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCastAccess().getLeftParenthesisKeyword_0()); }

	KEYWORD_4 

{ after(grammarAccess.getCastAccess().getLeftParenthesisKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Cast__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Cast__Group__1__Impl
	rule__Cast__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Cast__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCastAccess().getTypeParserRuleCall_1()); }
	ruleType
{ after(grammarAccess.getCastAccess().getTypeParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Cast__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Cast__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Cast__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCastAccess().getRightParenthesisKeyword_2()); }

	KEYWORD_5 

{ after(grammarAccess.getCastAccess().getRightParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Primary__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Primary__Group_3__0__Impl
	rule__Primary__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_3_0()); }

	KEYWORD_4 

{ after(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Primary__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Primary__Group_3__1__Impl
	rule__Primary__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryAccess().getExpressionAssignment_3_1()); }
(rule__Primary__ExpressionAssignment_3_1)
{ after(grammarAccess.getPrimaryAccess().getExpressionAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Primary__Group_3__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Primary__Group_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_3__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_3_2()); }

	KEYWORD_5 

{ after(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_3_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__SingleStringJDOQL__SelectAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSingleStringJDOQLAccess().getSelectSelectParserRuleCall_0_0()); }
	ruleSelect{ after(grammarAccess.getSingleStringJDOQLAccess().getSelectSelectParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SingleStringJDOQL__FromAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSingleStringJDOQLAccess().getFromFromParserRuleCall_1_0()); }
	ruleFrom{ after(grammarAccess.getSingleStringJDOQLAccess().getFromFromParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SingleStringJDOQL__WhereAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSingleStringJDOQLAccess().getWhereWhereParserRuleCall_2_0()); }
	ruleWhere{ after(grammarAccess.getSingleStringJDOQLAccess().getWhereWhereParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Select__ResultClauseAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectAccess().getResultClauseResultClauseParserRuleCall_2_0()); }
	ruleResultClause{ after(grammarAccess.getSelectAccess().getResultClauseResultClauseParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Select__IntoClauseAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectAccess().getIntoClauseIntoClauseParserRuleCall_3_0()); }
	ruleIntoClause{ after(grammarAccess.getSelectAccess().getIntoClauseIntoClauseParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ResultClause__ResultSpecsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getResultClauseAccess().getResultSpecsResultSpecsParserRuleCall_1_0()); }
	ruleResultSpecs{ after(grammarAccess.getResultClauseAccess().getResultSpecsResultSpecsParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntoClause__ResultClassNameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntoClauseAccess().getResultClassNameClassOrInterfaceNameParserRuleCall_1_0()); }
	ruleClassOrInterfaceName{ after(grammarAccess.getIntoClauseAccess().getResultClassNameClassOrInterfaceNameParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__From__CandidateClassNameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromAccess().getCandidateClassNameCandidateClassNameParserRuleCall_1_0()); }
	ruleCandidateClassName{ after(grammarAccess.getFromAccess().getCandidateClassNameCandidateClassNameParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__From__ExcludeClauseAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromAccess().getExcludeClauseExcludeClauseParserRuleCall_2_0()); }
	ruleExcludeClause{ after(grammarAccess.getFromAccess().getExcludeClauseExcludeClauseParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Where__EAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhereAccess().getEBooleanExpressionParserRuleCall_1_0()); }
	ruleBooleanExpression{ after(grammarAccess.getWhereAccess().getEBooleanExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExcludeClause__ExcludeSubclassesAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExcludeClauseAccess().getExcludeSubclassesExcludeSubclassesKeyword_0()); }
(
{ before(grammarAccess.getExcludeClauseAccess().getExcludeSubclassesExcludeSubclassesKeyword_0()); }

	KEYWORD_42 

{ after(grammarAccess.getExcludeClauseAccess().getExcludeSubclassesExcludeSubclassesKeyword_0()); }
)

{ after(grammarAccess.getExcludeClauseAccess().getExcludeSubclassesExcludeSubclassesKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ResultSpec__ResultNamingAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getResultSpecAccess().getResultNamingResultNamingParserRuleCall_1_0()); }
	ruleResultNaming{ after(grammarAccess.getResultSpecAccess().getResultNamingResultNamingParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ResultNaming__IdentifierAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getResultNamingAccess().getIdentifierIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getResultNamingAccess().getIdentifierIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanExpression__LeftAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanExpressionAccess().getLeftExpressionParserRuleCall_0_0()); }
	ruleExpression{ after(grammarAccess.getBooleanExpressionAccess().getLeftExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanExpression__OpAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanExpressionAccess().getOpBooleanOpParserRuleCall_1_0_0()); }
	ruleBooleanOp{ after(grammarAccess.getBooleanExpressionAccess().getOpBooleanOpParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanExpression__RightAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanExpressionAccess().getRightExpressionParserRuleCall_1_1_0()); }
	ruleExpression{ after(grammarAccess.getBooleanExpressionAccess().getRightExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__LeftAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getLeftUnaryExpressionParserRuleCall_0_0()); }
	ruleUnaryExpression{ after(grammarAccess.getExpressionAccess().getLeftUnaryExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__OpAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getOpInfixOpParserRuleCall_1_0_0()); }
	ruleInfixOp{ after(grammarAccess.getExpressionAccess().getOpInfixOpParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__RightAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getRightUnaryExpressionParserRuleCall_1_1_0()); }
	ruleUnaryExpression{ after(grammarAccess.getExpressionAccess().getRightUnaryExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__ModifierAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getModifierPrefixOpParserRuleCall_0_0_0()); }
	rulePrefixOp{ after(grammarAccess.getUnaryExpressionAccess().getModifierPrefixOpParserRuleCall_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__ExpressionAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getExpressionPrimaryParserRuleCall_0_1_0()); }
	rulePrimary{ after(grammarAccess.getUnaryExpressionAccess().getExpressionPrimaryParserRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__CastAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getCastCastParserRuleCall_1_0_0()); }
	ruleCast{ after(grammarAccess.getUnaryExpressionAccess().getCastCastParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__ExpressionAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getExpressionPrimaryParserRuleCall_1_1_0()); }
	rulePrimary{ after(grammarAccess.getUnaryExpressionAccess().getExpressionPrimaryParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__ExpressionAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getExpressionPrimaryParserRuleCall_2_0()); }
	rulePrimary{ after(grammarAccess.getUnaryExpressionAccess().getExpressionPrimaryParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__LiteralAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryAccess().getLiteralLiteralParserRuleCall_0_0()); }
	ruleLiteral{ after(grammarAccess.getPrimaryAccess().getLiteralLiteralParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__ThisAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryAccess().getThisThisKeyword_1_0()); }
(
{ before(grammarAccess.getPrimaryAccess().getThisThisKeyword_1_0()); }

	KEYWORD_30 

{ after(grammarAccess.getPrimaryAccess().getThisThisKeyword_1_0()); }
)

{ after(grammarAccess.getPrimaryAccess().getThisThisKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__ClassOrInterfaceAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryAccess().getClassOrInterfaceClassOrInterfaceNameParserRuleCall_2_0()); }
	ruleClassOrInterfaceName{ after(grammarAccess.getPrimaryAccess().getClassOrInterfaceClassOrInterfaceNameParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__ExpressionAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryAccess().getExpressionExpressionParserRuleCall_3_1_0()); }
	ruleExpression{ after(grammarAccess.getPrimaryAccess().getExpressionExpressionParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


