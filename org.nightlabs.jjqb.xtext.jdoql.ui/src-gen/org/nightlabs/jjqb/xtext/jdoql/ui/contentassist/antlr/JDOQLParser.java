/*
* generated by Xtext
*/
package org.nightlabs.jjqb.xtext.jdoql.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.nightlabs.jjqb.xtext.jdoql.services.JDOQLGrammarAccess;

public class JDOQLParser extends AbstractContentAssistParser {
	
	@Inject
	private JDOQLGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.nightlabs.jjqb.xtext.jdoql.ui.contentassist.antlr.internal.InternalJDOQLParser createParser() {
		org.nightlabs.jjqb.xtext.jdoql.ui.contentassist.antlr.internal.InternalJDOQLParser result = new org.nightlabs.jjqb.xtext.jdoql.ui.contentassist.antlr.internal.InternalJDOQLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getBooleanOpAccess().getAlternatives(), "rule__BooleanOp__Alternatives");
					put(grammarAccess.getInfixOpAccess().getAlternatives(), "rule__InfixOp__Alternatives");
					put(grammarAccess.getUnaryExpressionAccess().getAlternatives(), "rule__UnaryExpression__Alternatives");
					put(grammarAccess.getPrefixOpAccess().getAlternatives(), "rule__PrefixOp__Alternatives");
					put(grammarAccess.getPrimaryAccess().getAlternatives(), "rule__Primary__Alternatives");
					put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
					put(grammarAccess.getPrimitiveTypeAccess().getAlternatives(), "rule__PrimitiveType__Alternatives");
					put(grammarAccess.getNumericTypeAccess().getAlternatives(), "rule__NumericType__Alternatives");
					put(grammarAccess.getIntegralTypeAccess().getAlternatives(), "rule__IntegralType__Alternatives");
					put(grammarAccess.getFloatingPointTypeAccess().getAlternatives(), "rule__FloatingPointType__Alternatives");
					put(grammarAccess.getBooleanLiteralAccess().getAlternatives(), "rule__BooleanLiteral__Alternatives");
					put(grammarAccess.getLiteralAccess().getAlternatives(), "rule__Literal__Alternatives");
					put(grammarAccess.getSingleStringJDOQLAccess().getGroup(), "rule__SingleStringJDOQL__Group__0");
					put(grammarAccess.getSelectAccess().getGroup(), "rule__Select__Group__0");
					put(grammarAccess.getResultClauseAccess().getGroup(), "rule__ResultClause__Group__0");
					put(grammarAccess.getIntoClauseAccess().getGroup(), "rule__IntoClause__Group__0");
					put(grammarAccess.getFromAccess().getGroup(), "rule__From__Group__0");
					put(grammarAccess.getWhereAccess().getGroup(), "rule__Where__Group__0");
					put(grammarAccess.getQualifiedIdentifierAccess().getGroup(), "rule__QualifiedIdentifier__Group__0");
					put(grammarAccess.getQualifiedIdentifierAccess().getGroup_1(), "rule__QualifiedIdentifier__Group_1__0");
					put(grammarAccess.getResultSpecsAccess().getGroup(), "rule__ResultSpecs__Group__0");
					put(grammarAccess.getResultSpecAccess().getGroup(), "rule__ResultSpec__Group__0");
					put(grammarAccess.getResultNamingAccess().getGroup(), "rule__ResultNaming__Group__0");
					put(grammarAccess.getBooleanExpressionAccess().getGroup(), "rule__BooleanExpression__Group__0");
					put(grammarAccess.getBooleanExpressionAccess().getGroup_1(), "rule__BooleanExpression__Group_1__0");
					put(grammarAccess.getExpressionAccess().getGroup(), "rule__Expression__Group__0");
					put(grammarAccess.getExpressionAccess().getGroup_1(), "rule__Expression__Group_1__0");
					put(grammarAccess.getUnaryExpressionAccess().getGroup_0(), "rule__UnaryExpression__Group_0__0");
					put(grammarAccess.getUnaryExpressionAccess().getGroup_1(), "rule__UnaryExpression__Group_1__0");
					put(grammarAccess.getCastAccess().getGroup(), "rule__Cast__Group__0");
					put(grammarAccess.getPrimaryAccess().getGroup_3(), "rule__Primary__Group_3__0");
					put(grammarAccess.getSingleStringJDOQLAccess().getSelectAssignment_0(), "rule__SingleStringJDOQL__SelectAssignment_0");
					put(grammarAccess.getSingleStringJDOQLAccess().getFromAssignment_1(), "rule__SingleStringJDOQL__FromAssignment_1");
					put(grammarAccess.getSingleStringJDOQLAccess().getWhereAssignment_2(), "rule__SingleStringJDOQL__WhereAssignment_2");
					put(grammarAccess.getSelectAccess().getResultClauseAssignment_2(), "rule__Select__ResultClauseAssignment_2");
					put(grammarAccess.getSelectAccess().getIntoClauseAssignment_3(), "rule__Select__IntoClauseAssignment_3");
					put(grammarAccess.getResultClauseAccess().getResultSpecsAssignment_1(), "rule__ResultClause__ResultSpecsAssignment_1");
					put(grammarAccess.getIntoClauseAccess().getResultClassNameAssignment_1(), "rule__IntoClause__ResultClassNameAssignment_1");
					put(grammarAccess.getFromAccess().getCandidateClassNameAssignment_1(), "rule__From__CandidateClassNameAssignment_1");
					put(grammarAccess.getFromAccess().getExcludeClauseAssignment_2(), "rule__From__ExcludeClauseAssignment_2");
					put(grammarAccess.getWhereAccess().getEAssignment_1(), "rule__Where__EAssignment_1");
					put(grammarAccess.getExcludeClauseAccess().getExcludeSubclassesAssignment(), "rule__ExcludeClause__ExcludeSubclassesAssignment");
					put(grammarAccess.getResultSpecAccess().getResultNamingAssignment_1(), "rule__ResultSpec__ResultNamingAssignment_1");
					put(grammarAccess.getResultNamingAccess().getIdentifierAssignment_1(), "rule__ResultNaming__IdentifierAssignment_1");
					put(grammarAccess.getBooleanExpressionAccess().getLeftAssignment_0(), "rule__BooleanExpression__LeftAssignment_0");
					put(grammarAccess.getBooleanExpressionAccess().getOpAssignment_1_0(), "rule__BooleanExpression__OpAssignment_1_0");
					put(grammarAccess.getBooleanExpressionAccess().getRightAssignment_1_1(), "rule__BooleanExpression__RightAssignment_1_1");
					put(grammarAccess.getExpressionAccess().getLeftAssignment_0(), "rule__Expression__LeftAssignment_0");
					put(grammarAccess.getExpressionAccess().getOpAssignment_1_0(), "rule__Expression__OpAssignment_1_0");
					put(grammarAccess.getExpressionAccess().getRightAssignment_1_1(), "rule__Expression__RightAssignment_1_1");
					put(grammarAccess.getUnaryExpressionAccess().getModifierAssignment_0_0(), "rule__UnaryExpression__ModifierAssignment_0_0");
					put(grammarAccess.getUnaryExpressionAccess().getExpressionAssignment_0_1(), "rule__UnaryExpression__ExpressionAssignment_0_1");
					put(grammarAccess.getUnaryExpressionAccess().getCastAssignment_1_0(), "rule__UnaryExpression__CastAssignment_1_0");
					put(grammarAccess.getUnaryExpressionAccess().getExpressionAssignment_1_1(), "rule__UnaryExpression__ExpressionAssignment_1_1");
					put(grammarAccess.getUnaryExpressionAccess().getExpressionAssignment_2(), "rule__UnaryExpression__ExpressionAssignment_2");
					put(grammarAccess.getPrimaryAccess().getLiteralAssignment_0(), "rule__Primary__LiteralAssignment_0");
					put(grammarAccess.getPrimaryAccess().getThisAssignment_1(), "rule__Primary__ThisAssignment_1");
					put(grammarAccess.getPrimaryAccess().getClassOrInterfaceAssignment_2(), "rule__Primary__ClassOrInterfaceAssignment_2");
					put(grammarAccess.getPrimaryAccess().getExpressionAssignment_3_1(), "rule__Primary__ExpressionAssignment_3_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.nightlabs.jjqb.xtext.jdoql.ui.contentassist.antlr.internal.InternalJDOQLParser typedParser = (org.nightlabs.jjqb.xtext.jdoql.ui.contentassist.antlr.internal.InternalJDOQLParser) parser;
			typedParser.entryRuleSingleStringJDOQL();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public JDOQLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(JDOQLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
