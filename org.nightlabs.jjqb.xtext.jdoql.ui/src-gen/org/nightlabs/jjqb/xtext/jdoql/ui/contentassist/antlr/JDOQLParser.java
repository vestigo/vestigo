/*
* generated by Xtext
*/
package org.nightlabs.jjqb.xtext.jdoql.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.nightlabs.jjqb.xtext.jdoql.services.JDOQLGrammarAccess;

public class JDOQLParser extends AbstractContentAssistParser {
	
	@Inject
	private JDOQLGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.nightlabs.jjqb.xtext.jdoql.ui.contentassist.antlr.internal.InternalJDOQLParser createParser() {
		org.nightlabs.jjqb.xtext.jdoql.ui.contentassist.antlr.internal.InternalJDOQLParser result = new org.nightlabs.jjqb.xtext.jdoql.ui.contentassist.antlr.internal.InternalJDOQLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getFieldAccessExpressionAccess().getAlternatives(), "rule__FieldAccessExpression__Alternatives");
					put(grammarAccess.getParameterOrFieldOrMethodExpressionAccess().getAlternatives(), "rule__ParameterOrFieldOrMethodExpression__Alternatives");
					put(grammarAccess.getFieldOrMethodExpressionAccess().getAlternatives(), "rule__FieldOrMethodExpression__Alternatives");
					put(grammarAccess.getStaticMethodExpressionAccess().getAlternatives(), "rule__StaticMethodExpression__Alternatives");
					put(grammarAccess.getMethodExpressionAccess().getAlternatives(), "rule__MethodExpression__Alternatives");
					put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
					put(grammarAccess.getPrimitiveTypeAccess().getAlternatives(), "rule__PrimitiveType__Alternatives");
					put(grammarAccess.getNumericTypeAccess().getAlternatives(), "rule__NumericType__Alternatives");
					put(grammarAccess.getIntegralTypeAccess().getAlternatives(), "rule__IntegralType__Alternatives");
					put(grammarAccess.getFloatingPointTypeAccess().getAlternatives(), "rule__FloatingPointType__Alternatives");
					put(grammarAccess.getBooleanLiteralAccess().getAlternatives(), "rule__BooleanLiteral__Alternatives");
					put(grammarAccess.getLiteralAccess().getAlternatives(), "rule__Literal__Alternatives");
					put(grammarAccess.getOrderByDirectionAccess().getAlternatives(), "rule__OrderByDirection__Alternatives");
					put(grammarAccess.getUnaryOperatorAccess().getAlternatives(), "rule__UnaryOperator__Alternatives");
					put(grammarAccess.getAdditionOperatorAccess().getAlternatives(), "rule__AdditionOperator__Alternatives");
					put(grammarAccess.getMultiplicationOperatorAccess().getAlternatives(), "rule__MultiplicationOperator__Alternatives");
					put(grammarAccess.getComparisonOperatorAccess().getAlternatives(), "rule__ComparisonOperator__Alternatives");
					put(grammarAccess.getSingleStringJDOQLAccess().getGroup(), "rule__SingleStringJDOQL__Group__0");
					put(grammarAccess.getSelectClauseAccess().getGroup(), "rule__SelectClause__Group__0");
					put(grammarAccess.getResultClauseAccess().getGroup(), "rule__ResultClause__Group__0");
					put(grammarAccess.getResultClauseAccess().getGroup_2(), "rule__ResultClause__Group_2__0");
					put(grammarAccess.getIntoClauseAccess().getGroup(), "rule__IntoClause__Group__0");
					put(grammarAccess.getResultSpecAccess().getGroup(), "rule__ResultSpec__Group__0");
					put(grammarAccess.getResultNamingAccess().getGroup(), "rule__ResultNaming__Group__0");
					put(grammarAccess.getFromClauseAccess().getGroup(), "rule__FromClause__Group__0");
					put(grammarAccess.getFromClauseAccess().getGroup_2(), "rule__FromClause__Group_2__0");
					put(grammarAccess.getWhereClauseAccess().getGroup(), "rule__WhereClause__Group__0");
					put(grammarAccess.getVariablesClauseAccess().getGroup(), "rule__VariablesClause__Group__0");
					put(grammarAccess.getVariablesClauseAccess().getGroup_2(), "rule__VariablesClause__Group_2__0");
					put(grammarAccess.getVariableDeclarationAccess().getGroup(), "rule__VariableDeclaration__Group__0");
					put(grammarAccess.getParametersClauseAccess().getGroup(), "rule__ParametersClause__Group__0");
					put(grammarAccess.getParametersClauseAccess().getGroup_2(), "rule__ParametersClause__Group_2__0");
					put(grammarAccess.getParameterDeclarationAccess().getGroup(), "rule__ParameterDeclaration__Group__0");
					put(grammarAccess.getImportClauseAccess().getGroup(), "rule__ImportClause__Group__0");
					put(grammarAccess.getImportClauseAccess().getGroup_1(), "rule__ImportClause__Group_1__0");
					put(grammarAccess.getImportDeclarationAccess().getGroup(), "rule__ImportDeclaration__Group__0");
					put(grammarAccess.getGroupByClauseAccess().getGroup(), "rule__GroupByClause__Group__0");
					put(grammarAccess.getGroupByClauseAccess().getGroup_3(), "rule__GroupByClause__Group_3__0");
					put(grammarAccess.getHavingClauseAccess().getGroup(), "rule__HavingClause__Group__0");
					put(grammarAccess.getOrderByClauseAccess().getGroup(), "rule__OrderByClause__Group__0");
					put(grammarAccess.getOrderByClauseAccess().getGroup_3(), "rule__OrderByClause__Group_3__0");
					put(grammarAccess.getOrderBySpecAccess().getGroup(), "rule__OrderBySpec__Group__0");
					put(grammarAccess.getRangeClauseAccess().getGroup(), "rule__RangeClause__Group__0");
					put(grammarAccess.getConditionalOrExpressionAccess().getGroup(), "rule__ConditionalOrExpression__Group__0");
					put(grammarAccess.getConditionalOrExpressionAccess().getGroup_1(), "rule__ConditionalOrExpression__Group_1__0");
					put(grammarAccess.getConditionalAndExpressionAccess().getGroup(), "rule__ConditionalAndExpression__Group__0");
					put(grammarAccess.getConditionalAndExpressionAccess().getGroup_1(), "rule__ConditionalAndExpression__Group_1__0");
					put(grammarAccess.getSimpleOrExpressionAccess().getGroup(), "rule__SimpleOrExpression__Group__0");
					put(grammarAccess.getSimpleOrExpressionAccess().getGroup_1(), "rule__SimpleOrExpression__Group_1__0");
					put(grammarAccess.getSimpleAndExpressionAccess().getGroup(), "rule__SimpleAndExpression__Group__0");
					put(grammarAccess.getSimpleAndExpressionAccess().getGroup_1(), "rule__SimpleAndExpression__Group_1__0");
					put(grammarAccess.getComparisonOperatorExpressionAccess().getGroup(), "rule__ComparisonOperatorExpression__Group__0");
					put(grammarAccess.getComparisonOperatorExpressionAccess().getGroup_1(), "rule__ComparisonOperatorExpression__Group_1__0");
					put(grammarAccess.getAdditionExpressionAccess().getGroup(), "rule__AdditionExpression__Group__0");
					put(grammarAccess.getAdditionExpressionAccess().getGroup_1(), "rule__AdditionExpression__Group_1__0");
					put(grammarAccess.getMultiplicationExpressionAccess().getGroup(), "rule__MultiplicationExpression__Group__0");
					put(grammarAccess.getMultiplicationExpressionAccess().getGroup_1(), "rule__MultiplicationExpression__Group_1__0");
					put(grammarAccess.getUnaryExpressionAccess().getGroup(), "rule__UnaryExpression__Group__0");
					put(grammarAccess.getFieldAccessExpressionAccess().getGroup_1(), "rule__FieldAccessExpression__Group_1__0");
					put(grammarAccess.getFieldAccessExpressionAccess().getGroup_1_1(), "rule__FieldAccessExpression__Group_1_1__0");
					put(grammarAccess.getParameterOrFieldOrMethodExpressionAccess().getGroup_3(), "rule__ParameterOrFieldOrMethodExpression__Group_3__0");
					put(grammarAccess.getStaticMethodExpressionAccess().getGroup_0(), "rule__StaticMethodExpression__Group_0__0");
					put(grammarAccess.getStaticMethodExpressionAccess().getGroup_1(), "rule__StaticMethodExpression__Group_1__0");
					put(grammarAccess.getStaticMethodExpressionAccess().getGroup_2(), "rule__StaticMethodExpression__Group_2__0");
					put(grammarAccess.getMethodExpressionAccess().getGroup_0(), "rule__MethodExpression__Group_0__0");
					put(grammarAccess.getMethodExpressionAccess().getGroup_1(), "rule__MethodExpression__Group_1__0");
					put(grammarAccess.getMethodExpressionAccess().getGroup_2(), "rule__MethodExpression__Group_2__0");
					put(grammarAccess.getMethodExpressionAccess().getGroup_3(), "rule__MethodExpression__Group_3__0");
					put(grammarAccess.getMethodExpressionAccess().getGroup_4(), "rule__MethodExpression__Group_4__0");
					put(grammarAccess.getMethodExpressionAccess().getGroup_5(), "rule__MethodExpression__Group_5__0");
					put(grammarAccess.getMethodExpressionAccess().getGroup_6(), "rule__MethodExpression__Group_6__0");
					put(grammarAccess.getMethodExpressionAccess().getGroup_7(), "rule__MethodExpression__Group_7__0");
					put(grammarAccess.getMethodExpressionAccess().getGroup_8(), "rule__MethodExpression__Group_8__0");
					put(grammarAccess.getMethodExpressionAccess().getGroup_9(), "rule__MethodExpression__Group_9__0");
					put(grammarAccess.getMethodExpressionAccess().getGroup_10(), "rule__MethodExpression__Group_10__0");
					put(grammarAccess.getMethodExpressionAccess().getGroup_11(), "rule__MethodExpression__Group_11__0");
					put(grammarAccess.getMethodExpressionAccess().getGroup_11_4(), "rule__MethodExpression__Group_11_4__0");
					put(grammarAccess.getMethodExpressionAccess().getGroup_12(), "rule__MethodExpression__Group_12__0");
					put(grammarAccess.getMethodExpressionAccess().getGroup_12_4(), "rule__MethodExpression__Group_12_4__0");
					put(grammarAccess.getParenthesesExpressionAccess().getGroup(), "rule__ParenthesesExpression__Group__0");
					put(grammarAccess.getCastAccess().getGroup(), "rule__Cast__Group__0");
					put(grammarAccess.getQualifiedIdentifierAccess().getGroup(), "rule__QualifiedIdentifier__Group__0");
					put(grammarAccess.getQualifiedIdentifierAccess().getGroup_1(), "rule__QualifiedIdentifier__Group_1__0");
					put(grammarAccess.getSingleStringJDOQLAccess().getSelectClauseAssignment_0(), "rule__SingleStringJDOQL__SelectClauseAssignment_0");
					put(grammarAccess.getSingleStringJDOQLAccess().getFromClauseAssignment_1(), "rule__SingleStringJDOQL__FromClauseAssignment_1");
					put(grammarAccess.getSingleStringJDOQLAccess().getWhereClauseAssignment_2(), "rule__SingleStringJDOQL__WhereClauseAssignment_2");
					put(grammarAccess.getSingleStringJDOQLAccess().getVariablesClauseAssignment_3(), "rule__SingleStringJDOQL__VariablesClauseAssignment_3");
					put(grammarAccess.getSingleStringJDOQLAccess().getParametersClauseAssignment_4(), "rule__SingleStringJDOQL__ParametersClauseAssignment_4");
					put(grammarAccess.getSingleStringJDOQLAccess().getImportClauseAssignment_5(), "rule__SingleStringJDOQL__ImportClauseAssignment_5");
					put(grammarAccess.getSingleStringJDOQLAccess().getGroupByClauseAssignment_6(), "rule__SingleStringJDOQL__GroupByClauseAssignment_6");
					put(grammarAccess.getSingleStringJDOQLAccess().getOrderByClauseAssignment_7(), "rule__SingleStringJDOQL__OrderByClauseAssignment_7");
					put(grammarAccess.getSingleStringJDOQLAccess().getRangeClauseAssignment_8(), "rule__SingleStringJDOQL__RangeClauseAssignment_8");
					put(grammarAccess.getSelectClauseAccess().getIsUniqueAssignment_2(), "rule__SelectClause__IsUniqueAssignment_2");
					put(grammarAccess.getSelectClauseAccess().getResultClauseAssignment_3(), "rule__SelectClause__ResultClauseAssignment_3");
					put(grammarAccess.getSelectClauseAccess().getIntoClauseAssignment_4(), "rule__SelectClause__IntoClauseAssignment_4");
					put(grammarAccess.getResultClauseAccess().getIsDistinctAssignment_0(), "rule__ResultClause__IsDistinctAssignment_0");
					put(grammarAccess.getResultClauseAccess().getResultSpecsAssignment_1(), "rule__ResultClause__ResultSpecsAssignment_1");
					put(grammarAccess.getResultClauseAccess().getResultSpecsAssignment_2_1(), "rule__ResultClause__ResultSpecsAssignment_2_1");
					put(grammarAccess.getIntoClauseAccess().getResultClassNameAssignment_1(), "rule__IntoClause__ResultClassNameAssignment_1");
					put(grammarAccess.getResultSpecAccess().getResultNamingAssignment_1(), "rule__ResultSpec__ResultNamingAssignment_1");
					put(grammarAccess.getResultNamingAccess().getIdentifierAssignment_1(), "rule__ResultNaming__IdentifierAssignment_1");
					put(grammarAccess.getFromClauseAccess().getCandidateClassNameAssignment_1(), "rule__FromClause__CandidateClassNameAssignment_1");
					put(grammarAccess.getFromClauseAccess().getIsExcludeSubclassesAssignment_2_0(), "rule__FromClause__IsExcludeSubclassesAssignment_2_0");
					put(grammarAccess.getWhereClauseAccess().getFilterAssignment_1(), "rule__WhereClause__FilterAssignment_1");
					put(grammarAccess.getVariablesClauseAccess().getVariableDeclarationsAssignment_1(), "rule__VariablesClause__VariableDeclarationsAssignment_1");
					put(grammarAccess.getVariablesClauseAccess().getVariableDeclarationsAssignment_2_1(), "rule__VariablesClause__VariableDeclarationsAssignment_2_1");
					put(grammarAccess.getVariableDeclarationAccess().getTypeAssignment_0(), "rule__VariableDeclaration__TypeAssignment_0");
					put(grammarAccess.getVariableDeclarationAccess().getVariableNameAssignment_1(), "rule__VariableDeclaration__VariableNameAssignment_1");
					put(grammarAccess.getParametersClauseAccess().getParameterDeclarationsAssignment_1(), "rule__ParametersClause__ParameterDeclarationsAssignment_1");
					put(grammarAccess.getParametersClauseAccess().getParameterDeclarationsAssignment_2_1(), "rule__ParametersClause__ParameterDeclarationsAssignment_2_1");
					put(grammarAccess.getParameterDeclarationAccess().getTypeAssignment_0(), "rule__ParameterDeclaration__TypeAssignment_0");
					put(grammarAccess.getParameterDeclarationAccess().getDeclaredParameterNameAssignment_1(), "rule__ParameterDeclaration__DeclaredParameterNameAssignment_1");
					put(grammarAccess.getImportClauseAccess().getImportDeclarationsAssignment_0(), "rule__ImportClause__ImportDeclarationsAssignment_0");
					put(grammarAccess.getImportClauseAccess().getImportDeclarationsAssignment_1_1(), "rule__ImportClause__ImportDeclarationsAssignment_1_1");
					put(grammarAccess.getGroupByClauseAccess().getGroupingAssignment_2(), "rule__GroupByClause__GroupingAssignment_2");
					put(grammarAccess.getGroupByClauseAccess().getGroupingAssignment_3_1(), "rule__GroupByClause__GroupingAssignment_3_1");
					put(grammarAccess.getGroupByClauseAccess().getHavingClauseAssignment_5(), "rule__GroupByClause__HavingClauseAssignment_5");
					put(grammarAccess.getHavingClauseAccess().getHavingAssignment_1(), "rule__HavingClause__HavingAssignment_1");
					put(grammarAccess.getOrderByClauseAccess().getOrderingAssignment_2(), "rule__OrderByClause__OrderingAssignment_2");
					put(grammarAccess.getOrderByClauseAccess().getOrderingAssignment_3_1(), "rule__OrderByClause__OrderingAssignment_3_1");
					put(grammarAccess.getOrderBySpecAccess().getDirectionAssignment_1(), "rule__OrderBySpec__DirectionAssignment_1");
					put(grammarAccess.getRangeClauseAccess().getStartAssignment_1(), "rule__RangeClause__StartAssignment_1");
					put(grammarAccess.getRangeClauseAccess().getEndAssignment_3(), "rule__RangeClause__EndAssignment_3");
					put(grammarAccess.getConditionalOrExpressionAccess().getRightAssignment_1_2(), "rule__ConditionalOrExpression__RightAssignment_1_2");
					put(grammarAccess.getConditionalAndExpressionAccess().getRightAssignment_1_2(), "rule__ConditionalAndExpression__RightAssignment_1_2");
					put(grammarAccess.getSimpleOrExpressionAccess().getRightAssignment_1_2(), "rule__SimpleOrExpression__RightAssignment_1_2");
					put(grammarAccess.getSimpleAndExpressionAccess().getRightAssignment_1_2(), "rule__SimpleAndExpression__RightAssignment_1_2");
					put(grammarAccess.getComparisonOperatorExpressionAccess().getOperatorAssignment_1_1(), "rule__ComparisonOperatorExpression__OperatorAssignment_1_1");
					put(grammarAccess.getComparisonOperatorExpressionAccess().getRightAssignment_1_2(), "rule__ComparisonOperatorExpression__RightAssignment_1_2");
					put(grammarAccess.getAdditionExpressionAccess().getOperatorAssignment_1_1(), "rule__AdditionExpression__OperatorAssignment_1_1");
					put(grammarAccess.getAdditionExpressionAccess().getRightAssignment_1_2(), "rule__AdditionExpression__RightAssignment_1_2");
					put(grammarAccess.getMultiplicationExpressionAccess().getOperatorAssignment_1_1(), "rule__MultiplicationExpression__OperatorAssignment_1_1");
					put(grammarAccess.getMultiplicationExpressionAccess().getRightAssignment_1_2(), "rule__MultiplicationExpression__RightAssignment_1_2");
					put(grammarAccess.getUnaryExpressionAccess().getUnaryOperatorAssignment_0(), "rule__UnaryExpression__UnaryOperatorAssignment_0");
					put(grammarAccess.getUnaryExpressionAccess().getRightAssignment_1(), "rule__UnaryExpression__RightAssignment_1");
					put(grammarAccess.getFieldAccessExpressionAccess().getRightAssignment_1_1_2(), "rule__FieldAccessExpression__RightAssignment_1_1_2");
					put(grammarAccess.getParameterOrFieldOrMethodExpressionAccess().getLiteralAssignment_0(), "rule__ParameterOrFieldOrMethodExpression__LiteralAssignment_0");
					put(grammarAccess.getParameterOrFieldOrMethodExpressionAccess().getThisAssignment_1(), "rule__ParameterOrFieldOrMethodExpression__ThisAssignment_1");
					put(grammarAccess.getParameterOrFieldOrMethodExpressionAccess().getIdAssignment_2(), "rule__ParameterOrFieldOrMethodExpression__IdAssignment_2");
					put(grammarAccess.getParameterOrFieldOrMethodExpressionAccess().getParameterNameAssignment_3_1(), "rule__ParameterOrFieldOrMethodExpression__ParameterNameAssignment_3_1");
					put(grammarAccess.getParameterOrFieldOrMethodExpressionAccess().getMethodAssignment_5(), "rule__ParameterOrFieldOrMethodExpression__MethodAssignment_5");
					put(grammarAccess.getFieldOrMethodExpressionAccess().getLiteralAssignment_0(), "rule__FieldOrMethodExpression__LiteralAssignment_0");
					put(grammarAccess.getFieldOrMethodExpressionAccess().getThisAssignment_1(), "rule__FieldOrMethodExpression__ThisAssignment_1");
					put(grammarAccess.getFieldOrMethodExpressionAccess().getIdAssignment_2(), "rule__FieldOrMethodExpression__IdAssignment_2");
					put(grammarAccess.getFieldOrMethodExpressionAccess().getMethodAssignment_4(), "rule__FieldOrMethodExpression__MethodAssignment_4");
					put(grammarAccess.getStaticMethodExpressionAccess().getNumericAssignment_0_4(), "rule__StaticMethodExpression__NumericAssignment_0_4");
					put(grammarAccess.getStaticMethodExpressionAccess().getNumericAssignment_1_4(), "rule__StaticMethodExpression__NumericAssignment_1_4");
					put(grammarAccess.getStaticMethodExpressionAccess().getPersistableAssignment_2_4(), "rule__StaticMethodExpression__PersistableAssignment_2_4");
					put(grammarAccess.getMethodExpressionAccess().getElementAssignment_0_3(), "rule__MethodExpression__ElementAssignment_0_3");
					put(grammarAccess.getMethodExpressionAccess().getArgAssignment_3_3(), "rule__MethodExpression__ArgAssignment_3_3");
					put(grammarAccess.getMethodExpressionAccess().getKeyAssignment_4_3(), "rule__MethodExpression__KeyAssignment_4_3");
					put(grammarAccess.getMethodExpressionAccess().getValueAssignment_5_3(), "rule__MethodExpression__ValueAssignment_5_3");
					put(grammarAccess.getMethodExpressionAccess().getStringAssignment_6_3(), "rule__MethodExpression__StringAssignment_6_3");
					put(grammarAccess.getMethodExpressionAccess().getStringAssignment_7_3(), "rule__MethodExpression__StringAssignment_7_3");
					put(grammarAccess.getMethodExpressionAccess().getRegexAssignment_8_3(), "rule__MethodExpression__RegexAssignment_8_3");
					put(grammarAccess.getMethodExpressionAccess().getStringAssignment_11_3(), "rule__MethodExpression__StringAssignment_11_3");
					put(grammarAccess.getMethodExpressionAccess().getFromIndexAssignment_11_4_1(), "rule__MethodExpression__FromIndexAssignment_11_4_1");
					put(grammarAccess.getMethodExpressionAccess().getBeginIndexAssignment_12_3(), "rule__MethodExpression__BeginIndexAssignment_12_3");
					put(grammarAccess.getMethodExpressionAccess().getEndIndexAssignment_12_4_1(), "rule__MethodExpression__EndIndexAssignment_12_4_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.nightlabs.jjqb.xtext.jdoql.ui.contentassist.antlr.internal.InternalJDOQLParser typedParser = (org.nightlabs.jjqb.xtext.jdoql.ui.contentassist.antlr.internal.InternalJDOQLParser) parser;
			typedParser.entryRuleSingleStringJDOQL();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public JDOQLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(JDOQLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
