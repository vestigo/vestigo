grammar org.nightlabs.jjqb.xtext.jpql.JPQL with org.eclipse.xtext.common.Terminals

generate jPQL "http://www.nightlabs.org/jjqb/xtext/jdoql/JPQL"

// http://www.datanucleus.org/products/accessplatform_3_1/jpa/jpql.html
// Current spec: JPA 3.0, JPQL BNF at bottom

JPQLQuery:
	SelectStatement |
	UpdateStatement |
	DeleteStatement
;

SelectStatement:
	selectFromClause=SelectFromClause
	(whereClause=WhereClause)?
	(groupBy=GroupClause)?
	(having=HavingClause)?
	(order=OrderClause)?
;

GroupClause:
	'GROUP' 'BY' grouping+=GroupItem (',' grouping+=GroupItem)*
;

GroupItem:
	var=AliasAttributeExpression
;

HavingClause:
	'HAVING' having=OrExpression
;

OrderClause:
	'ORDER' 'BY' ordering+=OrderItem (',' ordering+=OrderItem)* ((isAsc?='ASC')|(isDesc?='DESC'))?
;

OrderItem:
//	var=[FromEntry]'.'feature=ID
	var=AliasAttributeExpression
;

UpdateStatement:
	updateClause=UpdateClause
	setClause=SetClause
	(whereClause=WhereClause)?
;

UpdateClause:
	'UPDATE' fromEntries+=FromEntry (',' fromEntries+=FromEntry)*
;

SetClause:
	'SET' items+=UpdateItem (',' items+=UpdateItem)*
;

UpdateItem:
	alias=AliasAttributeExpression '=' value=Value
;

DeleteStatement:
	deleteClause=DeleteClause
	(whereClause=WhereClause)?
;

DeleteClause:
	'DELETE' fromClause=FromClause
;

SelectFromClause:
	(selectClause=SelectClause)?
	fromClause=FromClause
;

SelectClause:
	'SELECT' (isDistinct?='DISTINCT')? expressions+=SelectExpression (',' expressions+=SelectExpression)*
;

SelectExpression:
	AliasAttributeExpression |
	SelectAggregateExpression |
	SelectConstructorExpression
;

SelectAggregateExpression:
	AvgAggregate |
	MaxAggregate |
	MinAggregate |
	SumAggregate |
	CountAggregate
;

AvgAggregate:
	'AVG' '(' (isDistinct?='DISTINCT')? item=AliasAttributeExpression ')'
;

MaxAggregate:
	'MAX' '(' (isDistinct?='DISTINCT')? item=AliasAttributeExpression ')'
;

MinAggregate:
	'MIN' '(' (isDistinct?='DISTINCT')? item=AliasAttributeExpression ')'
;

SumAggregate:
	'SUM' '(' (isDistinct?='DISTINCT')?item=AliasAttributeExpression ')'
;

CountAggregate:
	'COUNT' '(' (isDistinct?='DISTINCT')?item=AliasAttributeExpression ')'
;

SelectConstructorExpression:
	'NEW' name=ID '(' items+=AliasAttributeExpression (',' items+=AliasAttributeExpression)* ')'
;

FromClause:
	'FROM' fromEntries+=FromClass (',' fromEntries+=FromEntry )*
;

FromEntry:
	FromClass |
	FromCollection
;

VariableDeclaration returns VariableDeclaration:
	("AS")? name=ID
;

FromClass:
	FromClassId | 
	FromClassVar
;

QualifiedIdentifier:
	ID ('.'ID)*
;

FromClassId returns FromClass:
	type=QualifiedIdentifier
;

FromClassVar returns FromClass:
	type=QualifiedIdentifier variable=VariableDeclaration (joins+=FromJoin)*
;

FromCollection returns FromCollection:	
	'IN' '(' path=AliasAttributeExpression ')' variable=VariableDeclaration
;

FromJoin:
	Join |
	LeftJoin |
	InnerJoin
;

Join:
	'JOIN' (isFetch?='FETCH')? path=AliasAttributeExpression variable=VariableDeclaration
;

LeftJoin:
	'LEFT' (isOuter?='OUTER')? 'JOIN' (isFetch?='FETCH')? path=AliasAttributeExpression variable=VariableDeclaration
;

InnerJoin:
	'INNER' 'JOIN' (isFetch?='FETCH')? path=AliasAttributeExpression variable=VariableDeclaration
;

WhereClause:
	'WHERE' whereEntry=OrExpression
;

OrExpression returns Expression:
	AndExpression ({OrExpression.entries+=current} ("OR" entries+=AndExpression)+)?
;

AndExpression returns Expression:
	ConcreteExpression ({AndExpression.entries+=current} ("AND" entries+=ConcreteExpression)+)?
;

ConcreteExpression returns Expression:
	ParExpression | 
	ComparisonOperatorExpression |
	ExistsExpression |
	AllExpression |
	AnyExpression |
	SomeExpression |
	CollectionExpression |
	NullComparisonExpression |
	EmptyComparisonExpression |
	LikeExpression |
	InExpression |
	BetweenExpression
;

ParExpression returns Expression:
	"(" ExpressionTerm ")"
;

ComparisonOperatorExpression:
	lhs=Variable operator=ComparisonOperator rhs=ExpressionTerm 
;

ExistsExpression:
	(isNot?='NOT')? 'EXISTS' query=QueryExpression
;

AllExpression:
	'ALL' query=QueryExpression
;

AnyExpression:
	'ANY' query=QueryExpression
;

SomeExpression:
	'SOME' query=QueryExpression
;

CollectionExpression:
	lhs=Variable (isNot?='NOT')? 'MEMBER' ('OF')? rhs=AliasAttributeExpression
;

NullComparisonExpression:
	lhs=Variable 'IS' (isNot?='NOT')? 'NULL'
;

EmptyComparisonExpression:
	lhs=Variable 'IS' (isNot?='NOT')? 'EMPTY'
;

LikeExpression:
	lhs=Variable (isNot?='NOT')? 'LIKE' pattern=STRING
;

InExpression:
	InSeqExpression |
	InQueryExpression
;

InSeqExpression:
	lhs=Variable (isNot?='NOT')? 'IN' '(' items+=Variable (',' items+=Variable)* ')'
;

InQueryExpression:
	lhs=Variable (isNot?='NOT')? 'IN' query=QueryExpression
;

BetweenExpression:
	lhs=Variable (isNot?='NOT')? 'BETWEEN' min=Value 'AND' max=Value
;

Variable:
	AliasAttributeExpression | 
	ParameterExpression |
	Value
;

ExpressionTerm:
	Variable |
	QueryExpression
;

AliasAttributeExpression:
	alias=[VariableDeclaration|ID] ("." attributes+=ID)*
;

ParameterExpression:
	':'name=ID
;

Function:
	StringFunction |
	NumericFunction
;

StringFunction returns Function:
	name=StringFunctionName '(' params+=Variable (',' params+=Variable) ')'
;

StringFunctionName:
	'CONCAT' | 
	'SUBSTRING' | 
//	TRIM ([[trim_specification] [trim_character] FROM] string_primary) | 
	'LOWER' | 
	'UPPER' |
	'LENGTH' |
	'LOCATE'
;

NumericFunction returns Function:
	name=NumericFunctionName '(' params+=Variable (',' params+=Variable) ')'
;

NumericFunctionName:
	'ABS' | 'SQRT' | 'MOD' | 'SIZE'
;

DateTimeFunctionName:
	'CURRENT_DATE' | 'CURRENT_TIME' | 'CURRENT_TIMESTAMP'
;

//DoubleExpression: 
//	value=SIGNED_DOUBLE
//; 
//
//LongExpression: 
//	value=SINGED_LONG	
//; 

Value:
	IntegerExpression |
	StringExpression |
	NullExpression |
	BooleanExpression
;

IntegerExpression:
	value=INT
;

StringExpression: 
	value=STRING
; 

NullExpression:
	value="NULL"
; 

BooleanExpression: 
	value?=("TRUE" | "FALSE")
;

QueryExpression returns SelectStatement:
	"(" SelectStatement ")"
;

enum ComparisonOperator:
	lessThen="<" | 
	greaterThen=">" | 
	lessEqual="<=" | 
	greaterEqual=">=" | 
	equal="=" | 
	notEqual="<>"
;
