/*
* generated by Xtext
*/
parser grammar InternalJPQLParser;

options {
	tokenVocab=InternalJPQLLexer;
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	
}

@header {
package org.nightlabs.jjqb.xtext.jpql.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.nightlabs.jjqb.xtext.jpql.services.JPQLGrammarAccess;

}

@members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/
 

	private JPQLGrammarAccess grammarAccess;
	 	
	public InternalJPQLParser(TokenStream input, JPQLGrammarAccess grammarAccess) {
		this(input);
		this.grammarAccess = grammarAccess;
		registerRules(grammarAccess.getGrammar());
	}
	
	@Override
	protected String getFirstRuleName() {
		return "QueryModule";	
	} 
	   	   	
	@Override
	protected JPQLGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}
}

@rulecatch { 
	catch (RecognitionException re) { 
	    recover(input,re); 
	    appendSkippedTokens();
	}
}




// Entry rule entryRuleQueryModule
entryRuleQueryModule returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getQueryModuleRule()); }
	 iv_ruleQueryModule=ruleQueryModule 
	 { $current=$iv_ruleQueryModule.current; } 
	 EOF 
;

// Rule QueryModule
ruleQueryModule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getQueryModuleAccess().getImportsImportParserRuleCall_0_0()); 
	    }
		lv_imports_0_0=ruleImport		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQueryModuleRule());
	        }
       		add(
       			$current, 
       			"imports",
        		lv_imports_0_0, 
        		"Import");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getQueryModuleAccess().getDefaultQueryJPQLQueryParserRuleCall_1_0()); 
	    }
		lv_defaultQuery_1_0=ruleJPQLQuery		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQueryModuleRule());
	        }
       		set(
       			$current, 
       			"defaultQuery",
        		lv_defaultQuery_1_0, 
        		"JPQLQuery");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getImportRule()); }
	 iv_ruleImport=ruleImport 
	 { $current=$iv_ruleImport.current; } 
	 EOF 
;

// Rule Import
ruleImport returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_56
    {
    	newLeafNode(otherlv_0, grammarAccess.getImportAccess().getIMPORTKeyword_0());
    }
(
(
		lv_importURI_1_0=RULE_STRING
		{
			newLeafNode(lv_importURI_1_0, grammarAccess.getImportAccess().getImportURISTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getImportRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"importURI",
        		lv_importURI_1_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleJPQLQuery
entryRuleJPQLQuery returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getJPQLQueryRule()); }
	 iv_ruleJPQLQuery=ruleJPQLQuery 
	 { $current=$iv_ruleJPQLQuery.current; } 
	 EOF 
;

// Rule JPQLQuery
ruleJPQLQuery returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getJPQLQueryAccess().getSelectStatementParserRuleCall_0()); 
    }
    this_SelectStatement_0=ruleSelectStatement
    {
        $current = $this_SelectStatement_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getJPQLQueryAccess().getUpdateStatementParserRuleCall_1()); 
    }
    this_UpdateStatement_1=ruleUpdateStatement
    {
        $current = $this_UpdateStatement_1.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getJPQLQueryAccess().getDeleteStatementParserRuleCall_2()); 
    }
    this_DeleteStatement_2=ruleDeleteStatement
    {
        $current = $this_DeleteStatement_2.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleSelectStatement
entryRuleSelectStatement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getSelectStatementRule()); }
	 iv_ruleSelectStatement=ruleSelectStatement 
	 { $current=$iv_ruleSelectStatement.current; } 
	 EOF 
;

// Rule SelectStatement
ruleSelectStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSelectStatementAccess().getSelectFromClauseSelectFromClauseParserRuleCall_0_0()); 
	    }
		lv_selectFromClause_0_0=ruleSelectFromClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectStatementRule());
	        }
       		set(
       			$current, 
       			"selectFromClause",
        		lv_selectFromClause_0_0, 
        		"SelectFromClause");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectStatementAccess().getWhereClauseWhereClauseParserRuleCall_1_0()); 
	    }
		lv_whereClause_1_0=ruleWhereClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectStatementRule());
	        }
       		set(
       			$current, 
       			"whereClause",
        		lv_whereClause_1_0, 
        		"WhereClause");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectStatementAccess().getGroupByGroupClauseParserRuleCall_2_0()); 
	    }
		lv_groupBy_2_0=ruleGroupClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectStatementRule());
	        }
       		set(
       			$current, 
       			"groupBy",
        		lv_groupBy_2_0, 
        		"GroupClause");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectStatementAccess().getHavingHavingClauseParserRuleCall_3_0()); 
	    }
		lv_having_3_0=ruleHavingClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectStatementRule());
	        }
       		set(
       			$current, 
       			"having",
        		lv_having_3_0, 
        		"HavingClause");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectStatementAccess().getOrderOrderClauseParserRuleCall_4_0()); 
	    }
		lv_order_4_0=ruleOrderClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectStatementRule());
	        }
       		set(
       			$current, 
       			"order",
        		lv_order_4_0, 
        		"OrderClause");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleGroupClause
entryRuleGroupClause returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getGroupClauseRule()); }
	 iv_ruleGroupClause=ruleGroupClause 
	 { $current=$iv_ruleGroupClause.current; } 
	 EOF 
;

// Rule GroupClause
ruleGroupClause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_45
    {
    	newLeafNode(otherlv_0, grammarAccess.getGroupClauseAccess().getGROUPKeyword_0());
    }

	otherlv_1=KEYWORD_13
    {
    	newLeafNode(otherlv_1, grammarAccess.getGroupClauseAccess().getBYKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGroupClauseAccess().getGroupingGroupItemParserRuleCall_2_0()); 
	    }
		lv_grouping_2_0=ruleGroupItem		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGroupClauseRule());
	        }
       		add(
       			$current, 
       			"grouping",
        		lv_grouping_2_0, 
        		"GroupItem");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_3=KEYWORD_3
    {
    	newLeafNode(otherlv_3, grammarAccess.getGroupClauseAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGroupClauseAccess().getGroupingGroupItemParserRuleCall_3_1_0()); 
	    }
		lv_grouping_4_0=ruleGroupItem		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGroupClauseRule());
	        }
       		add(
       			$current, 
       			"grouping",
        		lv_grouping_4_0, 
        		"GroupItem");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleGroupItem
entryRuleGroupItem returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getGroupItemRule()); }
	 iv_ruleGroupItem=ruleGroupItem 
	 { $current=$iv_ruleGroupItem.current; } 
	 EOF 
;

// Rule GroupItem
ruleGroupItem returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getGroupItemAccess().getVarAliasAttributeExpressionParserRuleCall_0()); 
	    }
		lv_var_0_0=ruleAliasAttributeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGroupItemRule());
	        }
       		set(
       			$current, 
       			"var",
        		lv_var_0_0, 
        		"AliasAttributeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleHavingClause
entryRuleHavingClause returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getHavingClauseRule()); }
	 iv_ruleHavingClause=ruleHavingClause 
	 { $current=$iv_ruleHavingClause.current; } 
	 EOF 
;

// Rule HavingClause
ruleHavingClause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_55
    {
    	newLeafNode(otherlv_0, grammarAccess.getHavingClauseAccess().getHAVINGKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getHavingClauseAccess().getHavingOrExpressionParserRuleCall_1_0()); 
	    }
		lv_having_1_0=ruleOrExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHavingClauseRule());
	        }
       		set(
       			$current, 
       			"having",
        		lv_having_1_0, 
        		"OrExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleOrderClause
entryRuleOrderClause returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getOrderClauseRule()); }
	 iv_ruleOrderClause=ruleOrderClause 
	 { $current=$iv_ruleOrderClause.current; } 
	 EOF 
;

// Rule OrderClause
ruleOrderClause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_48
    {
    	newLeafNode(otherlv_0, grammarAccess.getOrderClauseAccess().getORDERKeyword_0());
    }

	otherlv_1=KEYWORD_13
    {
    	newLeafNode(otherlv_1, grammarAccess.getOrderClauseAccess().getBYKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOrderClauseAccess().getOrderingOrderItemParserRuleCall_2_0()); 
	    }
		lv_ordering_2_0=ruleOrderItem		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrderClauseRule());
	        }
       		add(
       			$current, 
       			"ordering",
        		lv_ordering_2_0, 
        		"OrderItem");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_3=KEYWORD_3
    {
    	newLeafNode(otherlv_3, grammarAccess.getOrderClauseAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOrderClauseAccess().getOrderingOrderItemParserRuleCall_3_1_0()); 
	    }
		lv_ordering_4_0=ruleOrderItem		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrderClauseRule());
	        }
       		add(
       			$current, 
       			"ordering",
        		lv_ordering_4_0, 
        		"OrderItem");
	        afterParserOrEnumRuleCall();
	    }

)
))*((
(
		lv_isAsc_5_0=
	KEYWORD_22
    {
        newLeafNode(lv_isAsc_5_0, grammarAccess.getOrderClauseAccess().getIsAscASCKeyword_4_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOrderClauseRule());
	        }
       		setWithLastConsumed($current, "isAsc", true, "ASC");
	    }

)
)
    |(
(
		lv_isDesc_6_0=
	KEYWORD_31
    {
        newLeafNode(lv_isDesc_6_0, grammarAccess.getOrderClauseAccess().getIsDescDESCKeyword_4_1_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOrderClauseRule());
	        }
       		setWithLastConsumed($current, "isDesc", true, "DESC");
	    }

)
))?)
;





// Entry rule entryRuleOrderItem
entryRuleOrderItem returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getOrderItemRule()); }
	 iv_ruleOrderItem=ruleOrderItem 
	 { $current=$iv_ruleOrderItem.current; } 
	 EOF 
;

// Rule OrderItem
ruleOrderItem returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getOrderItemAccess().getVarAliasAttributeExpressionParserRuleCall_0()); 
	    }
		lv_var_0_0=ruleAliasAttributeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrderItemRule());
	        }
       		set(
       			$current, 
       			"var",
        		lv_var_0_0, 
        		"AliasAttributeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleUpdateStatement
entryRuleUpdateStatement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getUpdateStatementRule()); }
	 iv_ruleUpdateStatement=ruleUpdateStatement 
	 { $current=$iv_ruleUpdateStatement.current; } 
	 EOF 
;

// Rule UpdateStatement
ruleUpdateStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getUpdateStatementAccess().getUpdateClauseUpdateClauseParserRuleCall_0_0()); 
	    }
		lv_updateClause_0_0=ruleUpdateClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUpdateStatementRule());
	        }
       		set(
       			$current, 
       			"updateClause",
        		lv_updateClause_0_0, 
        		"UpdateClause");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getUpdateStatementAccess().getSetClauseSetClauseParserRuleCall_1_0()); 
	    }
		lv_setClause_1_0=ruleSetClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUpdateStatementRule());
	        }
       		set(
       			$current, 
       			"setClause",
        		lv_setClause_1_0, 
        		"SetClause");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getUpdateStatementAccess().getWhereClauseWhereClauseParserRuleCall_2_0()); 
	    }
		lv_whereClause_2_0=ruleWhereClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUpdateStatementRule());
	        }
       		set(
       			$current, 
       			"whereClause",
        		lv_whereClause_2_0, 
        		"WhereClause");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleUpdateClause
entryRuleUpdateClause returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getUpdateClauseRule()); }
	 iv_ruleUpdateClause=ruleUpdateClause 
	 { $current=$iv_ruleUpdateClause.current; } 
	 EOF 
;

// Rule UpdateClause
ruleUpdateClause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_61
    {
    	newLeafNode(otherlv_0, grammarAccess.getUpdateClauseAccess().getUPDATEKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUpdateClauseAccess().getFromEntriesFromEntryParserRuleCall_1_0()); 
	    }
		lv_fromEntries_1_0=ruleFromEntry		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUpdateClauseRule());
	        }
       		add(
       			$current, 
       			"fromEntries",
        		lv_fromEntries_1_0, 
        		"FromEntry");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_2=KEYWORD_3
    {
    	newLeafNode(otherlv_2, grammarAccess.getUpdateClauseAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUpdateClauseAccess().getFromEntriesFromEntryParserRuleCall_2_1_0()); 
	    }
		lv_fromEntries_3_0=ruleFromEntry		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUpdateClauseRule());
	        }
       		add(
       			$current, 
       			"fromEntries",
        		lv_fromEntries_3_0, 
        		"FromEntry");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleSetClause
entryRuleSetClause returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getSetClauseRule()); }
	 iv_ruleSetClause=ruleSetClause 
	 { $current=$iv_ruleSetClause.current; } 
	 EOF 
;

// Rule SetClause
ruleSetClause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_29
    {
    	newLeafNode(otherlv_0, grammarAccess.getSetClauseAccess().getSETKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSetClauseAccess().getItemsUpdateItemParserRuleCall_1_0()); 
	    }
		lv_items_1_0=ruleUpdateItem		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSetClauseRule());
	        }
       		add(
       			$current, 
       			"items",
        		lv_items_1_0, 
        		"UpdateItem");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_2=KEYWORD_3
    {
    	newLeafNode(otherlv_2, grammarAccess.getSetClauseAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSetClauseAccess().getItemsUpdateItemParserRuleCall_2_1_0()); 
	    }
		lv_items_3_0=ruleUpdateItem		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSetClauseRule());
	        }
       		add(
       			$current, 
       			"items",
        		lv_items_3_0, 
        		"UpdateItem");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleUpdateItem
entryRuleUpdateItem returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getUpdateItemRule()); }
	 iv_ruleUpdateItem=ruleUpdateItem 
	 { $current=$iv_ruleUpdateItem.current; } 
	 EOF 
;

// Rule UpdateItem
ruleUpdateItem returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getUpdateItemAccess().getAliasAliasAttributeExpressionParserRuleCall_0_0()); 
	    }
		lv_alias_0_0=ruleAliasAttributeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUpdateItemRule());
	        }
       		set(
       			$current, 
       			"alias",
        		lv_alias_0_0, 
        		"AliasAttributeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_1=KEYWORD_7
    {
    	newLeafNode(otherlv_1, grammarAccess.getUpdateItemAccess().getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUpdateItemAccess().getValueValueParserRuleCall_2_0()); 
	    }
		lv_value_2_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUpdateItemRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleDeleteStatement
entryRuleDeleteStatement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getDeleteStatementRule()); }
	 iv_ruleDeleteStatement=ruleDeleteStatement 
	 { $current=$iv_ruleDeleteStatement.current; } 
	 EOF 
;

// Rule DeleteStatement
ruleDeleteStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getDeleteStatementAccess().getDeleteClauseDeleteClauseParserRuleCall_0_0()); 
	    }
		lv_deleteClause_0_0=ruleDeleteClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeleteStatementRule());
	        }
       		set(
       			$current, 
       			"deleteClause",
        		lv_deleteClause_0_0, 
        		"DeleteClause");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDeleteStatementAccess().getWhereClauseWhereClauseParserRuleCall_1_0()); 
	    }
		lv_whereClause_1_0=ruleWhereClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeleteStatementRule());
	        }
       		set(
       			$current, 
       			"whereClause",
        		lv_whereClause_1_0, 
        		"WhereClause");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleDeleteClause
entryRuleDeleteClause returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getDeleteClauseRule()); }
	 iv_ruleDeleteClause=ruleDeleteClause 
	 { $current=$iv_ruleDeleteClause.current; } 
	 EOF 
;

// Rule DeleteClause
ruleDeleteClause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_53
    {
    	newLeafNode(otherlv_0, grammarAccess.getDeleteClauseAccess().getDELETEKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDeleteClauseAccess().getFromClauseFromClauseParserRuleCall_1_0()); 
	    }
		lv_fromClause_1_0=ruleFromClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeleteClauseRule());
	        }
       		set(
       			$current, 
       			"fromClause",
        		lv_fromClause_1_0, 
        		"FromClause");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleSelectFromClause
entryRuleSelectFromClause returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getSelectFromClauseRule()); }
	 iv_ruleSelectFromClause=ruleSelectFromClause 
	 { $current=$iv_ruleSelectFromClause.current; } 
	 EOF 
;

// Rule SelectFromClause
ruleSelectFromClause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSelectFromClauseAccess().getSelectClauseSelectClauseParserRuleCall_0_0()); 
	    }
		lv_selectClause_0_0=ruleSelectClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectFromClauseRule());
	        }
       		set(
       			$current, 
       			"selectClause",
        		lv_selectClause_0_0, 
        		"SelectClause");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectFromClauseAccess().getFromClauseFromClauseParserRuleCall_1_0()); 
	    }
		lv_fromClause_1_0=ruleFromClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectFromClauseRule());
	        }
       		set(
       			$current, 
       			"fromClause",
        		lv_fromClause_1_0, 
        		"FromClause");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleSelectClause
entryRuleSelectClause returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getSelectClauseRule()); }
	 iv_ruleSelectClause=ruleSelectClause 
	 { $current=$iv_ruleSelectClause.current; } 
	 EOF 
;

// Rule SelectClause
ruleSelectClause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_60
    {
    	newLeafNode(otherlv_0, grammarAccess.getSelectClauseAccess().getSELECTKeyword_0());
    }
(
(
		lv_isDistinct_1_0=
	KEYWORD_63
    {
        newLeafNode(lv_isDistinct_1_0, grammarAccess.getSelectClauseAccess().getIsDistinctDISTINCTKeyword_1_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSelectClauseRule());
	        }
       		setWithLastConsumed($current, "isDistinct", true, "DISTINCT");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectClauseAccess().getExpressionsSelectExpressionParserRuleCall_2_0()); 
	    }
		lv_expressions_2_0=ruleSelectExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectClauseRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_2_0, 
        		"SelectExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_3=KEYWORD_3
    {
    	newLeafNode(otherlv_3, grammarAccess.getSelectClauseAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectClauseAccess().getExpressionsSelectExpressionParserRuleCall_3_1_0()); 
	    }
		lv_expressions_4_0=ruleSelectExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectClauseRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_4_0, 
        		"SelectExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleSelectExpression
entryRuleSelectExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getSelectExpressionRule()); }
	 iv_ruleSelectExpression=ruleSelectExpression 
	 { $current=$iv_ruleSelectExpression.current; } 
	 EOF 
;

// Rule SelectExpression
ruleSelectExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSelectExpressionAccess().getAliasAttributeExpressionParserRuleCall_0()); 
    }
    this_AliasAttributeExpression_0=ruleAliasAttributeExpression
    {
        $current = $this_AliasAttributeExpression_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSelectExpressionAccess().getSelectAggregateExpressionParserRuleCall_1()); 
    }
    this_SelectAggregateExpression_1=ruleSelectAggregateExpression
    {
        $current = $this_SelectAggregateExpression_1.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSelectExpressionAccess().getSelectConstructorExpressionParserRuleCall_2()); 
    }
    this_SelectConstructorExpression_2=ruleSelectConstructorExpression
    {
        $current = $this_SelectConstructorExpression_2.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleSelectAggregateExpression
entryRuleSelectAggregateExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getSelectAggregateExpressionRule()); }
	 iv_ruleSelectAggregateExpression=ruleSelectAggregateExpression 
	 { $current=$iv_ruleSelectAggregateExpression.current; } 
	 EOF 
;

// Rule SelectAggregateExpression
ruleSelectAggregateExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSelectAggregateExpressionAccess().getAvgAggregateParserRuleCall_0()); 
    }
    this_AvgAggregate_0=ruleAvgAggregate
    {
        $current = $this_AvgAggregate_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSelectAggregateExpressionAccess().getMaxAggregateParserRuleCall_1()); 
    }
    this_MaxAggregate_1=ruleMaxAggregate
    {
        $current = $this_MaxAggregate_1.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSelectAggregateExpressionAccess().getMinAggregateParserRuleCall_2()); 
    }
    this_MinAggregate_2=ruleMinAggregate
    {
        $current = $this_MinAggregate_2.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSelectAggregateExpressionAccess().getSumAggregateParserRuleCall_3()); 
    }
    this_SumAggregate_3=ruleSumAggregate
    {
        $current = $this_SumAggregate_3.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSelectAggregateExpressionAccess().getCountAggregateParserRuleCall_4()); 
    }
    this_CountAggregate_4=ruleCountAggregate
    {
        $current = $this_CountAggregate_4.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAvgAggregate
entryRuleAvgAggregate returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getAvgAggregateRule()); }
	 iv_ruleAvgAggregate=ruleAvgAggregate 
	 { $current=$iv_ruleAvgAggregate.current; } 
	 EOF 
;

// Rule AvgAggregate
ruleAvgAggregate returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_23
    {
    	newLeafNode(otherlv_0, grammarAccess.getAvgAggregateAccess().getAVGKeyword_0());
    }

	otherlv_1=KEYWORD_1
    {
    	newLeafNode(otherlv_1, grammarAccess.getAvgAggregateAccess().getLeftParenthesisKeyword_1());
    }
(
(
		lv_isDistinct_2_0=
	KEYWORD_63
    {
        newLeafNode(lv_isDistinct_2_0, grammarAccess.getAvgAggregateAccess().getIsDistinctDISTINCTKeyword_2_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAvgAggregateRule());
	        }
       		setWithLastConsumed($current, "isDistinct", true, "DISTINCT");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getAvgAggregateAccess().getItemAliasAttributeExpressionParserRuleCall_3_0()); 
	    }
		lv_item_3_0=ruleAliasAttributeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAvgAggregateRule());
	        }
       		set(
       			$current, 
       			"item",
        		lv_item_3_0, 
        		"AliasAttributeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_4=KEYWORD_2
    {
    	newLeafNode(otherlv_4, grammarAccess.getAvgAggregateAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleMaxAggregate
entryRuleMaxAggregate returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getMaxAggregateRule()); }
	 iv_ruleMaxAggregate=ruleMaxAggregate 
	 { $current=$iv_ruleMaxAggregate.current; } 
	 EOF 
;

// Rule MaxAggregate
ruleMaxAggregate returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_24
    {
    	newLeafNode(otherlv_0, grammarAccess.getMaxAggregateAccess().getMAXKeyword_0());
    }

	otherlv_1=KEYWORD_1
    {
    	newLeafNode(otherlv_1, grammarAccess.getMaxAggregateAccess().getLeftParenthesisKeyword_1());
    }
(
(
		lv_isDistinct_2_0=
	KEYWORD_63
    {
        newLeafNode(lv_isDistinct_2_0, grammarAccess.getMaxAggregateAccess().getIsDistinctDISTINCTKeyword_2_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMaxAggregateRule());
	        }
       		setWithLastConsumed($current, "isDistinct", true, "DISTINCT");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getMaxAggregateAccess().getItemAliasAttributeExpressionParserRuleCall_3_0()); 
	    }
		lv_item_3_0=ruleAliasAttributeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMaxAggregateRule());
	        }
       		set(
       			$current, 
       			"item",
        		lv_item_3_0, 
        		"AliasAttributeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_4=KEYWORD_2
    {
    	newLeafNode(otherlv_4, grammarAccess.getMaxAggregateAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleMinAggregate
entryRuleMinAggregate returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getMinAggregateRule()); }
	 iv_ruleMinAggregate=ruleMinAggregate 
	 { $current=$iv_ruleMinAggregate.current; } 
	 EOF 
;

// Rule MinAggregate
ruleMinAggregate returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_25
    {
    	newLeafNode(otherlv_0, grammarAccess.getMinAggregateAccess().getMINKeyword_0());
    }

	otherlv_1=KEYWORD_1
    {
    	newLeafNode(otherlv_1, grammarAccess.getMinAggregateAccess().getLeftParenthesisKeyword_1());
    }
(
(
		lv_isDistinct_2_0=
	KEYWORD_63
    {
        newLeafNode(lv_isDistinct_2_0, grammarAccess.getMinAggregateAccess().getIsDistinctDISTINCTKeyword_2_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMinAggregateRule());
	        }
       		setWithLastConsumed($current, "isDistinct", true, "DISTINCT");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getMinAggregateAccess().getItemAliasAttributeExpressionParserRuleCall_3_0()); 
	    }
		lv_item_3_0=ruleAliasAttributeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMinAggregateRule());
	        }
       		set(
       			$current, 
       			"item",
        		lv_item_3_0, 
        		"AliasAttributeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_4=KEYWORD_2
    {
    	newLeafNode(otherlv_4, grammarAccess.getMinAggregateAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleSumAggregate
entryRuleSumAggregate returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getSumAggregateRule()); }
	 iv_ruleSumAggregate=ruleSumAggregate 
	 { $current=$iv_ruleSumAggregate.current; } 
	 EOF 
;

// Rule SumAggregate
ruleSumAggregate returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_30
    {
    	newLeafNode(otherlv_0, grammarAccess.getSumAggregateAccess().getSUMKeyword_0());
    }

	otherlv_1=KEYWORD_1
    {
    	newLeafNode(otherlv_1, grammarAccess.getSumAggregateAccess().getLeftParenthesisKeyword_1());
    }
(
(
		lv_isDistinct_2_0=
	KEYWORD_63
    {
        newLeafNode(lv_isDistinct_2_0, grammarAccess.getSumAggregateAccess().getIsDistinctDISTINCTKeyword_2_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSumAggregateRule());
	        }
       		setWithLastConsumed($current, "isDistinct", true, "DISTINCT");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getSumAggregateAccess().getItemAliasAttributeExpressionParserRuleCall_3_0()); 
	    }
		lv_item_3_0=ruleAliasAttributeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSumAggregateRule());
	        }
       		set(
       			$current, 
       			"item",
        		lv_item_3_0, 
        		"AliasAttributeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_4=KEYWORD_2
    {
    	newLeafNode(otherlv_4, grammarAccess.getSumAggregateAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleCountAggregate
entryRuleCountAggregate returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getCountAggregateRule()); }
	 iv_ruleCountAggregate=ruleCountAggregate 
	 { $current=$iv_ruleCountAggregate.current; } 
	 EOF 
;

// Rule CountAggregate
ruleCountAggregate returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_41
    {
    	newLeafNode(otherlv_0, grammarAccess.getCountAggregateAccess().getCOUNTKeyword_0());
    }

	otherlv_1=KEYWORD_1
    {
    	newLeafNode(otherlv_1, grammarAccess.getCountAggregateAccess().getLeftParenthesisKeyword_1());
    }
(
(
		lv_isDistinct_2_0=
	KEYWORD_63
    {
        newLeafNode(lv_isDistinct_2_0, grammarAccess.getCountAggregateAccess().getIsDistinctDISTINCTKeyword_2_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCountAggregateRule());
	        }
       		setWithLastConsumed($current, "isDistinct", true, "DISTINCT");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getCountAggregateAccess().getItemAliasAttributeExpressionParserRuleCall_3_0()); 
	    }
		lv_item_3_0=ruleAliasAttributeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCountAggregateRule());
	        }
       		set(
       			$current, 
       			"item",
        		lv_item_3_0, 
        		"AliasAttributeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_4=KEYWORD_2
    {
    	newLeafNode(otherlv_4, grammarAccess.getCountAggregateAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleSelectConstructorExpression
entryRuleSelectConstructorExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getSelectConstructorExpressionRule()); }
	 iv_ruleSelectConstructorExpression=ruleSelectConstructorExpression 
	 { $current=$iv_ruleSelectConstructorExpression.current; } 
	 EOF 
;

// Rule SelectConstructorExpression
ruleSelectConstructorExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_27
    {
    	newLeafNode(otherlv_0, grammarAccess.getSelectConstructorExpressionAccess().getNEWKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getSelectConstructorExpressionAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSelectConstructorExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)
	otherlv_2=KEYWORD_1
    {
    	newLeafNode(otherlv_2, grammarAccess.getSelectConstructorExpressionAccess().getLeftParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectConstructorExpressionAccess().getItemsAliasAttributeExpressionParserRuleCall_3_0()); 
	    }
		lv_items_3_0=ruleAliasAttributeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectConstructorExpressionRule());
	        }
       		add(
       			$current, 
       			"items",
        		lv_items_3_0, 
        		"AliasAttributeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_4=KEYWORD_3
    {
    	newLeafNode(otherlv_4, grammarAccess.getSelectConstructorExpressionAccess().getCommaKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectConstructorExpressionAccess().getItemsAliasAttributeExpressionParserRuleCall_4_1_0()); 
	    }
		lv_items_5_0=ruleAliasAttributeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectConstructorExpressionRule());
	        }
       		add(
       			$current, 
       			"items",
        		lv_items_5_0, 
        		"AliasAttributeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*
	otherlv_6=KEYWORD_2
    {
    	newLeafNode(otherlv_6, grammarAccess.getSelectConstructorExpressionAccess().getRightParenthesisKeyword_5());
    }
)
;





// Entry rule entryRuleFromClause
entryRuleFromClause returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getFromClauseRule()); }
	 iv_ruleFromClause=ruleFromClause 
	 { $current=$iv_ruleFromClause.current; } 
	 EOF 
;

// Rule FromClause
ruleFromClause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_32
    {
    	newLeafNode(otherlv_0, grammarAccess.getFromClauseAccess().getFROMKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFromClauseAccess().getFromEntriesFromClassParserRuleCall_1_0()); 
	    }
		lv_fromEntries_1_0=ruleFromClass		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFromClauseRule());
	        }
       		add(
       			$current, 
       			"fromEntries",
        		lv_fromEntries_1_0, 
        		"FromClass");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_2=KEYWORD_3
    {
    	newLeafNode(otherlv_2, grammarAccess.getFromClauseAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFromClauseAccess().getFromEntriesFromEntryParserRuleCall_2_1_0()); 
	    }
		lv_fromEntries_3_0=ruleFromEntry		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFromClauseRule());
	        }
       		add(
       			$current, 
       			"fromEntries",
        		lv_fromEntries_3_0, 
        		"FromEntry");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleFromEntry
entryRuleFromEntry returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getFromEntryRule()); }
	 iv_ruleFromEntry=ruleFromEntry 
	 { $current=$iv_ruleFromEntry.current; } 
	 EOF 
;

// Rule FromEntry
ruleFromEntry returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFromEntryAccess().getFromClassParserRuleCall_0()); 
    }
    this_FromClass_0=ruleFromClass
    {
        $current = $this_FromClass_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFromEntryAccess().getFromCollectionParserRuleCall_1()); 
    }
    this_FromCollection_1=ruleFromCollection
    {
        $current = $this_FromCollection_1.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleVariableDeclaration
entryRuleVariableDeclaration returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getVariableDeclarationRule()); }
	 iv_ruleVariableDeclaration=ruleVariableDeclaration 
	 { $current=$iv_ruleVariableDeclaration.current; } 
	 EOF 
;

// Rule VariableDeclaration
ruleVariableDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	otherlv_0=KEYWORD_12
    {
    	newLeafNode(otherlv_0, grammarAccess.getVariableDeclarationAccess().getASKeyword_0());
    }
)?(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getVariableDeclarationAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleFromClass
entryRuleFromClass returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getFromClassRule()); }
	 iv_ruleFromClass=ruleFromClass 
	 { $current=$iv_ruleFromClass.current; } 
	 EOF 
;

// Rule FromClass
ruleFromClass returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFromClassAccess().getFromClassIdParserRuleCall_0()); 
    }
    this_FromClassId_0=ruleFromClassId
    {
        $current = $this_FromClassId_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFromClassAccess().getFromClassVarParserRuleCall_1()); 
    }
    this_FromClassVar_1=ruleFromClassVar
    {
        $current = $this_FromClassVar_1.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleQualifiedIdentifier
entryRuleQualifiedIdentifier returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getQualifiedIdentifierRule()); } 
	 iv_ruleQualifiedIdentifier=ruleQualifiedIdentifier 
	 { $current=$iv_ruleQualifiedIdentifier.current.getText(); }  
	 EOF 
;

// Rule QualifiedIdentifier
ruleQualifiedIdentifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getQualifiedIdentifierAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw=KEYWORD_4 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedIdentifierAccess().getFullStopKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getQualifiedIdentifierAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;





// Entry rule entryRuleFromClassId
entryRuleFromClassId returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getFromClassIdRule()); }
	 iv_ruleFromClassId=ruleFromClassId 
	 { $current=$iv_ruleFromClassId.current; } 
	 EOF 
;

// Rule FromClassId
ruleFromClassId returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getFromClassIdAccess().getTypeQualifiedIdentifierParserRuleCall_0()); 
	    }
		lv_type_0_0=ruleQualifiedIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFromClassIdRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"QualifiedIdentifier");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleFromClassVar
entryRuleFromClassVar returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getFromClassVarRule()); }
	 iv_ruleFromClassVar=ruleFromClassVar 
	 { $current=$iv_ruleFromClassVar.current; } 
	 EOF 
;

// Rule FromClassVar
ruleFromClassVar returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFromClassVarAccess().getTypeQualifiedIdentifierParserRuleCall_0_0()); 
	    }
		lv_type_0_0=ruleQualifiedIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFromClassVarRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"QualifiedIdentifier");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFromClassVarAccess().getVariableVariableDeclarationParserRuleCall_1_0()); 
	    }
		lv_variable_1_0=ruleVariableDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFromClassVarRule());
	        }
       		set(
       			$current, 
       			"variable",
        		lv_variable_1_0, 
        		"VariableDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFromClassVarAccess().getJoinsFromJoinParserRuleCall_2_0()); 
	    }
		lv_joins_2_0=ruleFromJoin		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFromClassVarRule());
	        }
       		add(
       			$current, 
       			"joins",
        		lv_joins_2_0, 
        		"FromJoin");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleFromCollection
entryRuleFromCollection returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getFromCollectionRule()); }
	 iv_ruleFromCollection=ruleFromCollection 
	 { $current=$iv_ruleFromCollection.current; } 
	 EOF 
;

// Rule FromCollection
ruleFromCollection returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_14
    {
    	newLeafNode(otherlv_0, grammarAccess.getFromCollectionAccess().getINKeyword_0());
    }

	otherlv_1=KEYWORD_1
    {
    	newLeafNode(otherlv_1, grammarAccess.getFromCollectionAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFromCollectionAccess().getPathAliasAttributeExpressionParserRuleCall_2_0()); 
	    }
		lv_path_2_0=ruleAliasAttributeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFromCollectionRule());
	        }
       		set(
       			$current, 
       			"path",
        		lv_path_2_0, 
        		"AliasAttributeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_3=KEYWORD_2
    {
    	newLeafNode(otherlv_3, grammarAccess.getFromCollectionAccess().getRightParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFromCollectionAccess().getVariableVariableDeclarationParserRuleCall_4_0()); 
	    }
		lv_variable_4_0=ruleVariableDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFromCollectionRule());
	        }
       		set(
       			$current, 
       			"variable",
        		lv_variable_4_0, 
        		"VariableDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleFromJoin
entryRuleFromJoin returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getFromJoinRule()); }
	 iv_ruleFromJoin=ruleFromJoin 
	 { $current=$iv_ruleFromJoin.current; } 
	 EOF 
;

// Rule FromJoin
ruleFromJoin returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFromJoinAccess().getJoinParserRuleCall_0()); 
    }
    this_Join_0=ruleJoin
    {
        $current = $this_Join_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFromJoinAccess().getLeftJoinParserRuleCall_1()); 
    }
    this_LeftJoin_1=ruleLeftJoin
    {
        $current = $this_LeftJoin_1.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFromJoinAccess().getInnerJoinParserRuleCall_2()); 
    }
    this_InnerJoin_2=ruleInnerJoin
    {
        $current = $this_InnerJoin_2.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleJoin
entryRuleJoin returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getJoinRule()); }
	 iv_ruleJoin=ruleJoin 
	 { $current=$iv_ruleJoin.current; } 
	 EOF 
;

// Rule Join
ruleJoin returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_33
    {
    	newLeafNode(otherlv_0, grammarAccess.getJoinAccess().getJOINKeyword_0());
    }
(
(
		lv_isFetch_1_0=
	KEYWORD_44
    {
        newLeafNode(lv_isFetch_1_0, grammarAccess.getJoinAccess().getIsFetchFETCHKeyword_1_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getJoinRule());
	        }
       		setWithLastConsumed($current, "isFetch", true, "FETCH");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getJoinAccess().getPathAliasAttributeExpressionParserRuleCall_2_0()); 
	    }
		lv_path_2_0=ruleAliasAttributeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJoinRule());
	        }
       		set(
       			$current, 
       			"path",
        		lv_path_2_0, 
        		"AliasAttributeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getJoinAccess().getVariableVariableDeclarationParserRuleCall_3_0()); 
	    }
		lv_variable_3_0=ruleVariableDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJoinRule());
	        }
       		set(
       			$current, 
       			"variable",
        		lv_variable_3_0, 
        		"VariableDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleLeftJoin
entryRuleLeftJoin returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getLeftJoinRule()); }
	 iv_ruleLeftJoin=ruleLeftJoin 
	 { $current=$iv_ruleLeftJoin.current; } 
	 EOF 
;

// Rule LeftJoin
ruleLeftJoin returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_34
    {
    	newLeafNode(otherlv_0, grammarAccess.getLeftJoinAccess().getLEFTKeyword_0());
    }
(
(
		lv_isOuter_1_0=
	KEYWORD_49
    {
        newLeafNode(lv_isOuter_1_0, grammarAccess.getLeftJoinAccess().getIsOuterOUTERKeyword_1_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLeftJoinRule());
	        }
       		setWithLastConsumed($current, "isOuter", true, "OUTER");
	    }

)
)?
	otherlv_2=KEYWORD_33
    {
    	newLeafNode(otherlv_2, grammarAccess.getLeftJoinAccess().getJOINKeyword_2());
    }
(
(
		lv_isFetch_3_0=
	KEYWORD_44
    {
        newLeafNode(lv_isFetch_3_0, grammarAccess.getLeftJoinAccess().getIsFetchFETCHKeyword_3_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLeftJoinRule());
	        }
       		setWithLastConsumed($current, "isFetch", true, "FETCH");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getLeftJoinAccess().getPathAliasAttributeExpressionParserRuleCall_4_0()); 
	    }
		lv_path_4_0=ruleAliasAttributeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLeftJoinRule());
	        }
       		set(
       			$current, 
       			"path",
        		lv_path_4_0, 
        		"AliasAttributeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLeftJoinAccess().getVariableVariableDeclarationParserRuleCall_5_0()); 
	    }
		lv_variable_5_0=ruleVariableDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLeftJoinRule());
	        }
       		set(
       			$current, 
       			"variable",
        		lv_variable_5_0, 
        		"VariableDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleInnerJoin
entryRuleInnerJoin returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getInnerJoinRule()); }
	 iv_ruleInnerJoin=ruleInnerJoin 
	 { $current=$iv_ruleInnerJoin.current; } 
	 EOF 
;

// Rule InnerJoin
ruleInnerJoin returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_46
    {
    	newLeafNode(otherlv_0, grammarAccess.getInnerJoinAccess().getINNERKeyword_0());
    }

	otherlv_1=KEYWORD_33
    {
    	newLeafNode(otherlv_1, grammarAccess.getInnerJoinAccess().getJOINKeyword_1());
    }
(
(
		lv_isFetch_2_0=
	KEYWORD_44
    {
        newLeafNode(lv_isFetch_2_0, grammarAccess.getInnerJoinAccess().getIsFetchFETCHKeyword_2_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInnerJoinRule());
	        }
       		setWithLastConsumed($current, "isFetch", true, "FETCH");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getInnerJoinAccess().getPathAliasAttributeExpressionParserRuleCall_3_0()); 
	    }
		lv_path_3_0=ruleAliasAttributeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInnerJoinRule());
	        }
       		set(
       			$current, 
       			"path",
        		lv_path_3_0, 
        		"AliasAttributeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getInnerJoinAccess().getVariableVariableDeclarationParserRuleCall_4_0()); 
	    }
		lv_variable_4_0=ruleVariableDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInnerJoinRule());
	        }
       		set(
       			$current, 
       			"variable",
        		lv_variable_4_0, 
        		"VariableDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleWhereClause
entryRuleWhereClause returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getWhereClauseRule()); }
	 iv_ruleWhereClause=ruleWhereClause 
	 { $current=$iv_ruleWhereClause.current; } 
	 EOF 
;

// Rule WhereClause
ruleWhereClause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_51
    {
    	newLeafNode(otherlv_0, grammarAccess.getWhereClauseAccess().getWHEREKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWhereClauseAccess().getWhereEntryOrExpressionParserRuleCall_1_0()); 
	    }
		lv_whereEntry_1_0=ruleOrExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWhereClauseRule());
	        }
       		set(
       			$current, 
       			"whereEntry",
        		lv_whereEntry_1_0, 
        		"OrExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleOrExpression
entryRuleOrExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getOrExpressionRule()); }
	 iv_ruleOrExpression=ruleOrExpression 
	 { $current=$iv_ruleOrExpression.current; } 
	 EOF 
;

// Rule OrExpression
ruleOrExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0()); 
    }
    this_AndExpression_0=ruleAndExpression
    {
        $current = $this_AndExpression_0.current;
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getOrExpressionAccess().getOrExpressionEntriesAction_1_0(),
            $current);
    }
)(
	otherlv_2=KEYWORD_17
    {
    	newLeafNode(otherlv_2, grammarAccess.getOrExpressionAccess().getORKeyword_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOrExpressionAccess().getEntriesAndExpressionParserRuleCall_1_1_1_0()); 
	    }
		lv_entries_3_0=ruleAndExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrExpressionRule());
	        }
       		add(
       			$current, 
       			"entries",
        		lv_entries_3_0, 
        		"AndExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))+)?)
;





// Entry rule entryRuleAndExpression
entryRuleAndExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getAndExpressionRule()); }
	 iv_ruleAndExpression=ruleAndExpression 
	 { $current=$iv_ruleAndExpression.current; } 
	 EOF 
;

// Rule AndExpression
ruleAndExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAndExpressionAccess().getConcreteExpressionParserRuleCall_0()); 
    }
    this_ConcreteExpression_0=ruleConcreteExpression
    {
        $current = $this_ConcreteExpression_0.current;
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getAndExpressionAccess().getAndExpressionEntriesAction_1_0(),
            $current);
    }
)(
	otherlv_2=KEYWORD_20
    {
    	newLeafNode(otherlv_2, grammarAccess.getAndExpressionAccess().getANDKeyword_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAndExpressionAccess().getEntriesConcreteExpressionParserRuleCall_1_1_1_0()); 
	    }
		lv_entries_3_0=ruleConcreteExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAndExpressionRule());
	        }
       		add(
       			$current, 
       			"entries",
        		lv_entries_3_0, 
        		"ConcreteExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))+)?)
;





// Entry rule entryRuleConcreteExpression
entryRuleConcreteExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getConcreteExpressionRule()); }
	 iv_ruleConcreteExpression=ruleConcreteExpression 
	 { $current=$iv_ruleConcreteExpression.current; } 
	 EOF 
;

// Rule ConcreteExpression
ruleConcreteExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getConcreteExpressionAccess().getParExpressionParserRuleCall_0()); 
    }
    this_ParExpression_0=ruleParExpression
    {
        $current = $this_ParExpression_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getConcreteExpressionAccess().getOperatorExpressionParserRuleCall_1()); 
    }
    this_OperatorExpression_1=ruleOperatorExpression
    {
        $current = $this_OperatorExpression_1.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getConcreteExpressionAccess().getExistsExpressionParserRuleCall_2()); 
    }
    this_ExistsExpression_2=ruleExistsExpression
    {
        $current = $this_ExistsExpression_2.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getConcreteExpressionAccess().getAllExpressionParserRuleCall_3()); 
    }
    this_AllExpression_3=ruleAllExpression
    {
        $current = $this_AllExpression_3.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getConcreteExpressionAccess().getAnyExpressionParserRuleCall_4()); 
    }
    this_AnyExpression_4=ruleAnyExpression
    {
        $current = $this_AnyExpression_4.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getConcreteExpressionAccess().getSomeExpressionParserRuleCall_5()); 
    }
    this_SomeExpression_5=ruleSomeExpression
    {
        $current = $this_SomeExpression_5.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getConcreteExpressionAccess().getCollectionExpressionParserRuleCall_6()); 
    }
    this_CollectionExpression_6=ruleCollectionExpression
    {
        $current = $this_CollectionExpression_6.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getConcreteExpressionAccess().getNullComparisonExpressionParserRuleCall_7()); 
    }
    this_NullComparisonExpression_7=ruleNullComparisonExpression
    {
        $current = $this_NullComparisonExpression_7.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getConcreteExpressionAccess().getEmptyComparisonExpressionParserRuleCall_8()); 
    }
    this_EmptyComparisonExpression_8=ruleEmptyComparisonExpression
    {
        $current = $this_EmptyComparisonExpression_8.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getConcreteExpressionAccess().getLikeExpressionParserRuleCall_9()); 
    }
    this_LikeExpression_9=ruleLikeExpression
    {
        $current = $this_LikeExpression_9.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getConcreteExpressionAccess().getInExpressionParserRuleCall_10()); 
    }
    this_InExpression_10=ruleInExpression
    {
        $current = $this_InExpression_10.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getConcreteExpressionAccess().getBetweenExpressionParserRuleCall_11()); 
    }
    this_BetweenExpression_11=ruleBetweenExpression
    {
        $current = $this_BetweenExpression_11.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleParExpression
entryRuleParExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getParExpressionRule()); }
	 iv_ruleParExpression=ruleParExpression 
	 { $current=$iv_ruleParExpression.current; } 
	 EOF 
;

// Rule ParExpression
ruleParExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_1
    {
    	newLeafNode(otherlv_0, grammarAccess.getParExpressionAccess().getLeftParenthesisKeyword_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getParExpressionAccess().getExpressionTermParserRuleCall_1()); 
    }
    this_ExpressionTerm_1=ruleExpressionTerm
    {
        $current = $this_ExpressionTerm_1.current;
        afterParserOrEnumRuleCall();
    }

	otherlv_2=KEYWORD_2
    {
    	newLeafNode(otherlv_2, grammarAccess.getParExpressionAccess().getRightParenthesisKeyword_2());
    }
)
;





// Entry rule entryRuleOperatorExpression
entryRuleOperatorExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getOperatorExpressionRule()); }
	 iv_ruleOperatorExpression=ruleOperatorExpression 
	 { $current=$iv_ruleOperatorExpression.current; } 
	 EOF 
;

// Rule OperatorExpression
ruleOperatorExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getOperatorExpressionAccess().getLhsVariableParserRuleCall_0_0()); 
	    }
		lv_lhs_0_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperatorExpressionRule());
	        }
       		set(
       			$current, 
       			"lhs",
        		lv_lhs_0_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getOperatorExpressionAccess().getOperatorOperatorEnumRuleCall_1_0()); 
	    }
		lv_operator_1_0=ruleOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperatorExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_1_0, 
        		"Operator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getOperatorExpressionAccess().getRhsExpressionTermParserRuleCall_2_0()); 
	    }
		lv_rhs_2_0=ruleExpressionTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperatorExpressionRule());
	        }
       		set(
       			$current, 
       			"rhs",
        		lv_rhs_2_0, 
        		"ExpressionTerm");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleExistsExpression
entryRuleExistsExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getExistsExpressionRule()); }
	 iv_ruleExistsExpression=ruleExistsExpression 
	 { $current=$iv_ruleExistsExpression.current; } 
	 EOF 
;

// Rule ExistsExpression
ruleExistsExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_isNot_0_0=
	KEYWORD_28
    {
        newLeafNode(lv_isNot_0_0, grammarAccess.getExistsExpressionAccess().getIsNotNOTKeyword_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExistsExpressionRule());
	        }
       		setWithLastConsumed($current, "isNot", true, "NOT");
	    }

)
)?
	otherlv_1=KEYWORD_54
    {
    	newLeafNode(otherlv_1, grammarAccess.getExistsExpressionAccess().getEXISTSKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExistsExpressionAccess().getQueryQueryExpressionParserRuleCall_2_0()); 
	    }
		lv_query_2_0=ruleQueryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExistsExpressionRule());
	        }
       		set(
       			$current, 
       			"query",
        		lv_query_2_0, 
        		"QueryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleAllExpression
entryRuleAllExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getAllExpressionRule()); }
	 iv_ruleAllExpression=ruleAllExpression 
	 { $current=$iv_ruleAllExpression.current; } 
	 EOF 
;

// Rule AllExpression
ruleAllExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_19
    {
    	newLeafNode(otherlv_0, grammarAccess.getAllExpressionAccess().getALLKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAllExpressionAccess().getQueryQueryExpressionParserRuleCall_1_0()); 
	    }
		lv_query_1_0=ruleQueryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAllExpressionRule());
	        }
       		set(
       			$current, 
       			"query",
        		lv_query_1_0, 
        		"QueryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleAnyExpression
entryRuleAnyExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getAnyExpressionRule()); }
	 iv_ruleAnyExpression=ruleAnyExpression 
	 { $current=$iv_ruleAnyExpression.current; } 
	 EOF 
;

// Rule AnyExpression
ruleAnyExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_21
    {
    	newLeafNode(otherlv_0, grammarAccess.getAnyExpressionAccess().getANYKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAnyExpressionAccess().getQueryQueryExpressionParserRuleCall_1_0()); 
	    }
		lv_query_1_0=ruleQueryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnyExpressionRule());
	        }
       		set(
       			$current, 
       			"query",
        		lv_query_1_0, 
        		"QueryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleSomeExpression
entryRuleSomeExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getSomeExpressionRule()); }
	 iv_ruleSomeExpression=ruleSomeExpression 
	 { $current=$iv_ruleSomeExpression.current; } 
	 EOF 
;

// Rule SomeExpression
ruleSomeExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_38
    {
    	newLeafNode(otherlv_0, grammarAccess.getSomeExpressionAccess().getSOMEKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSomeExpressionAccess().getQueryQueryExpressionParserRuleCall_1_0()); 
	    }
		lv_query_1_0=ruleQueryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSomeExpressionRule());
	        }
       		set(
       			$current, 
       			"query",
        		lv_query_1_0, 
        		"QueryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleCollectionExpression
entryRuleCollectionExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getCollectionExpressionRule()); }
	 iv_ruleCollectionExpression=ruleCollectionExpression 
	 { $current=$iv_ruleCollectionExpression.current; } 
	 EOF 
;

// Rule CollectionExpression
ruleCollectionExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getCollectionExpressionAccess().getLhsVariableParserRuleCall_0_0()); 
	    }
		lv_lhs_0_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCollectionExpressionRule());
	        }
       		set(
       			$current, 
       			"lhs",
        		lv_lhs_0_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_isNot_1_0=
	KEYWORD_28
    {
        newLeafNode(lv_isNot_1_0, grammarAccess.getCollectionExpressionAccess().getIsNotNOTKeyword_1_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCollectionExpressionRule());
	        }
       		setWithLastConsumed($current, "isNot", true, "NOT");
	    }

)
)?
	otherlv_2=KEYWORD_59
    {
    	newLeafNode(otherlv_2, grammarAccess.getCollectionExpressionAccess().getMEMBERKeyword_2());
    }
(
	otherlv_3=KEYWORD_16
    {
    	newLeafNode(otherlv_3, grammarAccess.getCollectionExpressionAccess().getOFKeyword_3());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getCollectionExpressionAccess().getRhsAliasAttributeExpressionParserRuleCall_4_0()); 
	    }
		lv_rhs_4_0=ruleAliasAttributeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCollectionExpressionRule());
	        }
       		set(
       			$current, 
       			"rhs",
        		lv_rhs_4_0, 
        		"AliasAttributeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleNullComparisonExpression
entryRuleNullComparisonExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getNullComparisonExpressionRule()); }
	 iv_ruleNullComparisonExpression=ruleNullComparisonExpression 
	 { $current=$iv_ruleNullComparisonExpression.current; } 
	 EOF 
;

// Rule NullComparisonExpression
ruleNullComparisonExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getNullComparisonExpressionAccess().getLhsVariableParserRuleCall_0_0()); 
	    }
		lv_lhs_0_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNullComparisonExpressionRule());
	        }
       		set(
       			$current, 
       			"lhs",
        		lv_lhs_0_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_1=KEYWORD_15
    {
    	newLeafNode(otherlv_1, grammarAccess.getNullComparisonExpressionAccess().getISKeyword_1());
    }
(
(
		lv_isNot_2_0=
	KEYWORD_28
    {
        newLeafNode(lv_isNot_2_0, grammarAccess.getNullComparisonExpressionAccess().getIsNotNOTKeyword_2_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNullComparisonExpressionRule());
	        }
       		setWithLastConsumed($current, "isNot", true, "NOT");
	    }

)
)?
	otherlv_3=KEYWORD_36
    {
    	newLeafNode(otherlv_3, grammarAccess.getNullComparisonExpressionAccess().getNULLKeyword_3());
    }
)
;





// Entry rule entryRuleEmptyComparisonExpression
entryRuleEmptyComparisonExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getEmptyComparisonExpressionRule()); }
	 iv_ruleEmptyComparisonExpression=ruleEmptyComparisonExpression 
	 { $current=$iv_ruleEmptyComparisonExpression.current; } 
	 EOF 
;

// Rule EmptyComparisonExpression
ruleEmptyComparisonExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getEmptyComparisonExpressionAccess().getLhsVariableParserRuleCall_0_0()); 
	    }
		lv_lhs_0_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEmptyComparisonExpressionRule());
	        }
       		set(
       			$current, 
       			"lhs",
        		lv_lhs_0_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_1=KEYWORD_15
    {
    	newLeafNode(otherlv_1, grammarAccess.getEmptyComparisonExpressionAccess().getISKeyword_1());
    }
(
(
		lv_isNot_2_0=
	KEYWORD_28
    {
        newLeafNode(lv_isNot_2_0, grammarAccess.getEmptyComparisonExpressionAccess().getIsNotNOTKeyword_2_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEmptyComparisonExpressionRule());
	        }
       		setWithLastConsumed($current, "isNot", true, "NOT");
	    }

)
)?
	otherlv_3=KEYWORD_42
    {
    	newLeafNode(otherlv_3, grammarAccess.getEmptyComparisonExpressionAccess().getEMPTYKeyword_3());
    }
)
;





// Entry rule entryRuleLikeExpression
entryRuleLikeExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getLikeExpressionRule()); }
	 iv_ruleLikeExpression=ruleLikeExpression 
	 { $current=$iv_ruleLikeExpression.current; } 
	 EOF 
;

// Rule LikeExpression
ruleLikeExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getLikeExpressionAccess().getLhsVariableParserRuleCall_0_0()); 
	    }
		lv_lhs_0_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLikeExpressionRule());
	        }
       		set(
       			$current, 
       			"lhs",
        		lv_lhs_0_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_isNot_1_0=
	KEYWORD_28
    {
        newLeafNode(lv_isNot_1_0, grammarAccess.getLikeExpressionAccess().getIsNotNOTKeyword_1_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLikeExpressionRule());
	        }
       		setWithLastConsumed($current, "isNot", true, "NOT");
	    }

)
)?
	otherlv_2=KEYWORD_35
    {
    	newLeafNode(otherlv_2, grammarAccess.getLikeExpressionAccess().getLIKEKeyword_2());
    }
(
(
		lv_pattern_3_0=RULE_STRING
		{
			newLeafNode(lv_pattern_3_0, grammarAccess.getLikeExpressionAccess().getPatternSTRINGTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLikeExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"pattern",
        		lv_pattern_3_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleInExpression
entryRuleInExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getInExpressionRule()); }
	 iv_ruleInExpression=ruleInExpression 
	 { $current=$iv_ruleInExpression.current; } 
	 EOF 
;

// Rule InExpression
ruleInExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getInExpressionAccess().getInSeqExpressionParserRuleCall_0()); 
    }
    this_InSeqExpression_0=ruleInSeqExpression
    {
        $current = $this_InSeqExpression_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getInExpressionAccess().getInQueryExpressionParserRuleCall_1()); 
    }
    this_InQueryExpression_1=ruleInQueryExpression
    {
        $current = $this_InQueryExpression_1.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleInSeqExpression
entryRuleInSeqExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getInSeqExpressionRule()); }
	 iv_ruleInSeqExpression=ruleInSeqExpression 
	 { $current=$iv_ruleInSeqExpression.current; } 
	 EOF 
;

// Rule InSeqExpression
ruleInSeqExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getInSeqExpressionAccess().getLhsVariableParserRuleCall_0_0()); 
	    }
		lv_lhs_0_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInSeqExpressionRule());
	        }
       		set(
       			$current, 
       			"lhs",
        		lv_lhs_0_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_isNot_1_0=
	KEYWORD_28
    {
        newLeafNode(lv_isNot_1_0, grammarAccess.getInSeqExpressionAccess().getIsNotNOTKeyword_1_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInSeqExpressionRule());
	        }
       		setWithLastConsumed($current, "isNot", true, "NOT");
	    }

)
)?
	otherlv_2=KEYWORD_14
    {
    	newLeafNode(otherlv_2, grammarAccess.getInSeqExpressionAccess().getINKeyword_2());
    }

	otherlv_3=KEYWORD_1
    {
    	newLeafNode(otherlv_3, grammarAccess.getInSeqExpressionAccess().getLeftParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInSeqExpressionAccess().getItemsVariableParserRuleCall_4_0()); 
	    }
		lv_items_4_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInSeqExpressionRule());
	        }
       		add(
       			$current, 
       			"items",
        		lv_items_4_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_5=KEYWORD_3
    {
    	newLeafNode(otherlv_5, grammarAccess.getInSeqExpressionAccess().getCommaKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInSeqExpressionAccess().getItemsVariableParserRuleCall_5_1_0()); 
	    }
		lv_items_6_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInSeqExpressionRule());
	        }
       		add(
       			$current, 
       			"items",
        		lv_items_6_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
))*
	otherlv_7=KEYWORD_2
    {
    	newLeafNode(otherlv_7, grammarAccess.getInSeqExpressionAccess().getRightParenthesisKeyword_6());
    }
)
;





// Entry rule entryRuleInQueryExpression
entryRuleInQueryExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getInQueryExpressionRule()); }
	 iv_ruleInQueryExpression=ruleInQueryExpression 
	 { $current=$iv_ruleInQueryExpression.current; } 
	 EOF 
;

// Rule InQueryExpression
ruleInQueryExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getInQueryExpressionAccess().getLhsVariableParserRuleCall_0_0()); 
	    }
		lv_lhs_0_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInQueryExpressionRule());
	        }
       		set(
       			$current, 
       			"lhs",
        		lv_lhs_0_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_isNot_1_0=
	KEYWORD_28
    {
        newLeafNode(lv_isNot_1_0, grammarAccess.getInQueryExpressionAccess().getIsNotNOTKeyword_1_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInQueryExpressionRule());
	        }
       		setWithLastConsumed($current, "isNot", true, "NOT");
	    }

)
)?
	otherlv_2=KEYWORD_14
    {
    	newLeafNode(otherlv_2, grammarAccess.getInQueryExpressionAccess().getINKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInQueryExpressionAccess().getQueryQueryExpressionParserRuleCall_3_0()); 
	    }
		lv_query_3_0=ruleQueryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInQueryExpressionRule());
	        }
       		set(
       			$current, 
       			"query",
        		lv_query_3_0, 
        		"QueryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleBetweenExpression
entryRuleBetweenExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getBetweenExpressionRule()); }
	 iv_ruleBetweenExpression=ruleBetweenExpression 
	 { $current=$iv_ruleBetweenExpression.current; } 
	 EOF 
;

// Rule BetweenExpression
ruleBetweenExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getBetweenExpressionAccess().getLhsVariableParserRuleCall_0_0()); 
	    }
		lv_lhs_0_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBetweenExpressionRule());
	        }
       		set(
       			$current, 
       			"lhs",
        		lv_lhs_0_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_isNot_1_0=
	KEYWORD_28
    {
        newLeafNode(lv_isNot_1_0, grammarAccess.getBetweenExpressionAccess().getIsNotNOTKeyword_1_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBetweenExpressionRule());
	        }
       		setWithLastConsumed($current, "isNot", true, "NOT");
	    }

)
)?
	otherlv_2=KEYWORD_62
    {
    	newLeafNode(otherlv_2, grammarAccess.getBetweenExpressionAccess().getBETWEENKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBetweenExpressionAccess().getMinValueParserRuleCall_3_0()); 
	    }
		lv_min_3_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBetweenExpressionRule());
	        }
       		set(
       			$current, 
       			"min",
        		lv_min_3_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_4=KEYWORD_20
    {
    	newLeafNode(otherlv_4, grammarAccess.getBetweenExpressionAccess().getANDKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBetweenExpressionAccess().getMaxValueParserRuleCall_5_0()); 
	    }
		lv_max_5_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBetweenExpressionRule());
	        }
       		set(
       			$current, 
       			"max",
        		lv_max_5_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	 iv_ruleVariable=ruleVariable 
	 { $current=$iv_ruleVariable.current; } 
	 EOF 
;

// Rule Variable
ruleVariable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getVariableAccess().getAliasAttributeExpressionParserRuleCall_0()); 
    }
    this_AliasAttributeExpression_0=ruleAliasAttributeExpression
    {
        $current = $this_AliasAttributeExpression_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getVariableAccess().getParameterExpressionParserRuleCall_1()); 
    }
    this_ParameterExpression_1=ruleParameterExpression
    {
        $current = $this_ParameterExpression_1.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getVariableAccess().getValueParserRuleCall_2()); 
    }
    this_Value_2=ruleValue
    {
        $current = $this_Value_2.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleExpressionTerm
entryRuleExpressionTerm returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getExpressionTermRule()); }
	 iv_ruleExpressionTerm=ruleExpressionTerm 
	 { $current=$iv_ruleExpressionTerm.current; } 
	 EOF 
;

// Rule ExpressionTerm
ruleExpressionTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExpressionTermAccess().getVariableParserRuleCall_0()); 
    }
    this_Variable_0=ruleVariable
    {
        $current = $this_Variable_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExpressionTermAccess().getQueryExpressionParserRuleCall_1()); 
    }
    this_QueryExpression_1=ruleQueryExpression
    {
        $current = $this_QueryExpression_1.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAliasAttributeExpression
entryRuleAliasAttributeExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getAliasAttributeExpressionRule()); }
	 iv_ruleAliasAttributeExpression=ruleAliasAttributeExpression 
	 { $current=$iv_ruleAliasAttributeExpression.current; } 
	 EOF 
;

// Rule AliasAttributeExpression
ruleAliasAttributeExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAliasAttributeExpressionRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getAliasAttributeExpressionAccess().getAliasVariableDeclarationCrossReference_0_0()); 
	}

)
)(
	otherlv_1=KEYWORD_4
    {
    	newLeafNode(otherlv_1, grammarAccess.getAliasAttributeExpressionAccess().getFullStopKeyword_1_0());
    }
(
(
		lv_attributes_2_0=RULE_ID
		{
			newLeafNode(lv_attributes_2_0, grammarAccess.getAliasAttributeExpressionAccess().getAttributesIDTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAliasAttributeExpressionRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"attributes",
        		lv_attributes_2_0, 
        		"ID");
	    }

)
))*)
;





// Entry rule entryRuleParameterExpression
entryRuleParameterExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getParameterExpressionRule()); }
	 iv_ruleParameterExpression=ruleParameterExpression 
	 { $current=$iv_ruleParameterExpression.current; } 
	 EOF 
;

// Rule ParameterExpression
ruleParameterExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_5
    {
    	newLeafNode(otherlv_0, grammarAccess.getParameterExpressionAccess().getColonKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getParameterExpressionAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParameterExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
))
;







// Entry rule entryRuleStringFunction
entryRuleStringFunction returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getStringFunctionRule()); }
	 iv_ruleStringFunction=ruleStringFunction 
	 { $current=$iv_ruleStringFunction.current; } 
	 EOF 
;

// Rule StringFunction
ruleStringFunction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getStringFunctionAccess().getNameStringFunctionNameParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleStringFunctionName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStringFunctionRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"StringFunctionName");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_1=KEYWORD_1
    {
    	newLeafNode(otherlv_1, grammarAccess.getStringFunctionAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStringFunctionAccess().getParamsVariableParserRuleCall_2_0()); 
	    }
		lv_params_2_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStringFunctionRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_2_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_3=KEYWORD_3
    {
    	newLeafNode(otherlv_3, grammarAccess.getStringFunctionAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStringFunctionAccess().getParamsVariableParserRuleCall_3_1_0()); 
	    }
		lv_params_4_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStringFunctionRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_4_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
))
	otherlv_5=KEYWORD_2
    {
    	newLeafNode(otherlv_5, grammarAccess.getStringFunctionAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleStringFunctionName
entryRuleStringFunctionName returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getStringFunctionNameRule()); } 
	 iv_ruleStringFunctionName=ruleStringFunctionName 
	 { $current=$iv_ruleStringFunctionName.current.getText(); }  
	 EOF 
;

// Rule StringFunctionName
ruleStringFunctionName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=KEYWORD_52 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStringFunctionNameAccess().getCONCATKeyword_0()); 
    }

    |
	kw=KEYWORD_64 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStringFunctionNameAccess().getSUBSTRINGKeyword_1()); 
    }

    |
	kw=KEYWORD_47 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStringFunctionNameAccess().getLOWERKeyword_2()); 
    }

    |
	kw=KEYWORD_50 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStringFunctionNameAccess().getUPPERKeyword_3()); 
    }

    |
	kw=KEYWORD_57 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStringFunctionNameAccess().getLENGTHKeyword_4()); 
    }

    |
	kw=KEYWORD_58 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStringFunctionNameAccess().getLOCATEKeyword_5()); 
    }
)
    ;





// Entry rule entryRuleNumericFunction
entryRuleNumericFunction returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getNumericFunctionRule()); }
	 iv_ruleNumericFunction=ruleNumericFunction 
	 { $current=$iv_ruleNumericFunction.current; } 
	 EOF 
;

// Rule NumericFunction
ruleNumericFunction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getNumericFunctionAccess().getNameNumericFunctionNameParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleNumericFunctionName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNumericFunctionRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"NumericFunctionName");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_1=KEYWORD_1
    {
    	newLeafNode(otherlv_1, grammarAccess.getNumericFunctionAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNumericFunctionAccess().getParamsVariableParserRuleCall_2_0()); 
	    }
		lv_params_2_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNumericFunctionRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_2_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_3=KEYWORD_3
    {
    	newLeafNode(otherlv_3, grammarAccess.getNumericFunctionAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNumericFunctionAccess().getParamsVariableParserRuleCall_3_1_0()); 
	    }
		lv_params_4_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNumericFunctionRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_4_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
))
	otherlv_5=KEYWORD_2
    {
    	newLeafNode(otherlv_5, grammarAccess.getNumericFunctionAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleNumericFunctionName
entryRuleNumericFunctionName returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getNumericFunctionNameRule()); } 
	 iv_ruleNumericFunctionName=ruleNumericFunctionName 
	 { $current=$iv_ruleNumericFunctionName.current.getText(); }  
	 EOF 
;

// Rule NumericFunctionName
ruleNumericFunctionName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=KEYWORD_18 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNumericFunctionNameAccess().getABSKeyword_0()); 
    }

    |
	kw=KEYWORD_39 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNumericFunctionNameAccess().getSQRTKeyword_1()); 
    }

    |
	kw=KEYWORD_26 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNumericFunctionNameAccess().getMODKeyword_2()); 
    }

    |
	kw=KEYWORD_37 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNumericFunctionNameAccess().getSIZEKeyword_3()); 
    }
)
    ;







// Entry rule entryRuleValue
entryRuleValue returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getValueRule()); }
	 iv_ruleValue=ruleValue 
	 { $current=$iv_ruleValue.current; } 
	 EOF 
;

// Rule Value
ruleValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getValueAccess().getIntegerExpressionParserRuleCall_0()); 
    }
    this_IntegerExpression_0=ruleIntegerExpression
    {
        $current = $this_IntegerExpression_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getValueAccess().getStringExpressionParserRuleCall_1()); 
    }
    this_StringExpression_1=ruleStringExpression
    {
        $current = $this_StringExpression_1.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getValueAccess().getNullExpressionParserRuleCall_2()); 
    }
    this_NullExpression_2=ruleNullExpression
    {
        $current = $this_NullExpression_2.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getValueAccess().getBooleanExpressionParserRuleCall_3()); 
    }
    this_BooleanExpression_3=ruleBooleanExpression
    {
        $current = $this_BooleanExpression_3.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleIntegerExpression
entryRuleIntegerExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getIntegerExpressionRule()); }
	 iv_ruleIntegerExpression=ruleIntegerExpression 
	 { $current=$iv_ruleIntegerExpression.current; } 
	 EOF 
;

// Rule IntegerExpression
ruleIntegerExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_INT
		{
			newLeafNode(lv_value_0_0, grammarAccess.getIntegerExpressionAccess().getValueINTTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIntegerExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"INT");
	    }

)
)
;





// Entry rule entryRuleStringExpression
entryRuleStringExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getStringExpressionRule()); }
	 iv_ruleStringExpression=ruleStringExpression 
	 { $current=$iv_ruleStringExpression.current; } 
	 EOF 
;

// Rule StringExpression
ruleStringExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_STRING
		{
			newLeafNode(lv_value_0_0, grammarAccess.getStringExpressionAccess().getValueSTRINGTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStringExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"STRING");
	    }

)
)
;





// Entry rule entryRuleNullExpression
entryRuleNullExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getNullExpressionRule()); }
	 iv_ruleNullExpression=ruleNullExpression 
	 { $current=$iv_ruleNullExpression.current; } 
	 EOF 
;

// Rule NullExpression
ruleNullExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=
	KEYWORD_36
    {
        newLeafNode(lv_value_0_0, grammarAccess.getNullExpressionAccess().getValueNULLKeyword_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNullExpressionRule());
	        }
       		setWithLastConsumed($current, "value", lv_value_0_0, "NULL");
	    }

)
)
;





// Entry rule entryRuleBooleanExpression
entryRuleBooleanExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getBooleanExpressionRule()); }
	 iv_ruleBooleanExpression=ruleBooleanExpression 
	 { $current=$iv_ruleBooleanExpression.current; } 
	 EOF 
;

// Rule BooleanExpression
ruleBooleanExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
(
		lv_value_0_1=
	KEYWORD_40
    {
        newLeafNode(lv_value_0_1, grammarAccess.getBooleanExpressionAccess().getValueTRUEKeyword_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBooleanExpressionRule());
	        }
       		setWithLastConsumed($current, "value", true, null);
	    }

    |		lv_value_0_2=
	KEYWORD_43
    {
        newLeafNode(lv_value_0_2, grammarAccess.getBooleanExpressionAccess().getValueFALSEKeyword_0_1());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBooleanExpressionRule());
	        }
       		setWithLastConsumed($current, "value", true, null);
	    }

)

)
)
;





// Entry rule entryRuleQueryExpression
entryRuleQueryExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getQueryExpressionRule()); }
	 iv_ruleQueryExpression=ruleQueryExpression 
	 { $current=$iv_ruleQueryExpression.current; } 
	 EOF 
;

// Rule QueryExpression
ruleQueryExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_1
    {
    	newLeafNode(otherlv_0, grammarAccess.getQueryExpressionAccess().getLeftParenthesisKeyword_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getQueryExpressionAccess().getSelectStatementParserRuleCall_1()); 
    }
    this_SelectStatement_1=ruleSelectStatement
    {
        $current = $this_SelectStatement_1.current;
        afterParserOrEnumRuleCall();
    }

	otherlv_2=KEYWORD_2
    {
    	newLeafNode(otherlv_2, grammarAccess.getQueryExpressionAccess().getRightParenthesisKeyword_2());
    }
)
;





// Rule Operator
ruleOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((    enumLiteral_0=KEYWORD_6
    {
        $current = grammarAccess.getOperatorAccess().getLessThenEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getOperatorAccess().getLessThenEnumLiteralDeclaration_0()); 
    }
)
    |(    enumLiteral_1=KEYWORD_8
    {
        $current = grammarAccess.getOperatorAccess().getGreaterThenEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getOperatorAccess().getGreaterThenEnumLiteralDeclaration_1()); 
    }
)
    |(    enumLiteral_2=KEYWORD_10
    {
        $current = grammarAccess.getOperatorAccess().getLessEqualEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getOperatorAccess().getLessEqualEnumLiteralDeclaration_2()); 
    }
)
    |(    enumLiteral_3=KEYWORD_11
    {
        $current = grammarAccess.getOperatorAccess().getGreaterEqualEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getOperatorAccess().getGreaterEqualEnumLiteralDeclaration_3()); 
    }
)
    |(    enumLiteral_4=KEYWORD_7
    {
        $current = grammarAccess.getOperatorAccess().getEqualEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getOperatorAccess().getEqualEnumLiteralDeclaration_4()); 
    }
)
    |(    enumLiteral_5=KEYWORD_9
    {
        $current = grammarAccess.getOperatorAccess().getNotEqualEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getOperatorAccess().getNotEqualEnumLiteralDeclaration_5()); 
    }
));



