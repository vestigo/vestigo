/*
* generated by Xtext
*/

package org.nightlabs.vestigo.xtext.jdoql.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class JDOQLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class SingleStringJDOQLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SingleStringJDOQL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSelectClauseAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSelectClauseSelectClauseParserRuleCall_0_0 = (RuleCall)cSelectClauseAssignment_0.eContents().get(0);
		private final Assignment cFromClauseAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFromClauseFromClauseParserRuleCall_1_0 = (RuleCall)cFromClauseAssignment_1.eContents().get(0);
		private final Assignment cWhereClauseAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cWhereClauseWhereClauseParserRuleCall_2_0 = (RuleCall)cWhereClauseAssignment_2.eContents().get(0);
		private final Assignment cVariablesClauseAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVariablesClauseVariablesClauseParserRuleCall_3_0 = (RuleCall)cVariablesClauseAssignment_3.eContents().get(0);
		private final Assignment cParametersClauseAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cParametersClauseParametersClauseParserRuleCall_4_0 = (RuleCall)cParametersClauseAssignment_4.eContents().get(0);
		private final Assignment cImportClauseAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cImportClauseImportClauseParserRuleCall_5_0 = (RuleCall)cImportClauseAssignment_5.eContents().get(0);
		private final Assignment cGroupByClauseAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cGroupByClauseGroupByClauseParserRuleCall_6_0 = (RuleCall)cGroupByClauseAssignment_6.eContents().get(0);
		private final Assignment cOrderByClauseAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cOrderByClauseOrderByClauseParserRuleCall_7_0 = (RuleCall)cOrderByClauseAssignment_7.eContents().get(0);
		private final Assignment cRangeClauseAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cRangeClauseRangeClauseParserRuleCall_8_0 = (RuleCall)cRangeClauseAssignment_8.eContents().get(0);
		
		//SingleStringJDOQL:
		//	selectClause=SelectClause fromClause=FromClause whereClause=WhereClause? variablesClause=VariablesClause?
		//	parametersClause=ParametersClause? importClause=ImportClause? groupByClause=GroupByClause?
		//	orderByClause=OrderByClause? rangeClause=RangeClause?;
		public ParserRule getRule() { return rule; }

		//selectClause=SelectClause fromClause=FromClause whereClause=WhereClause? variablesClause=VariablesClause?
		//parametersClause=ParametersClause? importClause=ImportClause? groupByClause=GroupByClause? orderByClause=OrderByClause?
		//rangeClause=RangeClause?
		public Group getGroup() { return cGroup; }

		//selectClause=SelectClause
		public Assignment getSelectClauseAssignment_0() { return cSelectClauseAssignment_0; }

		//SelectClause
		public RuleCall getSelectClauseSelectClauseParserRuleCall_0_0() { return cSelectClauseSelectClauseParserRuleCall_0_0; }

		//fromClause=FromClause
		public Assignment getFromClauseAssignment_1() { return cFromClauseAssignment_1; }

		//FromClause
		public RuleCall getFromClauseFromClauseParserRuleCall_1_0() { return cFromClauseFromClauseParserRuleCall_1_0; }

		//whereClause=WhereClause?
		public Assignment getWhereClauseAssignment_2() { return cWhereClauseAssignment_2; }

		//WhereClause
		public RuleCall getWhereClauseWhereClauseParserRuleCall_2_0() { return cWhereClauseWhereClauseParserRuleCall_2_0; }

		//variablesClause=VariablesClause?
		public Assignment getVariablesClauseAssignment_3() { return cVariablesClauseAssignment_3; }

		//VariablesClause
		public RuleCall getVariablesClauseVariablesClauseParserRuleCall_3_0() { return cVariablesClauseVariablesClauseParserRuleCall_3_0; }

		//parametersClause=ParametersClause?
		public Assignment getParametersClauseAssignment_4() { return cParametersClauseAssignment_4; }

		//ParametersClause
		public RuleCall getParametersClauseParametersClauseParserRuleCall_4_0() { return cParametersClauseParametersClauseParserRuleCall_4_0; }

		//importClause=ImportClause?
		public Assignment getImportClauseAssignment_5() { return cImportClauseAssignment_5; }

		//ImportClause
		public RuleCall getImportClauseImportClauseParserRuleCall_5_0() { return cImportClauseImportClauseParserRuleCall_5_0; }

		//groupByClause=GroupByClause?
		public Assignment getGroupByClauseAssignment_6() { return cGroupByClauseAssignment_6; }

		//GroupByClause
		public RuleCall getGroupByClauseGroupByClauseParserRuleCall_6_0() { return cGroupByClauseGroupByClauseParserRuleCall_6_0; }

		//orderByClause=OrderByClause?
		public Assignment getOrderByClauseAssignment_7() { return cOrderByClauseAssignment_7; }

		//OrderByClause
		public RuleCall getOrderByClauseOrderByClauseParserRuleCall_7_0() { return cOrderByClauseOrderByClauseParserRuleCall_7_0; }

		//rangeClause=RangeClause?
		public Assignment getRangeClauseAssignment_8() { return cRangeClauseAssignment_8; }

		//RangeClause
		public RuleCall getRangeClauseRangeClauseParserRuleCall_8_0() { return cRangeClauseRangeClauseParserRuleCall_8_0; }
	}

	public class SubqueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Subquery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSelectClauseAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSelectClauseSubquerySelectClauseParserRuleCall_0_0 = (RuleCall)cSelectClauseAssignment_0.eContents().get(0);
		private final Assignment cFromClauseAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFromClauseSubqueryFromClauseParserRuleCall_1_0 = (RuleCall)cFromClauseAssignment_1.eContents().get(0);
		private final Assignment cWhereClauseAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cWhereClauseWhereClauseParserRuleCall_2_0 = (RuleCall)cWhereClauseAssignment_2.eContents().get(0);
		private final Assignment cVariablesClauseAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVariablesClauseVariablesClauseParserRuleCall_3_0 = (RuleCall)cVariablesClauseAssignment_3.eContents().get(0);
		private final Assignment cParametersClauseAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cParametersClauseParametersClauseParserRuleCall_4_0 = (RuleCall)cParametersClauseAssignment_4.eContents().get(0);
		private final Assignment cImportClauseAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cImportClauseImportClauseParserRuleCall_5_0 = (RuleCall)cImportClauseAssignment_5.eContents().get(0);
		
		//Subquery:
		//	selectClause=SubquerySelectClause fromClause=SubqueryFromClause whereClause=WhereClause?
		//	variablesClause=VariablesClause? parametersClause=ParametersClause? importClause=ImportClause?;
		public ParserRule getRule() { return rule; }

		//selectClause=SubquerySelectClause fromClause=SubqueryFromClause whereClause=WhereClause?
		//variablesClause=VariablesClause? parametersClause=ParametersClause? importClause=ImportClause?
		public Group getGroup() { return cGroup; }

		//selectClause=SubquerySelectClause
		public Assignment getSelectClauseAssignment_0() { return cSelectClauseAssignment_0; }

		//SubquerySelectClause
		public RuleCall getSelectClauseSubquerySelectClauseParserRuleCall_0_0() { return cSelectClauseSubquerySelectClauseParserRuleCall_0_0; }

		//fromClause=SubqueryFromClause
		public Assignment getFromClauseAssignment_1() { return cFromClauseAssignment_1; }

		//SubqueryFromClause
		public RuleCall getFromClauseSubqueryFromClauseParserRuleCall_1_0() { return cFromClauseSubqueryFromClauseParserRuleCall_1_0; }

		//whereClause=WhereClause?
		public Assignment getWhereClauseAssignment_2() { return cWhereClauseAssignment_2; }

		//WhereClause
		public RuleCall getWhereClauseWhereClauseParserRuleCall_2_0() { return cWhereClauseWhereClauseParserRuleCall_2_0; }

		//variablesClause=VariablesClause?
		public Assignment getVariablesClauseAssignment_3() { return cVariablesClauseAssignment_3; }

		//VariablesClause
		public RuleCall getVariablesClauseVariablesClauseParserRuleCall_3_0() { return cVariablesClauseVariablesClauseParserRuleCall_3_0; }

		//parametersClause=ParametersClause?
		public Assignment getParametersClauseAssignment_4() { return cParametersClauseAssignment_4; }

		//ParametersClause
		public RuleCall getParametersClauseParametersClauseParserRuleCall_4_0() { return cParametersClauseParametersClauseParserRuleCall_4_0; }

		//importClause=ImportClause?
		public Assignment getImportClauseAssignment_5() { return cImportClauseAssignment_5; }

		//ImportClause
		public RuleCall getImportClauseImportClauseParserRuleCall_5_0() { return cImportClauseImportClauseParserRuleCall_5_0; }
	}

	public class SelectClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SelectClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSelectClauseAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSELECTKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIsUniqueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cIsUniqueUNIQUEKeyword_2_0 = (Keyword)cIsUniqueAssignment_2.eContents().get(0);
		private final Assignment cResultClauseAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cResultClauseResultClauseParserRuleCall_3_0 = (RuleCall)cResultClauseAssignment_3.eContents().get(0);
		private final Assignment cIntoClauseAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cIntoClauseIntoClauseParserRuleCall_4_0 = (RuleCall)cIntoClauseAssignment_4.eContents().get(0);
		
		//SelectClause:
		//	{SelectClause} "SELECT" isUnique?="UNIQUE"? resultClause=ResultClause? intoClause=IntoClause?;
		public ParserRule getRule() { return rule; }

		//{SelectClause} "SELECT" isUnique?="UNIQUE"? resultClause=ResultClause? intoClause=IntoClause?
		public Group getGroup() { return cGroup; }

		//{SelectClause}
		public Action getSelectClauseAction_0() { return cSelectClauseAction_0; }

		//"SELECT"
		public Keyword getSELECTKeyword_1() { return cSELECTKeyword_1; }

		//isUnique?="UNIQUE"?
		public Assignment getIsUniqueAssignment_2() { return cIsUniqueAssignment_2; }

		//"UNIQUE"
		public Keyword getIsUniqueUNIQUEKeyword_2_0() { return cIsUniqueUNIQUEKeyword_2_0; }

		//resultClause=ResultClause?
		public Assignment getResultClauseAssignment_3() { return cResultClauseAssignment_3; }

		//ResultClause
		public RuleCall getResultClauseResultClauseParserRuleCall_3_0() { return cResultClauseResultClauseParserRuleCall_3_0; }

		//intoClause=IntoClause?
		public Assignment getIntoClauseAssignment_4() { return cIntoClauseAssignment_4; }

		//IntoClause
		public RuleCall getIntoClauseIntoClauseParserRuleCall_4_0() { return cIntoClauseIntoClauseParserRuleCall_4_0; }
	}

	public class SubquerySelectClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SubquerySelectClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSelectClauseAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSELECTKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIsUniqueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cIsUniqueUNIQUEKeyword_2_0 = (Keyword)cIsUniqueAssignment_2.eContents().get(0);
		private final Assignment cResultClauseAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cResultClauseSubqueryResultClauseParserRuleCall_3_0 = (RuleCall)cResultClauseAssignment_3.eContents().get(0);
		private final Assignment cIntoClauseAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cIntoClauseIntoClauseParserRuleCall_4_0 = (RuleCall)cIntoClauseAssignment_4.eContents().get(0);
		
		//SubquerySelectClause:
		//	{SelectClause} "SELECT" isUnique?="UNIQUE"? resultClause=SubqueryResultClause? intoClause=IntoClause?;
		public ParserRule getRule() { return rule; }

		//{SelectClause} "SELECT" isUnique?="UNIQUE"? resultClause=SubqueryResultClause? intoClause=IntoClause?
		public Group getGroup() { return cGroup; }

		//{SelectClause}
		public Action getSelectClauseAction_0() { return cSelectClauseAction_0; }

		//"SELECT"
		public Keyword getSELECTKeyword_1() { return cSELECTKeyword_1; }

		//isUnique?="UNIQUE"?
		public Assignment getIsUniqueAssignment_2() { return cIsUniqueAssignment_2; }

		//"UNIQUE"
		public Keyword getIsUniqueUNIQUEKeyword_2_0() { return cIsUniqueUNIQUEKeyword_2_0; }

		//resultClause=SubqueryResultClause?
		public Assignment getResultClauseAssignment_3() { return cResultClauseAssignment_3; }

		//SubqueryResultClause
		public RuleCall getResultClauseSubqueryResultClauseParserRuleCall_3_0() { return cResultClauseSubqueryResultClauseParserRuleCall_3_0; }

		//intoClause=IntoClause?
		public Assignment getIntoClauseAssignment_4() { return cIntoClauseAssignment_4; }

		//IntoClause
		public RuleCall getIntoClauseIntoClauseParserRuleCall_4_0() { return cIntoClauseIntoClauseParserRuleCall_4_0; }
	}

	public class ResultClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ResultClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsDistinctAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsDistinctDISTINCTKeyword_0_0 = (Keyword)cIsDistinctAssignment_0.eContents().get(0);
		private final Assignment cResultSpecsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cResultSpecsResultSpecParserRuleCall_1_0 = (RuleCall)cResultSpecsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cResultSpecsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cResultSpecsResultSpecParserRuleCall_2_1_0 = (RuleCall)cResultSpecsAssignment_2_1.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ResultClause:
		//	isDistinct?="DISTINCT"? resultSpecs+=ResultSpec ("," resultSpecs+=ResultSpec)* ","?;
		public ParserRule getRule() { return rule; }

		//isDistinct?="DISTINCT"? resultSpecs+=ResultSpec ("," resultSpecs+=ResultSpec)* ","?
		public Group getGroup() { return cGroup; }

		//isDistinct?="DISTINCT"?
		public Assignment getIsDistinctAssignment_0() { return cIsDistinctAssignment_0; }

		//"DISTINCT"
		public Keyword getIsDistinctDISTINCTKeyword_0_0() { return cIsDistinctDISTINCTKeyword_0_0; }

		//resultSpecs+=ResultSpec
		public Assignment getResultSpecsAssignment_1() { return cResultSpecsAssignment_1; }

		//ResultSpec
		public RuleCall getResultSpecsResultSpecParserRuleCall_1_0() { return cResultSpecsResultSpecParserRuleCall_1_0; }

		//("," resultSpecs+=ResultSpec)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//resultSpecs+=ResultSpec
		public Assignment getResultSpecsAssignment_2_1() { return cResultSpecsAssignment_2_1; }

		//ResultSpec
		public RuleCall getResultSpecsResultSpecParserRuleCall_2_1_0() { return cResultSpecsResultSpecParserRuleCall_2_1_0; }

		//","?
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
	}

	public class SubqueryResultClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SubqueryResultClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsDistinctAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsDistinctDISTINCTKeyword_0_0 = (Keyword)cIsDistinctAssignment_0.eContents().get(0);
		private final Assignment cResultExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cResultExpressionConditionalOrExpressionParserRuleCall_1_0 = (RuleCall)cResultExpressionAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//SubqueryResultClause:
		//	isDistinct?="DISTINCT"? resultExpression=ConditionalOrExpression ","?;
		public ParserRule getRule() { return rule; }

		//isDistinct?="DISTINCT"? resultExpression=ConditionalOrExpression ","?
		public Group getGroup() { return cGroup; }

		//isDistinct?="DISTINCT"?
		public Assignment getIsDistinctAssignment_0() { return cIsDistinctAssignment_0; }

		//"DISTINCT"
		public Keyword getIsDistinctDISTINCTKeyword_0_0() { return cIsDistinctDISTINCTKeyword_0_0; }

		//resultExpression=ConditionalOrExpression
		public Assignment getResultExpressionAssignment_1() { return cResultExpressionAssignment_1; }

		//ConditionalOrExpression
		public RuleCall getResultExpressionConditionalOrExpressionParserRuleCall_1_0() { return cResultExpressionConditionalOrExpressionParserRuleCall_1_0; }

		//","?
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
	}

	public class IntoClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntoClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cINTOKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cResultClassNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cResultClassNameClassOrInterfaceNameParserRuleCall_1_0 = (RuleCall)cResultClassNameAssignment_1.eContents().get(0);
		
		//IntoClause:
		//	"INTO" resultClassName=ClassOrInterfaceName;
		public ParserRule getRule() { return rule; }

		//"INTO" resultClassName=ClassOrInterfaceName
		public Group getGroup() { return cGroup; }

		//"INTO"
		public Keyword getINTOKeyword_0() { return cINTOKeyword_0; }

		//resultClassName=ClassOrInterfaceName
		public Assignment getResultClassNameAssignment_1() { return cResultClassNameAssignment_1; }

		//ClassOrInterfaceName
		public RuleCall getResultClassNameClassOrInterfaceNameParserRuleCall_1_0() { return cResultClassNameClassOrInterfaceNameParserRuleCall_1_0; }
	}

	public class ResultSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ResultSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cConditionalOrExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cResultNamingAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cResultNamingResultNamingParserRuleCall_1_0 = (RuleCall)cResultNamingAssignment_1.eContents().get(0);
		
		//ResultSpec:
		//	ConditionalOrExpression resultNaming=ResultNaming?;
		public ParserRule getRule() { return rule; }

		//ConditionalOrExpression resultNaming=ResultNaming?
		public Group getGroup() { return cGroup; }

		//ConditionalOrExpression
		public RuleCall getConditionalOrExpressionParserRuleCall_0() { return cConditionalOrExpressionParserRuleCall_0; }

		//resultNaming=ResultNaming?
		public Assignment getResultNamingAssignment_1() { return cResultNamingAssignment_1; }

		//ResultNaming
		public RuleCall getResultNamingResultNamingParserRuleCall_1_0() { return cResultNamingResultNamingParserRuleCall_1_0; }
	}

	public class ResultNamingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ResultNaming");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cASKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdentifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdentifierIDTerminalRuleCall_1_0 = (RuleCall)cIdentifierAssignment_1.eContents().get(0);
		
		//ResultNaming:
		//	"AS" identifier=ID;
		public ParserRule getRule() { return rule; }

		//"AS" identifier=ID
		public Group getGroup() { return cGroup; }

		//"AS"
		public Keyword getASKeyword_0() { return cASKeyword_0; }

		//identifier=ID
		public Assignment getIdentifierAssignment_1() { return cIdentifierAssignment_1; }

		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_1_0() { return cIdentifierIDTerminalRuleCall_1_0; }
	}

	public class FromClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FromClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFROMKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCandidateClassNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCandidateClassNameCandidateClassNameParserRuleCall_1_0 = (RuleCall)cCandidateClassNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cIsExcludeSubclassesAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cIsExcludeSubclassesEXCLUDEKeyword_2_0_0 = (Keyword)cIsExcludeSubclassesAssignment_2_0.eContents().get(0);
		private final Keyword cSUBCLASSESKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		
		//FromClause:
		//	"FROM" candidateClassName=CandidateClassName (isExcludeSubclasses?="EXCLUDE" "SUBCLASSES")?;
		public ParserRule getRule() { return rule; }

		//"FROM" candidateClassName=CandidateClassName (isExcludeSubclasses?="EXCLUDE" "SUBCLASSES")?
		public Group getGroup() { return cGroup; }

		//"FROM"
		public Keyword getFROMKeyword_0() { return cFROMKeyword_0; }

		//candidateClassName=CandidateClassName
		public Assignment getCandidateClassNameAssignment_1() { return cCandidateClassNameAssignment_1; }

		//CandidateClassName
		public RuleCall getCandidateClassNameCandidateClassNameParserRuleCall_1_0() { return cCandidateClassNameCandidateClassNameParserRuleCall_1_0; }

		//(isExcludeSubclasses?="EXCLUDE" "SUBCLASSES")?
		public Group getGroup_2() { return cGroup_2; }

		//isExcludeSubclasses?="EXCLUDE"
		public Assignment getIsExcludeSubclassesAssignment_2_0() { return cIsExcludeSubclassesAssignment_2_0; }

		//"EXCLUDE"
		public Keyword getIsExcludeSubclassesEXCLUDEKeyword_2_0_0() { return cIsExcludeSubclassesEXCLUDEKeyword_2_0_0; }

		//"SUBCLASSES"
		public Keyword getSUBCLASSESKeyword_2_1() { return cSUBCLASSESKeyword_2_1; }
	}

	public class SubqueryFromClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SubqueryFromClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFROMKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cThisKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cFieldAccessExpressionAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cFieldAccessExpressionFieldAccessExpressionParserRuleCall_1_0_2_0 = (RuleCall)cFieldAccessExpressionAssignment_1_0_2.eContents().get(0);
		private final Assignment cCandidateClassNameAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cCandidateClassNameCandidateClassNameParserRuleCall_1_1_0 = (RuleCall)cCandidateClassNameAssignment_1_1.eContents().get(0);
		private final Assignment cAliasAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAliasAliasParserRuleCall_2_0 = (RuleCall)cAliasAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cIsExcludeSubclassesAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Keyword cIsExcludeSubclassesEXCLUDEKeyword_3_0_0 = (Keyword)cIsExcludeSubclassesAssignment_3_0.eContents().get(0);
		private final Keyword cSUBCLASSESKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		
		//SubqueryFromClause: // The parser cannot differentiate between a candidate-class and a field-access. The only reason
		//// why we have to add the field-access-expression separately is that "this" otherwise is a key-word deemed
		//// at the wrong location. Hence we add it now explicitely to the right location ;-) Marco :-)
		//	"FROM" ("this" "." fieldAccessExpression=FieldAccessExpression | candidateClassName=CandidateClassName) alias=Alias?
		//	(isExcludeSubclasses?="EXCLUDE" "SUBCLASSES")?;
		public ParserRule getRule() { return rule; }

		//// The parser cannot differentiate between a candidate-class and a field-access. The only reason
		//// why we have to add the field-access-expression separately is that "this" otherwise is a key-word deemed
		//// at the wrong location. Hence we add it now explicitely to the right location ;-) Marco :-)
		//"FROM" ("this" "." fieldAccessExpression=FieldAccessExpression | candidateClassName=CandidateClassName) alias=Alias?
		//(isExcludeSubclasses?="EXCLUDE" "SUBCLASSES")?
		public Group getGroup() { return cGroup; }

		//// The parser cannot differentiate between a candidate-class and a field-access. The only reason
		//// why we have to add the field-access-expression separately is that "this" otherwise is a key-word deemed
		//// at the wrong location. Hence we add it now explicitely to the right location ;-) Marco :-)
		//"FROM"
		public Keyword getFROMKeyword_0() { return cFROMKeyword_0; }

		//"this" "." fieldAccessExpression=FieldAccessExpression | candidateClassName=CandidateClassName
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"this" "." fieldAccessExpression=FieldAccessExpression
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"this"
		public Keyword getThisKeyword_1_0_0() { return cThisKeyword_1_0_0; }

		//"."
		public Keyword getFullStopKeyword_1_0_1() { return cFullStopKeyword_1_0_1; }

		//fieldAccessExpression=FieldAccessExpression
		public Assignment getFieldAccessExpressionAssignment_1_0_2() { return cFieldAccessExpressionAssignment_1_0_2; }

		//FieldAccessExpression
		public RuleCall getFieldAccessExpressionFieldAccessExpressionParserRuleCall_1_0_2_0() { return cFieldAccessExpressionFieldAccessExpressionParserRuleCall_1_0_2_0; }

		//candidateClassName=CandidateClassName
		public Assignment getCandidateClassNameAssignment_1_1() { return cCandidateClassNameAssignment_1_1; }

		//CandidateClassName
		public RuleCall getCandidateClassNameCandidateClassNameParserRuleCall_1_1_0() { return cCandidateClassNameCandidateClassNameParserRuleCall_1_1_0; }

		//alias=Alias?
		public Assignment getAliasAssignment_2() { return cAliasAssignment_2; }

		//Alias
		public RuleCall getAliasAliasParserRuleCall_2_0() { return cAliasAliasParserRuleCall_2_0; }

		//(isExcludeSubclasses?="EXCLUDE" "SUBCLASSES")?
		public Group getGroup_3() { return cGroup_3; }

		//isExcludeSubclasses?="EXCLUDE"
		public Assignment getIsExcludeSubclassesAssignment_3_0() { return cIsExcludeSubclassesAssignment_3_0; }

		//"EXCLUDE"
		public Keyword getIsExcludeSubclassesEXCLUDEKeyword_3_0_0() { return cIsExcludeSubclassesEXCLUDEKeyword_3_0_0; }

		//"SUBCLASSES"
		public Keyword getSUBCLASSESKeyword_3_1() { return cSUBCLASSESKeyword_3_1; }
	}

	public class AliasElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Alias");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cASKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdentifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdentifierIDTerminalRuleCall_1_0 = (RuleCall)cIdentifierAssignment_1.eContents().get(0);
		
		//Alias:
		//	"AS"? identifier= // in contrast to a ResultNaming, the 'AS' is optional here.
		//	ID;
		public ParserRule getRule() { return rule; }

		//"AS"? identifier= // in contrast to a ResultNaming, the 'AS' is optional here.
		//ID
		public Group getGroup() { return cGroup; }

		//"AS"?
		public Keyword getASKeyword_0() { return cASKeyword_0; }

		//identifier= // in contrast to a ResultNaming, the 'AS' is optional here.
		//ID
		public Assignment getIdentifierAssignment_1() { return cIdentifierAssignment_1; }

		//// in contrast to a ResultNaming, the 'AS' is optional here.
		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_1_0() { return cIdentifierIDTerminalRuleCall_1_0; }
	}

	public class WhereClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WhereClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWHEREKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFilterAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFilterConditionalOrExpressionParserRuleCall_1_0 = (RuleCall)cFilterAssignment_1.eContents().get(0);
		
		//WhereClause:
		//	"WHERE" filter=ConditionalOrExpression;
		public ParserRule getRule() { return rule; }

		//"WHERE" filter=ConditionalOrExpression
		public Group getGroup() { return cGroup; }

		//"WHERE"
		public Keyword getWHEREKeyword_0() { return cWHEREKeyword_0; }

		//filter=ConditionalOrExpression
		public Assignment getFilterAssignment_1() { return cFilterAssignment_1; }

		//ConditionalOrExpression
		public RuleCall getFilterConditionalOrExpressionParserRuleCall_1_0() { return cFilterConditionalOrExpressionParserRuleCall_1_0; }
	}

	public class VariablesClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariablesClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVARIABLESKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariableDeclarationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariableDeclarationsVariableDeclarationParserRuleCall_1_0 = (RuleCall)cVariableDeclarationsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cVariableDeclarationsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cVariableDeclarationsVariableDeclarationParserRuleCall_2_1_0 = (RuleCall)cVariableDeclarationsAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//VariablesClause:
		//	"VARIABLES" variableDeclarations+=VariableDeclaration (";" variableDeclarations+=VariableDeclaration)* ";"?;
		public ParserRule getRule() { return rule; }

		//"VARIABLES" variableDeclarations+=VariableDeclaration (";" variableDeclarations+=VariableDeclaration)* ";"?
		public Group getGroup() { return cGroup; }

		//"VARIABLES"
		public Keyword getVARIABLESKeyword_0() { return cVARIABLESKeyword_0; }

		//variableDeclarations+=VariableDeclaration
		public Assignment getVariableDeclarationsAssignment_1() { return cVariableDeclarationsAssignment_1; }

		//VariableDeclaration
		public RuleCall getVariableDeclarationsVariableDeclarationParserRuleCall_1_0() { return cVariableDeclarationsVariableDeclarationParserRuleCall_1_0; }

		//(";" variableDeclarations+=VariableDeclaration)*
		public Group getGroup_2() { return cGroup_2; }

		//";"
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }

		//variableDeclarations+=VariableDeclaration
		public Assignment getVariableDeclarationsAssignment_2_1() { return cVariableDeclarationsAssignment_2_1; }

		//VariableDeclaration
		public RuleCall getVariableDeclarationsVariableDeclarationParserRuleCall_2_1_0() { return cVariableDeclarationsVariableDeclarationParserRuleCall_2_1_0; }

		//";"?
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class VariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cVariableNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariableNameVariableNameParserRuleCall_1_0 = (RuleCall)cVariableNameAssignment_1.eContents().get(0);
		
		//VariableDeclaration:
		//	type=Type variableName=VariableName;
		public ParserRule getRule() { return rule; }

		//type=Type variableName=VariableName
		public Group getGroup() { return cGroup; }

		//type=Type
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0() { return cTypeTypeParserRuleCall_0_0; }

		//variableName=VariableName
		public Assignment getVariableNameAssignment_1() { return cVariableNameAssignment_1; }

		//VariableName
		public RuleCall getVariableNameVariableNameParserRuleCall_1_0() { return cVariableNameVariableNameParserRuleCall_1_0; }
	}

	public class VariableNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableName");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//VariableName:
		//	ID;
		public ParserRule getRule() { return rule; }

		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}

	public class ParametersClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParametersClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPARAMETERSKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cParameterDeclarationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParameterDeclarationsParameterDeclarationParserRuleCall_1_0 = (RuleCall)cParameterDeclarationsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParameterDeclarationsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParameterDeclarationsParameterDeclarationParserRuleCall_2_1_0 = (RuleCall)cParameterDeclarationsAssignment_2_1.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ParametersClause:
		//	"PARAMETERS" parameterDeclarations+=ParameterDeclaration ("," parameterDeclarations+=ParameterDeclaration)* ","?;
		public ParserRule getRule() { return rule; }

		//"PARAMETERS" parameterDeclarations+=ParameterDeclaration ("," parameterDeclarations+=ParameterDeclaration)* ","?
		public Group getGroup() { return cGroup; }

		//"PARAMETERS"
		public Keyword getPARAMETERSKeyword_0() { return cPARAMETERSKeyword_0; }

		//parameterDeclarations+=ParameterDeclaration
		public Assignment getParameterDeclarationsAssignment_1() { return cParameterDeclarationsAssignment_1; }

		//ParameterDeclaration
		public RuleCall getParameterDeclarationsParameterDeclarationParserRuleCall_1_0() { return cParameterDeclarationsParameterDeclarationParserRuleCall_1_0; }

		//("," parameterDeclarations+=ParameterDeclaration)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//parameterDeclarations+=ParameterDeclaration
		public Assignment getParameterDeclarationsAssignment_2_1() { return cParameterDeclarationsAssignment_2_1; }

		//ParameterDeclaration
		public RuleCall getParameterDeclarationsParameterDeclarationParserRuleCall_2_1_0() { return cParameterDeclarationsParameterDeclarationParserRuleCall_2_1_0; }

		//","?
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
	}

	public class ParameterDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cDeclaredParameterNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDeclaredParameterNameDeclaredParameterNameParserRuleCall_1_0 = (RuleCall)cDeclaredParameterNameAssignment_1.eContents().get(0);
		
		//ParameterDeclaration:
		//	type=Type declaredParameterName=DeclaredParameterName;
		public ParserRule getRule() { return rule; }

		//type=Type declaredParameterName=DeclaredParameterName
		public Group getGroup() { return cGroup; }

		//type=Type
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0() { return cTypeTypeParserRuleCall_0_0; }

		//declaredParameterName=DeclaredParameterName
		public Assignment getDeclaredParameterNameAssignment_1() { return cDeclaredParameterNameAssignment_1; }

		//DeclaredParameterName
		public RuleCall getDeclaredParameterNameDeclaredParameterNameParserRuleCall_1_0() { return cDeclaredParameterNameDeclaredParameterNameParserRuleCall_1_0; }
	}

	public class DeclaredParameterNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DeclaredParameterName");
		private final RuleCall cParameterNameParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//DeclaredParameterName:
		//	ParameterName;
		public ParserRule getRule() { return rule; }

		//ParameterName
		public RuleCall getParameterNameParserRuleCall() { return cParameterNameParserRuleCall; }
	}

	public class ParameterNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterName");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ParameterName:
		//	ID;
		public ParserRule getRule() { return rule; }

		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}

	public class ImportClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImportClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportDeclarationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportDeclarationsImportDeclarationParserRuleCall_0_0 = (RuleCall)cImportDeclarationsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cImportDeclarationsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cImportDeclarationsImportDeclarationParserRuleCall_1_1_0 = (RuleCall)cImportDeclarationsAssignment_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ImportClause:
		//	importDeclarations+=ImportDeclaration (";" importDeclarations+=ImportDeclaration)* ";"?;
		public ParserRule getRule() { return rule; }

		//importDeclarations+=ImportDeclaration (";" importDeclarations+=ImportDeclaration)* ";"?
		public Group getGroup() { return cGroup; }

		//importDeclarations+=ImportDeclaration
		public Assignment getImportDeclarationsAssignment_0() { return cImportDeclarationsAssignment_0; }

		//ImportDeclaration
		public RuleCall getImportDeclarationsImportDeclarationParserRuleCall_0_0() { return cImportDeclarationsImportDeclarationParserRuleCall_0_0; }

		//(";" importDeclarations+=ImportDeclaration)*
		public Group getGroup_1() { return cGroup_1; }

		//";"
		public Keyword getSemicolonKeyword_1_0() { return cSemicolonKeyword_1_0; }

		//importDeclarations+=ImportDeclaration
		public Assignment getImportDeclarationsAssignment_1_1() { return cImportDeclarationsAssignment_1_1; }

		//ImportDeclaration
		public RuleCall getImportDeclarationsImportDeclarationParserRuleCall_1_1_0() { return cImportDeclarationsImportDeclarationParserRuleCall_1_1_0; }

		//";"?
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class ImportDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImportDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cQualifiedIdentifierParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//ImportDeclaration:
		//	"import" QualifiedIdentifier;
		public ParserRule getRule() { return rule; }

		//"import" QualifiedIdentifier
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//QualifiedIdentifier
		public RuleCall getQualifiedIdentifierParserRuleCall_1() { return cQualifiedIdentifierParserRuleCall_1; }
	}

	public class GroupByClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GroupByClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGROUPKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cBYKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cGroupingAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cGroupingConditionalOrExpressionParserRuleCall_2_0 = (RuleCall)cGroupingAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cGroupingAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cGroupingConditionalOrExpressionParserRuleCall_3_1_0 = (RuleCall)cGroupingAssignment_3_1.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cHavingClauseAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cHavingClauseHavingClauseParserRuleCall_5_0 = (RuleCall)cHavingClauseAssignment_5.eContents().get(0);
		
		//GroupByClause:
		//	"GROUP" "BY" grouping+=ConditionalOrExpression ("," grouping+=ConditionalOrExpression)* ","?
		//	havingClause=HavingClause?;
		public ParserRule getRule() { return rule; }

		//"GROUP" "BY" grouping+=ConditionalOrExpression ("," grouping+=ConditionalOrExpression)* ","? havingClause=HavingClause?
		public Group getGroup() { return cGroup; }

		//"GROUP"
		public Keyword getGROUPKeyword_0() { return cGROUPKeyword_0; }

		//"BY"
		public Keyword getBYKeyword_1() { return cBYKeyword_1; }

		//grouping+=ConditionalOrExpression
		public Assignment getGroupingAssignment_2() { return cGroupingAssignment_2; }

		//ConditionalOrExpression
		public RuleCall getGroupingConditionalOrExpressionParserRuleCall_2_0() { return cGroupingConditionalOrExpressionParserRuleCall_2_0; }

		//("," grouping+=ConditionalOrExpression)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//grouping+=ConditionalOrExpression
		public Assignment getGroupingAssignment_3_1() { return cGroupingAssignment_3_1; }

		//ConditionalOrExpression
		public RuleCall getGroupingConditionalOrExpressionParserRuleCall_3_1_0() { return cGroupingConditionalOrExpressionParserRuleCall_3_1_0; }

		//","?
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }

		//havingClause=HavingClause?
		public Assignment getHavingClauseAssignment_5() { return cHavingClauseAssignment_5; }

		//HavingClause
		public RuleCall getHavingClauseHavingClauseParserRuleCall_5_0() { return cHavingClauseHavingClauseParserRuleCall_5_0; }
	}

	public class HavingClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HavingClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHAVINGKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cHavingAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cHavingConditionalOrExpressionParserRuleCall_1_0 = (RuleCall)cHavingAssignment_1.eContents().get(0);
		
		//HavingClause:
		//	"HAVING" having=ConditionalOrExpression;
		public ParserRule getRule() { return rule; }

		//"HAVING" having=ConditionalOrExpression
		public Group getGroup() { return cGroup; }

		//"HAVING"
		public Keyword getHAVINGKeyword_0() { return cHAVINGKeyword_0; }

		//having=ConditionalOrExpression
		public Assignment getHavingAssignment_1() { return cHavingAssignment_1; }

		//ConditionalOrExpression
		public RuleCall getHavingConditionalOrExpressionParserRuleCall_1_0() { return cHavingConditionalOrExpressionParserRuleCall_1_0; }
	}

	public class OrderByClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrderByClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cORDERKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cBYKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOrderingAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOrderingOrderBySpecParserRuleCall_2_0 = (RuleCall)cOrderingAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cOrderingAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cOrderingOrderBySpecParserRuleCall_3_1_0 = (RuleCall)cOrderingAssignment_3_1.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//OrderByClause:
		//	"ORDER" "BY" ordering+=OrderBySpec ("," ordering+=OrderBySpec)* ","?;
		public ParserRule getRule() { return rule; }

		//"ORDER" "BY" ordering+=OrderBySpec ("," ordering+=OrderBySpec)* ","?
		public Group getGroup() { return cGroup; }

		//"ORDER"
		public Keyword getORDERKeyword_0() { return cORDERKeyword_0; }

		//"BY"
		public Keyword getBYKeyword_1() { return cBYKeyword_1; }

		//ordering+=OrderBySpec
		public Assignment getOrderingAssignment_2() { return cOrderingAssignment_2; }

		//OrderBySpec
		public RuleCall getOrderingOrderBySpecParserRuleCall_2_0() { return cOrderingOrderBySpecParserRuleCall_2_0; }

		//("," ordering+=OrderBySpec)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//ordering+=OrderBySpec
		public Assignment getOrderingAssignment_3_1() { return cOrderingAssignment_3_1; }

		//OrderBySpec
		public RuleCall getOrderingOrderBySpecParserRuleCall_3_1_0() { return cOrderingOrderBySpecParserRuleCall_3_1_0; }

		//","?
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
	}

	public class OrderBySpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrderBySpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cConditionalOrExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cDirectionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDirectionOrderByDirectionEnumRuleCall_1_0 = (RuleCall)cDirectionAssignment_1.eContents().get(0);
		
		//OrderBySpec:
		//	ConditionalOrExpression direction=OrderByDirection;
		public ParserRule getRule() { return rule; }

		//ConditionalOrExpression direction=OrderByDirection
		public Group getGroup() { return cGroup; }

		//ConditionalOrExpression
		public RuleCall getConditionalOrExpressionParserRuleCall_0() { return cConditionalOrExpressionParserRuleCall_0; }

		//direction=OrderByDirection
		public Assignment getDirectionAssignment_1() { return cDirectionAssignment_1; }

		//OrderByDirection
		public RuleCall getDirectionOrderByDirectionEnumRuleCall_1_0() { return cDirectionOrderByDirectionEnumRuleCall_1_0; }
	}

	public class RangeClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RangeClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRANGEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStartAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStartConditionalOrExpressionParserRuleCall_1_0 = (RuleCall)cStartAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEndAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEndConditionalOrExpressionParserRuleCall_3_0 = (RuleCall)cEndAssignment_3.eContents().get(0);
		
		//RangeClause:
		//	"RANGE" start=ConditionalOrExpression "," end=ConditionalOrExpression;
		public ParserRule getRule() { return rule; }

		//"RANGE" start=ConditionalOrExpression "," end=ConditionalOrExpression
		public Group getGroup() { return cGroup; }

		//"RANGE"
		public Keyword getRANGEKeyword_0() { return cRANGEKeyword_0; }

		//start=ConditionalOrExpression
		public Assignment getStartAssignment_1() { return cStartAssignment_1; }

		//ConditionalOrExpression
		public RuleCall getStartConditionalOrExpressionParserRuleCall_1_0() { return cStartConditionalOrExpressionParserRuleCall_1_0; }

		//","
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }

		//end=ConditionalOrExpression
		public Assignment getEndAssignment_3() { return cEndAssignment_3; }

		//ConditionalOrExpression
		public RuleCall getEndConditionalOrExpressionParserRuleCall_3_0() { return cEndConditionalOrExpressionParserRuleCall_3_0; }
	}

	public class ConditionalOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConditionalOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cConditionalAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cConditionalOrExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightConditionalAndExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ConditionalOrExpression returns Expression:
		//	ConditionalAndExpression ({ConditionalOrExpression.left=current} "||" right=ConditionalAndExpression)*;
		public ParserRule getRule() { return rule; }

		//ConditionalAndExpression ({ConditionalOrExpression.left=current} "||" right=ConditionalAndExpression)*
		public Group getGroup() { return cGroup; }

		//ConditionalAndExpression
		public RuleCall getConditionalAndExpressionParserRuleCall_0() { return cConditionalAndExpressionParserRuleCall_0; }

		//({ConditionalOrExpression.left=current} "||" right=ConditionalAndExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{ConditionalOrExpression.left=current}
		public Action getConditionalOrExpressionLeftAction_1_0() { return cConditionalOrExpressionLeftAction_1_0; }

		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_1_1() { return cVerticalLineVerticalLineKeyword_1_1; }

		//right=ConditionalAndExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//ConditionalAndExpression
		public RuleCall getRightConditionalAndExpressionParserRuleCall_1_2_0() { return cRightConditionalAndExpressionParserRuleCall_1_2_0; }
	}

	public class ConditionalAndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConditionalAndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSimpleOrExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cConditionalAndExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAmpersandAmpersandKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightSimpleOrExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ConditionalAndExpression returns Expression:
		//	SimpleOrExpression ({ConditionalAndExpression.left=current} "&&" right=SimpleOrExpression)*;
		public ParserRule getRule() { return rule; }

		//SimpleOrExpression ({ConditionalAndExpression.left=current} "&&" right=SimpleOrExpression)*
		public Group getGroup() { return cGroup; }

		//SimpleOrExpression
		public RuleCall getSimpleOrExpressionParserRuleCall_0() { return cSimpleOrExpressionParserRuleCall_0; }

		//({ConditionalAndExpression.left=current} "&&" right=SimpleOrExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{ConditionalAndExpression.left=current}
		public Action getConditionalAndExpressionLeftAction_1_0() { return cConditionalAndExpressionLeftAction_1_0; }

		//"&&"
		public Keyword getAmpersandAmpersandKeyword_1_1() { return cAmpersandAmpersandKeyword_1_1; }

		//right=SimpleOrExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//SimpleOrExpression
		public RuleCall getRightSimpleOrExpressionParserRuleCall_1_2_0() { return cRightSimpleOrExpressionParserRuleCall_1_2_0; }
	}

	public class SimpleOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSimpleAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cSimpleOrExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cVerticalLineKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightSimpleAndExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//SimpleOrExpression returns Expression:
		//	SimpleAndExpression ({SimpleOrExpression.left=current} "|" right=SimpleAndExpression)*;
		public ParserRule getRule() { return rule; }

		//SimpleAndExpression ({SimpleOrExpression.left=current} "|" right=SimpleAndExpression)*
		public Group getGroup() { return cGroup; }

		//SimpleAndExpression
		public RuleCall getSimpleAndExpressionParserRuleCall_0() { return cSimpleAndExpressionParserRuleCall_0; }

		//({SimpleOrExpression.left=current} "|" right=SimpleAndExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{SimpleOrExpression.left=current}
		public Action getSimpleOrExpressionLeftAction_1_0() { return cSimpleOrExpressionLeftAction_1_0; }

		//"|"
		public Keyword getVerticalLineKeyword_1_1() { return cVerticalLineKeyword_1_1; }

		//right=SimpleAndExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//SimpleAndExpression
		public RuleCall getRightSimpleAndExpressionParserRuleCall_1_2_0() { return cRightSimpleAndExpressionParserRuleCall_1_2_0; }
	}

	public class SimpleAndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleAndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cComparisonOperatorExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cSimpleAndExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAmpersandKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightComparisonOperatorExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//SimpleAndExpression returns Expression:
		//	ComparisonOperatorExpression ({SimpleAndExpression.left=current} "&" right=ComparisonOperatorExpression)*;
		public ParserRule getRule() { return rule; }

		//ComparisonOperatorExpression ({SimpleAndExpression.left=current} "&" right=ComparisonOperatorExpression)*
		public Group getGroup() { return cGroup; }

		//ComparisonOperatorExpression
		public RuleCall getComparisonOperatorExpressionParserRuleCall_0() { return cComparisonOperatorExpressionParserRuleCall_0; }

		//({SimpleAndExpression.left=current} "&" right=ComparisonOperatorExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{SimpleAndExpression.left=current}
		public Action getSimpleAndExpressionLeftAction_1_0() { return cSimpleAndExpressionLeftAction_1_0; }

		//"&"
		public Keyword getAmpersandKeyword_1_1() { return cAmpersandKeyword_1_1; }

		//right=ComparisonOperatorExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//ComparisonOperatorExpression
		public RuleCall getRightComparisonOperatorExpressionParserRuleCall_1_2_0() { return cRightComparisonOperatorExpressionParserRuleCall_1_2_0; }
	}

	public class ComparisonOperatorExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComparisonOperatorExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAdditionExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cComparisonOperatorExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorComparisonOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAdditionExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ComparisonOperatorExpression returns Expression:
		//	AdditionExpression ({ComparisonOperatorExpression.left=current} operator=ComparisonOperator
		//	right=AdditionExpression)*;
		public ParserRule getRule() { return rule; }

		//AdditionExpression ({ComparisonOperatorExpression.left=current} operator=ComparisonOperator right=AdditionExpression)*
		public Group getGroup() { return cGroup; }

		//AdditionExpression
		public RuleCall getAdditionExpressionParserRuleCall_0() { return cAdditionExpressionParserRuleCall_0; }

		//({ComparisonOperatorExpression.left=current} operator=ComparisonOperator right=AdditionExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{ComparisonOperatorExpression.left=current}
		public Action getComparisonOperatorExpressionLeftAction_1_0() { return cComparisonOperatorExpressionLeftAction_1_0; }

		//operator=ComparisonOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//ComparisonOperator
		public RuleCall getOperatorComparisonOperatorEnumRuleCall_1_1_0() { return cOperatorComparisonOperatorEnumRuleCall_1_1_0; }

		//right=AdditionExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//AdditionExpression
		public RuleCall getRightAdditionExpressionParserRuleCall_1_2_0() { return cRightAdditionExpressionParserRuleCall_1_2_0; }
	}

	public class AdditionExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AdditionExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicationExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAdditionExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorAdditionOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightMultiplicationExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AdditionExpression returns Expression:
		//	MultiplicationExpression ({AdditionExpression.left=current} operator=AdditionOperator
		//	right=MultiplicationExpression)*;
		public ParserRule getRule() { return rule; }

		//MultiplicationExpression ({AdditionExpression.left=current} operator=AdditionOperator right=MultiplicationExpression)*
		public Group getGroup() { return cGroup; }

		//MultiplicationExpression
		public RuleCall getMultiplicationExpressionParserRuleCall_0() { return cMultiplicationExpressionParserRuleCall_0; }

		//({AdditionExpression.left=current} operator=AdditionOperator right=MultiplicationExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{AdditionExpression.left=current}
		public Action getAdditionExpressionLeftAction_1_0() { return cAdditionExpressionLeftAction_1_0; }

		//operator=AdditionOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//AdditionOperator
		public RuleCall getOperatorAdditionOperatorEnumRuleCall_1_1_0() { return cOperatorAdditionOperatorEnumRuleCall_1_1_0; }

		//right=MultiplicationExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//MultiplicationExpression
		public RuleCall getRightMultiplicationExpressionParserRuleCall_1_2_0() { return cRightMultiplicationExpressionParserRuleCall_1_2_0; }
	}

	public class MultiplicationExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MultiplicationExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMultiplicationExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorMultiplicationOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightUnaryExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//MultiplicationExpression returns Expression:
		//	UnaryExpression ({MultiplicationExpression.left=current} operator=MultiplicationOperator right=UnaryExpression)*;
		public ParserRule getRule() { return rule; }

		//UnaryExpression ({MultiplicationExpression.left=current} operator=MultiplicationOperator right=UnaryExpression)*
		public Group getGroup() { return cGroup; }

		//UnaryExpression
		public RuleCall getUnaryExpressionParserRuleCall_0() { return cUnaryExpressionParserRuleCall_0; }

		//({MultiplicationExpression.left=current} operator=MultiplicationOperator right=UnaryExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{MultiplicationExpression.left=current}
		public Action getMultiplicationExpressionLeftAction_1_0() { return cMultiplicationExpressionLeftAction_1_0; }

		//operator=MultiplicationOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//MultiplicationOperator
		public RuleCall getOperatorMultiplicationOperatorEnumRuleCall_1_1_0() { return cOperatorMultiplicationOperatorEnumRuleCall_1_1_0; }

		//right=UnaryExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//UnaryExpression
		public RuleCall getRightUnaryExpressionParserRuleCall_1_2_0() { return cRightUnaryExpressionParserRuleCall_1_2_0; }
	}

	public class UnaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cCastTypeAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cCastTypeTypeParserRuleCall_0_1_0 = (RuleCall)cCastTypeAssignment_0_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cRightAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cRightFieldAccessExpressionParserRuleCall_0_3_0 = (RuleCall)cRightAssignment_0_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cUnaryOperatorAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cUnaryOperatorUnaryOperatorEnumRuleCall_1_0_0 = (RuleCall)cUnaryOperatorAssignment_1_0.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightFieldAccessExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//UnaryExpression returns Expression:
		//	"(" castType=Type ")" right=FieldAccessExpression | unaryOperator=UnaryOperator? right=FieldAccessExpression;
		public ParserRule getRule() { return rule; }

		//"(" castType=Type ")" right=FieldAccessExpression | unaryOperator=UnaryOperator? right=FieldAccessExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//"(" castType=Type ")" right=FieldAccessExpression
		public Group getGroup_0() { return cGroup_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }

		//castType=Type
		public Assignment getCastTypeAssignment_0_1() { return cCastTypeAssignment_0_1; }

		//Type
		public RuleCall getCastTypeTypeParserRuleCall_0_1_0() { return cCastTypeTypeParserRuleCall_0_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }

		//right=FieldAccessExpression
		public Assignment getRightAssignment_0_3() { return cRightAssignment_0_3; }

		//FieldAccessExpression
		public RuleCall getRightFieldAccessExpressionParserRuleCall_0_3_0() { return cRightFieldAccessExpressionParserRuleCall_0_3_0; }

		//unaryOperator=UnaryOperator? right=FieldAccessExpression
		public Group getGroup_1() { return cGroup_1; }

		//unaryOperator=UnaryOperator?
		public Assignment getUnaryOperatorAssignment_1_0() { return cUnaryOperatorAssignment_1_0; }

		//UnaryOperator
		public RuleCall getUnaryOperatorUnaryOperatorEnumRuleCall_1_0_0() { return cUnaryOperatorUnaryOperatorEnumRuleCall_1_0_0; }

		//right=FieldAccessExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//FieldAccessExpression
		public RuleCall getRightFieldAccessExpressionParserRuleCall_1_1_0() { return cRightFieldAccessExpressionParserRuleCall_1_1_0; }
	}

	public class FieldAccessExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FieldAccessExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStaticMethodExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cParameterOrFieldOrMethodExpressionParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Action cFieldAccessExpressionLeftAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRightFieldOrMethodExpressionParserRuleCall_1_1_2_0 = (RuleCall)cRightAssignment_1_1_2.eContents().get(0);
		
		//FieldAccessExpression returns Expression:
		//	StaticMethodExpression | ParameterOrFieldOrMethodExpression ({FieldAccessExpression.left=current} "."
		//	right=FieldOrMethodExpression)*;
		public ParserRule getRule() { return rule; }

		//StaticMethodExpression | ParameterOrFieldOrMethodExpression ({FieldAccessExpression.left=current} "."
		//right=FieldOrMethodExpression)*
		public Alternatives getAlternatives() { return cAlternatives; }

		//StaticMethodExpression
		public RuleCall getStaticMethodExpressionParserRuleCall_0() { return cStaticMethodExpressionParserRuleCall_0; }

		//ParameterOrFieldOrMethodExpression ({FieldAccessExpression.left=current} "." right=FieldOrMethodExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//ParameterOrFieldOrMethodExpression
		public RuleCall getParameterOrFieldOrMethodExpressionParserRuleCall_1_0() { return cParameterOrFieldOrMethodExpressionParserRuleCall_1_0; }

		//({FieldAccessExpression.left=current} "." right=FieldOrMethodExpression)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//{FieldAccessExpression.left=current}
		public Action getFieldAccessExpressionLeftAction_1_1_0() { return cFieldAccessExpressionLeftAction_1_1_0; }

		//"."
		public Keyword getFullStopKeyword_1_1_1() { return cFullStopKeyword_1_1_1; }

		//right=FieldOrMethodExpression
		public Assignment getRightAssignment_1_1_2() { return cRightAssignment_1_1_2; }

		//FieldOrMethodExpression
		public RuleCall getRightFieldOrMethodExpressionParserRuleCall_1_1_2_0() { return cRightFieldOrMethodExpressionParserRuleCall_1_1_2_0; }
	}

	public class ParameterOrFieldOrMethodExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterOrFieldOrMethodExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cLiteralAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cLiteralLiteralParserRuleCall_0_0 = (RuleCall)cLiteralAssignment_0.eContents().get(0);
		private final Assignment cThisAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cThisThisKeyword_1_0 = (Keyword)cThisAssignment_1.eContents().get(0);
		private final Assignment cIdAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cIdIDTerminalRuleCall_2_0 = (RuleCall)cIdAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cColonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cParameterNameAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cParameterNameParameterNameParserRuleCall_3_1_0 = (RuleCall)cParameterNameAssignment_3_1.eContents().get(0);
		private final RuleCall cParenthesesExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final Assignment cMethodAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cMethodMethodExpressionParserRuleCall_5_0 = (RuleCall)cMethodAssignment_5.eContents().get(0);
		
		//ParameterOrFieldOrMethodExpression returns Expression:
		//	literal=Literal | this="this" | //	declaredParameterName=[DeclaredParameterName] |
		//	id=ID | ":" parameterName=ParameterName | ParenthesesExpression | method=MethodExpression;
		public ParserRule getRule() { return rule; }

		//literal=Literal | this="this" | //	declaredParameterName=[DeclaredParameterName] |
		//id=ID | ":" parameterName=ParameterName | ParenthesesExpression | method=MethodExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//literal=Literal
		public Assignment getLiteralAssignment_0() { return cLiteralAssignment_0; }

		//Literal
		public RuleCall getLiteralLiteralParserRuleCall_0_0() { return cLiteralLiteralParserRuleCall_0_0; }

		//this="this"
		public Assignment getThisAssignment_1() { return cThisAssignment_1; }

		//"this"
		public Keyword getThisThisKeyword_1_0() { return cThisThisKeyword_1_0; }

		////	declaredParameterName=[DeclaredParameterName] |
		//id=ID
		public Assignment getIdAssignment_2() { return cIdAssignment_2; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_2_0() { return cIdIDTerminalRuleCall_2_0; }

		//":" parameterName=ParameterName
		public Group getGroup_3() { return cGroup_3; }

		//":"
		public Keyword getColonKeyword_3_0() { return cColonKeyword_3_0; }

		//parameterName=ParameterName
		public Assignment getParameterNameAssignment_3_1() { return cParameterNameAssignment_3_1; }

		//ParameterName
		public RuleCall getParameterNameParameterNameParserRuleCall_3_1_0() { return cParameterNameParameterNameParserRuleCall_3_1_0; }

		//ParenthesesExpression
		public RuleCall getParenthesesExpressionParserRuleCall_4() { return cParenthesesExpressionParserRuleCall_4; }

		//method=MethodExpression
		public Assignment getMethodAssignment_5() { return cMethodAssignment_5; }

		//MethodExpression
		public RuleCall getMethodMethodExpressionParserRuleCall_5_0() { return cMethodMethodExpressionParserRuleCall_5_0; }
	}

	public class FieldOrMethodExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FieldOrMethodExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cLiteralAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cLiteralLiteralParserRuleCall_0_0 = (RuleCall)cLiteralAssignment_0.eContents().get(0);
		private final Assignment cThisAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cThisThisKeyword_1_0 = (Keyword)cThisAssignment_1.eContents().get(0);
		private final Assignment cIdAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cIdIDTerminalRuleCall_2_0 = (RuleCall)cIdAssignment_2.eContents().get(0);
		private final RuleCall cParenthesesExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final Assignment cMethodAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cMethodMethodExpressionParserRuleCall_4_0 = (RuleCall)cMethodAssignment_4.eContents().get(0);
		
		//FieldOrMethodExpression returns Expression:
		//	literal=Literal | this="this" | id=ID | ParenthesesExpression | method=MethodExpression;
		public ParserRule getRule() { return rule; }

		//literal=Literal | this="this" | id=ID | ParenthesesExpression | method=MethodExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//literal=Literal
		public Assignment getLiteralAssignment_0() { return cLiteralAssignment_0; }

		//Literal
		public RuleCall getLiteralLiteralParserRuleCall_0_0() { return cLiteralLiteralParserRuleCall_0_0; }

		//this="this"
		public Assignment getThisAssignment_1() { return cThisAssignment_1; }

		//"this"
		public Keyword getThisThisKeyword_1_0() { return cThisThisKeyword_1_0; }

		//id=ID
		public Assignment getIdAssignment_2() { return cIdAssignment_2; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_2_0() { return cIdIDTerminalRuleCall_2_0; }

		//ParenthesesExpression
		public RuleCall getParenthesesExpressionParserRuleCall_3() { return cParenthesesExpressionParserRuleCall_3; }

		//method=MethodExpression
		public Assignment getMethodAssignment_4() { return cMethodAssignment_4; }

		//MethodExpression
		public RuleCall getMethodMethodExpressionParserRuleCall_4_0() { return cMethodMethodExpressionParserRuleCall_4_0; }
	}

	public class StaticMethodExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StaticMethodExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cMathAbsKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cNumberAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cNumberConditionalOrExpressionParserRuleCall_0_3_0 = (RuleCall)cNumberAssignment_0_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cMathSqrtKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cNumberAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cNumberConditionalOrExpressionParserRuleCall_1_3_0 = (RuleCall)cNumberAssignment_1_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cExpressionAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cMathCosKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cNumberAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cNumberConditionalOrExpressionParserRuleCall_2_3_0 = (RuleCall)cNumberAssignment_2_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cExpressionAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cMathSinKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cNumberAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cNumberConditionalOrExpressionParserRuleCall_3_3_0 = (RuleCall)cNumberAssignment_3_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cExpressionAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cMathTanKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cNumberAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cNumberConditionalOrExpressionParserRuleCall_4_3_0 = (RuleCall)cNumberAssignment_4_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cExpressionAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Keyword cMathAcosKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Assignment cNumberAssignment_5_3 = (Assignment)cGroup_5.eContents().get(3);
		private final RuleCall cNumberConditionalOrExpressionParserRuleCall_5_3_0 = (RuleCall)cNumberAssignment_5_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cExpressionAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Keyword cMathAsinKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Assignment cNumberAssignment_6_3 = (Assignment)cGroup_6.eContents().get(3);
		private final RuleCall cNumberConditionalOrExpressionParserRuleCall_6_3_0 = (RuleCall)cNumberAssignment_6_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6_4 = (Keyword)cGroup_6.eContents().get(4);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cExpressionAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Keyword cMathAtanKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_7_2 = (Keyword)cGroup_7.eContents().get(2);
		private final Assignment cNumberAssignment_7_3 = (Assignment)cGroup_7.eContents().get(3);
		private final RuleCall cNumberConditionalOrExpressionParserRuleCall_7_3_0 = (RuleCall)cNumberAssignment_7_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7_4 = (Keyword)cGroup_7.eContents().get(4);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Action cExpressionAction_8_0 = (Action)cGroup_8.eContents().get(0);
		private final Keyword cMathCeilKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_8_2 = (Keyword)cGroup_8.eContents().get(2);
		private final Assignment cNumberAssignment_8_3 = (Assignment)cGroup_8.eContents().get(3);
		private final RuleCall cNumberConditionalOrExpressionParserRuleCall_8_3_0 = (RuleCall)cNumberAssignment_8_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8_4 = (Keyword)cGroup_8.eContents().get(4);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Action cExpressionAction_9_0 = (Action)cGroup_9.eContents().get(0);
		private final Keyword cMathExpKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_9_2 = (Keyword)cGroup_9.eContents().get(2);
		private final Assignment cNumberAssignment_9_3 = (Assignment)cGroup_9.eContents().get(3);
		private final RuleCall cNumberConditionalOrExpressionParserRuleCall_9_3_0 = (RuleCall)cNumberAssignment_9_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_9_4 = (Keyword)cGroup_9.eContents().get(4);
		private final Group cGroup_10 = (Group)cAlternatives.eContents().get(10);
		private final Action cExpressionAction_10_0 = (Action)cGroup_10.eContents().get(0);
		private final Keyword cMathFloorKeyword_10_1 = (Keyword)cGroup_10.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_10_2 = (Keyword)cGroup_10.eContents().get(2);
		private final Assignment cNumberAssignment_10_3 = (Assignment)cGroup_10.eContents().get(3);
		private final RuleCall cNumberConditionalOrExpressionParserRuleCall_10_3_0 = (RuleCall)cNumberAssignment_10_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_10_4 = (Keyword)cGroup_10.eContents().get(4);
		private final Group cGroup_11 = (Group)cAlternatives.eContents().get(11);
		private final Action cExpressionAction_11_0 = (Action)cGroup_11.eContents().get(0);
		private final Keyword cMathLogKeyword_11_1 = (Keyword)cGroup_11.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_11_2 = (Keyword)cGroup_11.eContents().get(2);
		private final Assignment cNumberAssignment_11_3 = (Assignment)cGroup_11.eContents().get(3);
		private final RuleCall cNumberConditionalOrExpressionParserRuleCall_11_3_0 = (RuleCall)cNumberAssignment_11_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_11_4 = (Keyword)cGroup_11.eContents().get(4);
		private final Group cGroup_12 = (Group)cAlternatives.eContents().get(12);
		private final Action cExpressionAction_12_0 = (Action)cGroup_12.eContents().get(0);
		private final Keyword cJavaLangMathAbsKeyword_12_1 = (Keyword)cGroup_12.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_12_2 = (Keyword)cGroup_12.eContents().get(2);
		private final Assignment cNumberAssignment_12_3 = (Assignment)cGroup_12.eContents().get(3);
		private final RuleCall cNumberConditionalOrExpressionParserRuleCall_12_3_0 = (RuleCall)cNumberAssignment_12_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_12_4 = (Keyword)cGroup_12.eContents().get(4);
		private final Group cGroup_13 = (Group)cAlternatives.eContents().get(13);
		private final Action cExpressionAction_13_0 = (Action)cGroup_13.eContents().get(0);
		private final Keyword cJavaLangMathSqrtKeyword_13_1 = (Keyword)cGroup_13.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_13_2 = (Keyword)cGroup_13.eContents().get(2);
		private final Assignment cNumberAssignment_13_3 = (Assignment)cGroup_13.eContents().get(3);
		private final RuleCall cNumberConditionalOrExpressionParserRuleCall_13_3_0 = (RuleCall)cNumberAssignment_13_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_13_4 = (Keyword)cGroup_13.eContents().get(4);
		private final Group cGroup_14 = (Group)cAlternatives.eContents().get(14);
		private final Action cExpressionAction_14_0 = (Action)cGroup_14.eContents().get(0);
		private final Keyword cJavaLangMathCosKeyword_14_1 = (Keyword)cGroup_14.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_14_2 = (Keyword)cGroup_14.eContents().get(2);
		private final Assignment cNumberAssignment_14_3 = (Assignment)cGroup_14.eContents().get(3);
		private final RuleCall cNumberConditionalOrExpressionParserRuleCall_14_3_0 = (RuleCall)cNumberAssignment_14_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_14_4 = (Keyword)cGroup_14.eContents().get(4);
		private final Group cGroup_15 = (Group)cAlternatives.eContents().get(15);
		private final Action cExpressionAction_15_0 = (Action)cGroup_15.eContents().get(0);
		private final Keyword cJavaLangMathSinKeyword_15_1 = (Keyword)cGroup_15.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_15_2 = (Keyword)cGroup_15.eContents().get(2);
		private final Assignment cNumberAssignment_15_3 = (Assignment)cGroup_15.eContents().get(3);
		private final RuleCall cNumberConditionalOrExpressionParserRuleCall_15_3_0 = (RuleCall)cNumberAssignment_15_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_15_4 = (Keyword)cGroup_15.eContents().get(4);
		private final Group cGroup_16 = (Group)cAlternatives.eContents().get(16);
		private final Action cExpressionAction_16_0 = (Action)cGroup_16.eContents().get(0);
		private final Keyword cJavaLangMathTanKeyword_16_1 = (Keyword)cGroup_16.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_16_2 = (Keyword)cGroup_16.eContents().get(2);
		private final Assignment cNumberAssignment_16_3 = (Assignment)cGroup_16.eContents().get(3);
		private final RuleCall cNumberConditionalOrExpressionParserRuleCall_16_3_0 = (RuleCall)cNumberAssignment_16_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_16_4 = (Keyword)cGroup_16.eContents().get(4);
		private final Group cGroup_17 = (Group)cAlternatives.eContents().get(17);
		private final Action cExpressionAction_17_0 = (Action)cGroup_17.eContents().get(0);
		private final Keyword cJavaLangMathAcosKeyword_17_1 = (Keyword)cGroup_17.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_17_2 = (Keyword)cGroup_17.eContents().get(2);
		private final Assignment cNumberAssignment_17_3 = (Assignment)cGroup_17.eContents().get(3);
		private final RuleCall cNumberConditionalOrExpressionParserRuleCall_17_3_0 = (RuleCall)cNumberAssignment_17_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_17_4 = (Keyword)cGroup_17.eContents().get(4);
		private final Group cGroup_18 = (Group)cAlternatives.eContents().get(18);
		private final Action cExpressionAction_18_0 = (Action)cGroup_18.eContents().get(0);
		private final Keyword cJavaLangMathAsinKeyword_18_1 = (Keyword)cGroup_18.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_18_2 = (Keyword)cGroup_18.eContents().get(2);
		private final Assignment cNumberAssignment_18_3 = (Assignment)cGroup_18.eContents().get(3);
		private final RuleCall cNumberConditionalOrExpressionParserRuleCall_18_3_0 = (RuleCall)cNumberAssignment_18_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_18_4 = (Keyword)cGroup_18.eContents().get(4);
		private final Group cGroup_19 = (Group)cAlternatives.eContents().get(19);
		private final Action cExpressionAction_19_0 = (Action)cGroup_19.eContents().get(0);
		private final Keyword cJavaLangMathAtanKeyword_19_1 = (Keyword)cGroup_19.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_19_2 = (Keyword)cGroup_19.eContents().get(2);
		private final Assignment cNumberAssignment_19_3 = (Assignment)cGroup_19.eContents().get(3);
		private final RuleCall cNumberConditionalOrExpressionParserRuleCall_19_3_0 = (RuleCall)cNumberAssignment_19_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_19_4 = (Keyword)cGroup_19.eContents().get(4);
		private final Group cGroup_20 = (Group)cAlternatives.eContents().get(20);
		private final Action cExpressionAction_20_0 = (Action)cGroup_20.eContents().get(0);
		private final Keyword cJavaLangMathCeilKeyword_20_1 = (Keyword)cGroup_20.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_20_2 = (Keyword)cGroup_20.eContents().get(2);
		private final Assignment cNumberAssignment_20_3 = (Assignment)cGroup_20.eContents().get(3);
		private final RuleCall cNumberConditionalOrExpressionParserRuleCall_20_3_0 = (RuleCall)cNumberAssignment_20_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_20_4 = (Keyword)cGroup_20.eContents().get(4);
		private final Group cGroup_21 = (Group)cAlternatives.eContents().get(21);
		private final Action cExpressionAction_21_0 = (Action)cGroup_21.eContents().get(0);
		private final Keyword cJavaLangMathExpKeyword_21_1 = (Keyword)cGroup_21.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_21_2 = (Keyword)cGroup_21.eContents().get(2);
		private final Assignment cNumberAssignment_21_3 = (Assignment)cGroup_21.eContents().get(3);
		private final RuleCall cNumberConditionalOrExpressionParserRuleCall_21_3_0 = (RuleCall)cNumberAssignment_21_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_21_4 = (Keyword)cGroup_21.eContents().get(4);
		private final Group cGroup_22 = (Group)cAlternatives.eContents().get(22);
		private final Action cExpressionAction_22_0 = (Action)cGroup_22.eContents().get(0);
		private final Keyword cJavaLangMathFloorKeyword_22_1 = (Keyword)cGroup_22.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_22_2 = (Keyword)cGroup_22.eContents().get(2);
		private final Assignment cNumberAssignment_22_3 = (Assignment)cGroup_22.eContents().get(3);
		private final RuleCall cNumberConditionalOrExpressionParserRuleCall_22_3_0 = (RuleCall)cNumberAssignment_22_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_22_4 = (Keyword)cGroup_22.eContents().get(4);
		private final Group cGroup_23 = (Group)cAlternatives.eContents().get(23);
		private final Action cExpressionAction_23_0 = (Action)cGroup_23.eContents().get(0);
		private final Keyword cJavaLangMathLogKeyword_23_1 = (Keyword)cGroup_23.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_23_2 = (Keyword)cGroup_23.eContents().get(2);
		private final Assignment cNumberAssignment_23_3 = (Assignment)cGroup_23.eContents().get(3);
		private final RuleCall cNumberConditionalOrExpressionParserRuleCall_23_3_0 = (RuleCall)cNumberAssignment_23_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_23_4 = (Keyword)cGroup_23.eContents().get(4);
		private final Group cGroup_24 = (Group)cAlternatives.eContents().get(24);
		private final Action cExpressionAction_24_0 = (Action)cGroup_24.eContents().get(0);
		private final Keyword cJDOHelperGetObjectIdKeyword_24_1 = (Keyword)cGroup_24.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_24_2 = (Keyword)cGroup_24.eContents().get(2);
		private final Assignment cPersistableAssignment_24_3 = (Assignment)cGroup_24.eContents().get(3);
		private final RuleCall cPersistableConditionalOrExpressionParserRuleCall_24_3_0 = (RuleCall)cPersistableAssignment_24_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_24_4 = (Keyword)cGroup_24.eContents().get(4);
		private final Group cGroup_25 = (Group)cAlternatives.eContents().get(25);
		private final Action cExpressionAction_25_0 = (Action)cGroup_25.eContents().get(0);
		private final Keyword cJDOHelperGetVersionKeyword_25_1 = (Keyword)cGroup_25.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_25_2 = (Keyword)cGroup_25.eContents().get(2);
		private final Assignment cPersistableAssignment_25_3 = (Assignment)cGroup_25.eContents().get(3);
		private final RuleCall cPersistableConditionalOrExpressionParserRuleCall_25_3_0 = (RuleCall)cPersistableAssignment_25_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_25_4 = (Keyword)cGroup_25.eContents().get(4);
		private final Group cGroup_26 = (Group)cAlternatives.eContents().get(26);
		private final Action cExpressionAction_26_0 = (Action)cGroup_26.eContents().get(0);
		private final Keyword cJavaxJdoJDOHelperGetObjectIdKeyword_26_1 = (Keyword)cGroup_26.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_26_2 = (Keyword)cGroup_26.eContents().get(2);
		private final Assignment cPersistableAssignment_26_3 = (Assignment)cGroup_26.eContents().get(3);
		private final RuleCall cPersistableConditionalOrExpressionParserRuleCall_26_3_0 = (RuleCall)cPersistableAssignment_26_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_26_4 = (Keyword)cGroup_26.eContents().get(4);
		private final Group cGroup_27 = (Group)cAlternatives.eContents().get(27);
		private final Action cExpressionAction_27_0 = (Action)cGroup_27.eContents().get(0);
		private final Keyword cJavaxJdoJDOHelperGetVersionKeyword_27_1 = (Keyword)cGroup_27.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_27_2 = (Keyword)cGroup_27.eContents().get(2);
		private final Assignment cPersistableAssignment_27_3 = (Assignment)cGroup_27.eContents().get(3);
		private final RuleCall cPersistableConditionalOrExpressionParserRuleCall_27_3_0 = (RuleCall)cPersistableAssignment_27_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_27_4 = (Keyword)cGroup_27.eContents().get(4);
		private final Group cGroup_28 = (Group)cAlternatives.eContents().get(28);
		private final Action cExpressionAction_28_0 = (Action)cGroup_28.eContents().get(0);
		private final Keyword cCountKeyword_28_1 = (Keyword)cGroup_28.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_28_2 = (Keyword)cGroup_28.eContents().get(2);
		private final Assignment cIsDistinctAssignment_28_3 = (Assignment)cGroup_28.eContents().get(3);
		private final Keyword cIsDistinctDISTINCTKeyword_28_3_0 = (Keyword)cIsDistinctAssignment_28_3.eContents().get(0);
		private final Assignment cAggregateArgumentAssignment_28_4 = (Assignment)cGroup_28.eContents().get(4);
		private final RuleCall cAggregateArgumentConditionalOrExpressionParserRuleCall_28_4_0 = (RuleCall)cAggregateArgumentAssignment_28_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_28_5 = (Keyword)cGroup_28.eContents().get(5);
		private final Group cGroup_29 = (Group)cAlternatives.eContents().get(29);
		private final Action cExpressionAction_29_0 = (Action)cGroup_29.eContents().get(0);
		private final Keyword cSumKeyword_29_1 = (Keyword)cGroup_29.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_29_2 = (Keyword)cGroup_29.eContents().get(2);
		private final Assignment cIsDistinctAssignment_29_3 = (Assignment)cGroup_29.eContents().get(3);
		private final Keyword cIsDistinctDISTINCTKeyword_29_3_0 = (Keyword)cIsDistinctAssignment_29_3.eContents().get(0);
		private final Assignment cAggregateArgumentAssignment_29_4 = (Assignment)cGroup_29.eContents().get(4);
		private final RuleCall cAggregateArgumentConditionalOrExpressionParserRuleCall_29_4_0 = (RuleCall)cAggregateArgumentAssignment_29_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_29_5 = (Keyword)cGroup_29.eContents().get(5);
		private final Group cGroup_30 = (Group)cAlternatives.eContents().get(30);
		private final Action cExpressionAction_30_0 = (Action)cGroup_30.eContents().get(0);
		private final Keyword cMinKeyword_30_1 = (Keyword)cGroup_30.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_30_2 = (Keyword)cGroup_30.eContents().get(2);
		private final Assignment cAggregateArgumentAssignment_30_3 = (Assignment)cGroup_30.eContents().get(3);
		private final RuleCall cAggregateArgumentConditionalOrExpressionParserRuleCall_30_3_0 = (RuleCall)cAggregateArgumentAssignment_30_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_30_4 = (Keyword)cGroup_30.eContents().get(4);
		private final Group cGroup_31 = (Group)cAlternatives.eContents().get(31);
		private final Action cExpressionAction_31_0 = (Action)cGroup_31.eContents().get(0);
		private final Keyword cMaxKeyword_31_1 = (Keyword)cGroup_31.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_31_2 = (Keyword)cGroup_31.eContents().get(2);
		private final Assignment cAggregateArgumentAssignment_31_3 = (Assignment)cGroup_31.eContents().get(3);
		private final RuleCall cAggregateArgumentConditionalOrExpressionParserRuleCall_31_3_0 = (RuleCall)cAggregateArgumentAssignment_31_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_31_4 = (Keyword)cGroup_31.eContents().get(4);
		private final Group cGroup_32 = (Group)cAlternatives.eContents().get(32);
		private final Action cExpressionAction_32_0 = (Action)cGroup_32.eContents().get(0);
		private final Keyword cAvgKeyword_32_1 = (Keyword)cGroup_32.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_32_2 = (Keyword)cGroup_32.eContents().get(2);
		private final Assignment cIsDistinctAssignment_32_3 = (Assignment)cGroup_32.eContents().get(3);
		private final Keyword cIsDistinctDISTINCTKeyword_32_3_0 = (Keyword)cIsDistinctAssignment_32_3.eContents().get(0);
		private final Assignment cAggregateArgumentAssignment_32_4 = (Assignment)cGroup_32.eContents().get(4);
		private final RuleCall cAggregateArgumentConditionalOrExpressionParserRuleCall_32_4_0 = (RuleCall)cAggregateArgumentAssignment_32_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_32_5 = (Keyword)cGroup_32.eContents().get(5);
		
		//StaticMethodExpression returns Expression:
		//	{Expression} "Math.abs" "(" number=ConditionalOrExpression ")" | {Expression} "Math.sqrt" "("
		//	number=ConditionalOrExpression ")" | {Expression} "Math.cos" "(" number=ConditionalOrExpression ")" | {Expression}
		//	"Math.sin" "(" number=ConditionalOrExpression ")" | {Expression} "Math.tan" "(" number=ConditionalOrExpression ")" |
		//	{Expression} "Math.acos" "(" number=ConditionalOrExpression ")" | {Expression} "Math.asin" "("
		//	number=ConditionalOrExpression ")" | {Expression} "Math.atan" "(" number=ConditionalOrExpression ")" | {Expression}
		//	"Math.ceil" "(" number=ConditionalOrExpression ")" | {Expression} "Math.exp" "(" number=ConditionalOrExpression ")" |
		//	{Expression} "Math.floor" "(" number=ConditionalOrExpression ")" | {Expression} "Math.log" "("
		//	number=ConditionalOrExpression ")" | {Expression} "java.lang.Math.abs" "(" number=ConditionalOrExpression ")" |
		//	{Expression} "java.lang.Math.sqrt" "(" number=ConditionalOrExpression ")" | {Expression} "java.lang.Math.cos" "("
		//	number=ConditionalOrExpression ")" | {Expression} "java.lang.Math.sin" "(" number=ConditionalOrExpression ")" |
		//	{Expression} "java.lang.Math.tan" "(" number=ConditionalOrExpression ")" | {Expression} "java.lang.Math.acos" "("
		//	number=ConditionalOrExpression ")" | {Expression} "java.lang.Math.asin" "(" number=ConditionalOrExpression ")" |
		//	{Expression} "java.lang.Math.atan" "(" number=ConditionalOrExpression ")" | {Expression} "java.lang.Math.ceil" "("
		//	number=ConditionalOrExpression ")" | {Expression} "java.lang.Math.exp" "(" number=ConditionalOrExpression ")" |
		//	{Expression} "java.lang.Math.floor" "(" number=ConditionalOrExpression ")" | {Expression} "java.lang.Math.log" "("
		//	number=ConditionalOrExpression ")" | {Expression} "JDOHelper.getObjectId" "(" persistable=ConditionalOrExpression ")"
		//	| {Expression} "JDOHelper.getVersion" "(" persistable=ConditionalOrExpression ")" | {Expression}
		//	"javax.jdo.JDOHelper.getObjectId" "(" persistable=ConditionalOrExpression ")" | {Expression}
		//	"javax.jdo.JDOHelper.getVersion" "(" persistable=ConditionalOrExpression ")" | // Would be cleaner to declare the following aggregate expressions separately, but here works for now.
		//	// Marco :-)
		//	{Expression} "count" "(" isDistinct?="DISTINCT"? aggregateArgument=ConditionalOrExpression ")" | {Expression} "sum" "("
		//	isDistinct?="DISTINCT"? aggregateArgument=ConditionalOrExpression ")" | {Expression} "min" "("
		//	aggregateArgument=ConditionalOrExpression ")" | {Expression} "max" "(" aggregateArgument=ConditionalOrExpression ")" |
		//	{Expression} "avg" "(" isDistinct?="DISTINCT"? aggregateArgument=ConditionalOrExpression ")";
		public ParserRule getRule() { return rule; }

		//{Expression} "Math.abs" "(" number=ConditionalOrExpression ")" | {Expression} "Math.sqrt" "("
		//number=ConditionalOrExpression ")" | {Expression} "Math.cos" "(" number=ConditionalOrExpression ")" | {Expression}
		//"Math.sin" "(" number=ConditionalOrExpression ")" | {Expression} "Math.tan" "(" number=ConditionalOrExpression ")" |
		//{Expression} "Math.acos" "(" number=ConditionalOrExpression ")" | {Expression} "Math.asin" "("
		//number=ConditionalOrExpression ")" | {Expression} "Math.atan" "(" number=ConditionalOrExpression ")" | {Expression}
		//"Math.ceil" "(" number=ConditionalOrExpression ")" | {Expression} "Math.exp" "(" number=ConditionalOrExpression ")" |
		//{Expression} "Math.floor" "(" number=ConditionalOrExpression ")" | {Expression} "Math.log" "("
		//number=ConditionalOrExpression ")" | {Expression} "java.lang.Math.abs" "(" number=ConditionalOrExpression ")" |
		//{Expression} "java.lang.Math.sqrt" "(" number=ConditionalOrExpression ")" | {Expression} "java.lang.Math.cos" "("
		//number=ConditionalOrExpression ")" | {Expression} "java.lang.Math.sin" "(" number=ConditionalOrExpression ")" |
		//{Expression} "java.lang.Math.tan" "(" number=ConditionalOrExpression ")" | {Expression} "java.lang.Math.acos" "("
		//number=ConditionalOrExpression ")" | {Expression} "java.lang.Math.asin" "(" number=ConditionalOrExpression ")" |
		//{Expression} "java.lang.Math.atan" "(" number=ConditionalOrExpression ")" | {Expression} "java.lang.Math.ceil" "("
		//number=ConditionalOrExpression ")" | {Expression} "java.lang.Math.exp" "(" number=ConditionalOrExpression ")" |
		//{Expression} "java.lang.Math.floor" "(" number=ConditionalOrExpression ")" | {Expression} "java.lang.Math.log" "("
		//number=ConditionalOrExpression ")" | {Expression} "JDOHelper.getObjectId" "(" persistable=ConditionalOrExpression ")" |
		//{Expression} "JDOHelper.getVersion" "(" persistable=ConditionalOrExpression ")" | {Expression}
		//"javax.jdo.JDOHelper.getObjectId" "(" persistable=ConditionalOrExpression ")" | {Expression}
		//"javax.jdo.JDOHelper.getVersion" "(" persistable=ConditionalOrExpression ")" | // Would be cleaner to declare the following aggregate expressions separately, but here works for now.
		//// Marco :-)
		//{Expression} "count" "(" isDistinct?="DISTINCT"? aggregateArgument=ConditionalOrExpression ")" | {Expression} "sum" "("
		//isDistinct?="DISTINCT"? aggregateArgument=ConditionalOrExpression ")" | {Expression} "min" "("
		//aggregateArgument=ConditionalOrExpression ")" | {Expression} "max" "(" aggregateArgument=ConditionalOrExpression ")" |
		//{Expression} "avg" "(" isDistinct?="DISTINCT"? aggregateArgument=ConditionalOrExpression ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{Expression} "Math.abs" "(" number=ConditionalOrExpression ")"
		public Group getGroup_0() { return cGroup_0; }

		//{Expression}
		public Action getExpressionAction_0_0() { return cExpressionAction_0_0; }

		//"Math.abs"
		public Keyword getMathAbsKeyword_0_1() { return cMathAbsKeyword_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_2() { return cLeftParenthesisKeyword_0_2; }

		//number=ConditionalOrExpression
		public Assignment getNumberAssignment_0_3() { return cNumberAssignment_0_3; }

		//ConditionalOrExpression
		public RuleCall getNumberConditionalOrExpressionParserRuleCall_0_3_0() { return cNumberConditionalOrExpressionParserRuleCall_0_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_4() { return cRightParenthesisKeyword_0_4; }

		//{Expression} "Math.sqrt" "(" number=ConditionalOrExpression ")"
		public Group getGroup_1() { return cGroup_1; }

		//{Expression}
		public Action getExpressionAction_1_0() { return cExpressionAction_1_0; }

		//"Math.sqrt"
		public Keyword getMathSqrtKeyword_1_1() { return cMathSqrtKeyword_1_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_2() { return cLeftParenthesisKeyword_1_2; }

		//number=ConditionalOrExpression
		public Assignment getNumberAssignment_1_3() { return cNumberAssignment_1_3; }

		//ConditionalOrExpression
		public RuleCall getNumberConditionalOrExpressionParserRuleCall_1_3_0() { return cNumberConditionalOrExpressionParserRuleCall_1_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_4() { return cRightParenthesisKeyword_1_4; }

		//{Expression} "Math.cos" "(" number=ConditionalOrExpression ")"
		public Group getGroup_2() { return cGroup_2; }

		//{Expression}
		public Action getExpressionAction_2_0() { return cExpressionAction_2_0; }

		//"Math.cos"
		public Keyword getMathCosKeyword_2_1() { return cMathCosKeyword_2_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_2() { return cLeftParenthesisKeyword_2_2; }

		//number=ConditionalOrExpression
		public Assignment getNumberAssignment_2_3() { return cNumberAssignment_2_3; }

		//ConditionalOrExpression
		public RuleCall getNumberConditionalOrExpressionParserRuleCall_2_3_0() { return cNumberConditionalOrExpressionParserRuleCall_2_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_4() { return cRightParenthesisKeyword_2_4; }

		//{Expression} "Math.sin" "(" number=ConditionalOrExpression ")"
		public Group getGroup_3() { return cGroup_3; }

		//{Expression}
		public Action getExpressionAction_3_0() { return cExpressionAction_3_0; }

		//"Math.sin"
		public Keyword getMathSinKeyword_3_1() { return cMathSinKeyword_3_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_2() { return cLeftParenthesisKeyword_3_2; }

		//number=ConditionalOrExpression
		public Assignment getNumberAssignment_3_3() { return cNumberAssignment_3_3; }

		//ConditionalOrExpression
		public RuleCall getNumberConditionalOrExpressionParserRuleCall_3_3_0() { return cNumberConditionalOrExpressionParserRuleCall_3_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_4() { return cRightParenthesisKeyword_3_4; }

		//{Expression} "Math.tan" "(" number=ConditionalOrExpression ")"
		public Group getGroup_4() { return cGroup_4; }

		//{Expression}
		public Action getExpressionAction_4_0() { return cExpressionAction_4_0; }

		//"Math.tan"
		public Keyword getMathTanKeyword_4_1() { return cMathTanKeyword_4_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_4_2() { return cLeftParenthesisKeyword_4_2; }

		//number=ConditionalOrExpression
		public Assignment getNumberAssignment_4_3() { return cNumberAssignment_4_3; }

		//ConditionalOrExpression
		public RuleCall getNumberConditionalOrExpressionParserRuleCall_4_3_0() { return cNumberConditionalOrExpressionParserRuleCall_4_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4_4() { return cRightParenthesisKeyword_4_4; }

		//{Expression} "Math.acos" "(" number=ConditionalOrExpression ")"
		public Group getGroup_5() { return cGroup_5; }

		//{Expression}
		public Action getExpressionAction_5_0() { return cExpressionAction_5_0; }

		//"Math.acos"
		public Keyword getMathAcosKeyword_5_1() { return cMathAcosKeyword_5_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_5_2() { return cLeftParenthesisKeyword_5_2; }

		//number=ConditionalOrExpression
		public Assignment getNumberAssignment_5_3() { return cNumberAssignment_5_3; }

		//ConditionalOrExpression
		public RuleCall getNumberConditionalOrExpressionParserRuleCall_5_3_0() { return cNumberConditionalOrExpressionParserRuleCall_5_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5_4() { return cRightParenthesisKeyword_5_4; }

		//{Expression} "Math.asin" "(" number=ConditionalOrExpression ")"
		public Group getGroup_6() { return cGroup_6; }

		//{Expression}
		public Action getExpressionAction_6_0() { return cExpressionAction_6_0; }

		//"Math.asin"
		public Keyword getMathAsinKeyword_6_1() { return cMathAsinKeyword_6_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_6_2() { return cLeftParenthesisKeyword_6_2; }

		//number=ConditionalOrExpression
		public Assignment getNumberAssignment_6_3() { return cNumberAssignment_6_3; }

		//ConditionalOrExpression
		public RuleCall getNumberConditionalOrExpressionParserRuleCall_6_3_0() { return cNumberConditionalOrExpressionParserRuleCall_6_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6_4() { return cRightParenthesisKeyword_6_4; }

		//{Expression} "Math.atan" "(" number=ConditionalOrExpression ")"
		public Group getGroup_7() { return cGroup_7; }

		//{Expression}
		public Action getExpressionAction_7_0() { return cExpressionAction_7_0; }

		//"Math.atan"
		public Keyword getMathAtanKeyword_7_1() { return cMathAtanKeyword_7_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_7_2() { return cLeftParenthesisKeyword_7_2; }

		//number=ConditionalOrExpression
		public Assignment getNumberAssignment_7_3() { return cNumberAssignment_7_3; }

		//ConditionalOrExpression
		public RuleCall getNumberConditionalOrExpressionParserRuleCall_7_3_0() { return cNumberConditionalOrExpressionParserRuleCall_7_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_7_4() { return cRightParenthesisKeyword_7_4; }

		//{Expression} "Math.ceil" "(" number=ConditionalOrExpression ")"
		public Group getGroup_8() { return cGroup_8; }

		//{Expression}
		public Action getExpressionAction_8_0() { return cExpressionAction_8_0; }

		//"Math.ceil"
		public Keyword getMathCeilKeyword_8_1() { return cMathCeilKeyword_8_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_8_2() { return cLeftParenthesisKeyword_8_2; }

		//number=ConditionalOrExpression
		public Assignment getNumberAssignment_8_3() { return cNumberAssignment_8_3; }

		//ConditionalOrExpression
		public RuleCall getNumberConditionalOrExpressionParserRuleCall_8_3_0() { return cNumberConditionalOrExpressionParserRuleCall_8_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_8_4() { return cRightParenthesisKeyword_8_4; }

		//{Expression} "Math.exp" "(" number=ConditionalOrExpression ")"
		public Group getGroup_9() { return cGroup_9; }

		//{Expression}
		public Action getExpressionAction_9_0() { return cExpressionAction_9_0; }

		//"Math.exp"
		public Keyword getMathExpKeyword_9_1() { return cMathExpKeyword_9_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_9_2() { return cLeftParenthesisKeyword_9_2; }

		//number=ConditionalOrExpression
		public Assignment getNumberAssignment_9_3() { return cNumberAssignment_9_3; }

		//ConditionalOrExpression
		public RuleCall getNumberConditionalOrExpressionParserRuleCall_9_3_0() { return cNumberConditionalOrExpressionParserRuleCall_9_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_9_4() { return cRightParenthesisKeyword_9_4; }

		//{Expression} "Math.floor" "(" number=ConditionalOrExpression ")"
		public Group getGroup_10() { return cGroup_10; }

		//{Expression}
		public Action getExpressionAction_10_0() { return cExpressionAction_10_0; }

		//"Math.floor"
		public Keyword getMathFloorKeyword_10_1() { return cMathFloorKeyword_10_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_10_2() { return cLeftParenthesisKeyword_10_2; }

		//number=ConditionalOrExpression
		public Assignment getNumberAssignment_10_3() { return cNumberAssignment_10_3; }

		//ConditionalOrExpression
		public RuleCall getNumberConditionalOrExpressionParserRuleCall_10_3_0() { return cNumberConditionalOrExpressionParserRuleCall_10_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_10_4() { return cRightParenthesisKeyword_10_4; }

		//{Expression} "Math.log" "(" number=ConditionalOrExpression ")"
		public Group getGroup_11() { return cGroup_11; }

		//{Expression}
		public Action getExpressionAction_11_0() { return cExpressionAction_11_0; }

		//"Math.log"
		public Keyword getMathLogKeyword_11_1() { return cMathLogKeyword_11_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_11_2() { return cLeftParenthesisKeyword_11_2; }

		//number=ConditionalOrExpression
		public Assignment getNumberAssignment_11_3() { return cNumberAssignment_11_3; }

		//ConditionalOrExpression
		public RuleCall getNumberConditionalOrExpressionParserRuleCall_11_3_0() { return cNumberConditionalOrExpressionParserRuleCall_11_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_11_4() { return cRightParenthesisKeyword_11_4; }

		//{Expression} "java.lang.Math.abs" "(" number=ConditionalOrExpression ")"
		public Group getGroup_12() { return cGroup_12; }

		//{Expression}
		public Action getExpressionAction_12_0() { return cExpressionAction_12_0; }

		//"java.lang.Math.abs"
		public Keyword getJavaLangMathAbsKeyword_12_1() { return cJavaLangMathAbsKeyword_12_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_12_2() { return cLeftParenthesisKeyword_12_2; }

		//number=ConditionalOrExpression
		public Assignment getNumberAssignment_12_3() { return cNumberAssignment_12_3; }

		//ConditionalOrExpression
		public RuleCall getNumberConditionalOrExpressionParserRuleCall_12_3_0() { return cNumberConditionalOrExpressionParserRuleCall_12_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_12_4() { return cRightParenthesisKeyword_12_4; }

		//{Expression} "java.lang.Math.sqrt" "(" number=ConditionalOrExpression ")"
		public Group getGroup_13() { return cGroup_13; }

		//{Expression}
		public Action getExpressionAction_13_0() { return cExpressionAction_13_0; }

		//"java.lang.Math.sqrt"
		public Keyword getJavaLangMathSqrtKeyword_13_1() { return cJavaLangMathSqrtKeyword_13_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_13_2() { return cLeftParenthesisKeyword_13_2; }

		//number=ConditionalOrExpression
		public Assignment getNumberAssignment_13_3() { return cNumberAssignment_13_3; }

		//ConditionalOrExpression
		public RuleCall getNumberConditionalOrExpressionParserRuleCall_13_3_0() { return cNumberConditionalOrExpressionParserRuleCall_13_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_13_4() { return cRightParenthesisKeyword_13_4; }

		//{Expression} "java.lang.Math.cos" "(" number=ConditionalOrExpression ")"
		public Group getGroup_14() { return cGroup_14; }

		//{Expression}
		public Action getExpressionAction_14_0() { return cExpressionAction_14_0; }

		//"java.lang.Math.cos"
		public Keyword getJavaLangMathCosKeyword_14_1() { return cJavaLangMathCosKeyword_14_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_14_2() { return cLeftParenthesisKeyword_14_2; }

		//number=ConditionalOrExpression
		public Assignment getNumberAssignment_14_3() { return cNumberAssignment_14_3; }

		//ConditionalOrExpression
		public RuleCall getNumberConditionalOrExpressionParserRuleCall_14_3_0() { return cNumberConditionalOrExpressionParserRuleCall_14_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_14_4() { return cRightParenthesisKeyword_14_4; }

		//{Expression} "java.lang.Math.sin" "(" number=ConditionalOrExpression ")"
		public Group getGroup_15() { return cGroup_15; }

		//{Expression}
		public Action getExpressionAction_15_0() { return cExpressionAction_15_0; }

		//"java.lang.Math.sin"
		public Keyword getJavaLangMathSinKeyword_15_1() { return cJavaLangMathSinKeyword_15_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_15_2() { return cLeftParenthesisKeyword_15_2; }

		//number=ConditionalOrExpression
		public Assignment getNumberAssignment_15_3() { return cNumberAssignment_15_3; }

		//ConditionalOrExpression
		public RuleCall getNumberConditionalOrExpressionParserRuleCall_15_3_0() { return cNumberConditionalOrExpressionParserRuleCall_15_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_15_4() { return cRightParenthesisKeyword_15_4; }

		//{Expression} "java.lang.Math.tan" "(" number=ConditionalOrExpression ")"
		public Group getGroup_16() { return cGroup_16; }

		//{Expression}
		public Action getExpressionAction_16_0() { return cExpressionAction_16_0; }

		//"java.lang.Math.tan"
		public Keyword getJavaLangMathTanKeyword_16_1() { return cJavaLangMathTanKeyword_16_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_16_2() { return cLeftParenthesisKeyword_16_2; }

		//number=ConditionalOrExpression
		public Assignment getNumberAssignment_16_3() { return cNumberAssignment_16_3; }

		//ConditionalOrExpression
		public RuleCall getNumberConditionalOrExpressionParserRuleCall_16_3_0() { return cNumberConditionalOrExpressionParserRuleCall_16_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_16_4() { return cRightParenthesisKeyword_16_4; }

		//{Expression} "java.lang.Math.acos" "(" number=ConditionalOrExpression ")"
		public Group getGroup_17() { return cGroup_17; }

		//{Expression}
		public Action getExpressionAction_17_0() { return cExpressionAction_17_0; }

		//"java.lang.Math.acos"
		public Keyword getJavaLangMathAcosKeyword_17_1() { return cJavaLangMathAcosKeyword_17_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_17_2() { return cLeftParenthesisKeyword_17_2; }

		//number=ConditionalOrExpression
		public Assignment getNumberAssignment_17_3() { return cNumberAssignment_17_3; }

		//ConditionalOrExpression
		public RuleCall getNumberConditionalOrExpressionParserRuleCall_17_3_0() { return cNumberConditionalOrExpressionParserRuleCall_17_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_17_4() { return cRightParenthesisKeyword_17_4; }

		//{Expression} "java.lang.Math.asin" "(" number=ConditionalOrExpression ")"
		public Group getGroup_18() { return cGroup_18; }

		//{Expression}
		public Action getExpressionAction_18_0() { return cExpressionAction_18_0; }

		//"java.lang.Math.asin"
		public Keyword getJavaLangMathAsinKeyword_18_1() { return cJavaLangMathAsinKeyword_18_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_18_2() { return cLeftParenthesisKeyword_18_2; }

		//number=ConditionalOrExpression
		public Assignment getNumberAssignment_18_3() { return cNumberAssignment_18_3; }

		//ConditionalOrExpression
		public RuleCall getNumberConditionalOrExpressionParserRuleCall_18_3_0() { return cNumberConditionalOrExpressionParserRuleCall_18_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_18_4() { return cRightParenthesisKeyword_18_4; }

		//{Expression} "java.lang.Math.atan" "(" number=ConditionalOrExpression ")"
		public Group getGroup_19() { return cGroup_19; }

		//{Expression}
		public Action getExpressionAction_19_0() { return cExpressionAction_19_0; }

		//"java.lang.Math.atan"
		public Keyword getJavaLangMathAtanKeyword_19_1() { return cJavaLangMathAtanKeyword_19_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_19_2() { return cLeftParenthesisKeyword_19_2; }

		//number=ConditionalOrExpression
		public Assignment getNumberAssignment_19_3() { return cNumberAssignment_19_3; }

		//ConditionalOrExpression
		public RuleCall getNumberConditionalOrExpressionParserRuleCall_19_3_0() { return cNumberConditionalOrExpressionParserRuleCall_19_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_19_4() { return cRightParenthesisKeyword_19_4; }

		//{Expression} "java.lang.Math.ceil" "(" number=ConditionalOrExpression ")"
		public Group getGroup_20() { return cGroup_20; }

		//{Expression}
		public Action getExpressionAction_20_0() { return cExpressionAction_20_0; }

		//"java.lang.Math.ceil"
		public Keyword getJavaLangMathCeilKeyword_20_1() { return cJavaLangMathCeilKeyword_20_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_20_2() { return cLeftParenthesisKeyword_20_2; }

		//number=ConditionalOrExpression
		public Assignment getNumberAssignment_20_3() { return cNumberAssignment_20_3; }

		//ConditionalOrExpression
		public RuleCall getNumberConditionalOrExpressionParserRuleCall_20_3_0() { return cNumberConditionalOrExpressionParserRuleCall_20_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_20_4() { return cRightParenthesisKeyword_20_4; }

		//{Expression} "java.lang.Math.exp" "(" number=ConditionalOrExpression ")"
		public Group getGroup_21() { return cGroup_21; }

		//{Expression}
		public Action getExpressionAction_21_0() { return cExpressionAction_21_0; }

		//"java.lang.Math.exp"
		public Keyword getJavaLangMathExpKeyword_21_1() { return cJavaLangMathExpKeyword_21_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_21_2() { return cLeftParenthesisKeyword_21_2; }

		//number=ConditionalOrExpression
		public Assignment getNumberAssignment_21_3() { return cNumberAssignment_21_3; }

		//ConditionalOrExpression
		public RuleCall getNumberConditionalOrExpressionParserRuleCall_21_3_0() { return cNumberConditionalOrExpressionParserRuleCall_21_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_21_4() { return cRightParenthesisKeyword_21_4; }

		//{Expression} "java.lang.Math.floor" "(" number=ConditionalOrExpression ")"
		public Group getGroup_22() { return cGroup_22; }

		//{Expression}
		public Action getExpressionAction_22_0() { return cExpressionAction_22_0; }

		//"java.lang.Math.floor"
		public Keyword getJavaLangMathFloorKeyword_22_1() { return cJavaLangMathFloorKeyword_22_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_22_2() { return cLeftParenthesisKeyword_22_2; }

		//number=ConditionalOrExpression
		public Assignment getNumberAssignment_22_3() { return cNumberAssignment_22_3; }

		//ConditionalOrExpression
		public RuleCall getNumberConditionalOrExpressionParserRuleCall_22_3_0() { return cNumberConditionalOrExpressionParserRuleCall_22_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_22_4() { return cRightParenthesisKeyword_22_4; }

		//{Expression} "java.lang.Math.log" "(" number=ConditionalOrExpression ")"
		public Group getGroup_23() { return cGroup_23; }

		//{Expression}
		public Action getExpressionAction_23_0() { return cExpressionAction_23_0; }

		//"java.lang.Math.log"
		public Keyword getJavaLangMathLogKeyword_23_1() { return cJavaLangMathLogKeyword_23_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_23_2() { return cLeftParenthesisKeyword_23_2; }

		//number=ConditionalOrExpression
		public Assignment getNumberAssignment_23_3() { return cNumberAssignment_23_3; }

		//ConditionalOrExpression
		public RuleCall getNumberConditionalOrExpressionParserRuleCall_23_3_0() { return cNumberConditionalOrExpressionParserRuleCall_23_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_23_4() { return cRightParenthesisKeyword_23_4; }

		//{Expression} "JDOHelper.getObjectId" "(" persistable=ConditionalOrExpression ")"
		public Group getGroup_24() { return cGroup_24; }

		//{Expression}
		public Action getExpressionAction_24_0() { return cExpressionAction_24_0; }

		//"JDOHelper.getObjectId"
		public Keyword getJDOHelperGetObjectIdKeyword_24_1() { return cJDOHelperGetObjectIdKeyword_24_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_24_2() { return cLeftParenthesisKeyword_24_2; }

		//persistable=ConditionalOrExpression
		public Assignment getPersistableAssignment_24_3() { return cPersistableAssignment_24_3; }

		//ConditionalOrExpression
		public RuleCall getPersistableConditionalOrExpressionParserRuleCall_24_3_0() { return cPersistableConditionalOrExpressionParserRuleCall_24_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_24_4() { return cRightParenthesisKeyword_24_4; }

		//{Expression} "JDOHelper.getVersion" "(" persistable=ConditionalOrExpression ")"
		public Group getGroup_25() { return cGroup_25; }

		//{Expression}
		public Action getExpressionAction_25_0() { return cExpressionAction_25_0; }

		//"JDOHelper.getVersion"
		public Keyword getJDOHelperGetVersionKeyword_25_1() { return cJDOHelperGetVersionKeyword_25_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_25_2() { return cLeftParenthesisKeyword_25_2; }

		//persistable=ConditionalOrExpression
		public Assignment getPersistableAssignment_25_3() { return cPersistableAssignment_25_3; }

		//ConditionalOrExpression
		public RuleCall getPersistableConditionalOrExpressionParserRuleCall_25_3_0() { return cPersistableConditionalOrExpressionParserRuleCall_25_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_25_4() { return cRightParenthesisKeyword_25_4; }

		//{Expression} "javax.jdo.JDOHelper.getObjectId" "(" persistable=ConditionalOrExpression ")"
		public Group getGroup_26() { return cGroup_26; }

		//{Expression}
		public Action getExpressionAction_26_0() { return cExpressionAction_26_0; }

		//"javax.jdo.JDOHelper.getObjectId"
		public Keyword getJavaxJdoJDOHelperGetObjectIdKeyword_26_1() { return cJavaxJdoJDOHelperGetObjectIdKeyword_26_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_26_2() { return cLeftParenthesisKeyword_26_2; }

		//persistable=ConditionalOrExpression
		public Assignment getPersistableAssignment_26_3() { return cPersistableAssignment_26_3; }

		//ConditionalOrExpression
		public RuleCall getPersistableConditionalOrExpressionParserRuleCall_26_3_0() { return cPersistableConditionalOrExpressionParserRuleCall_26_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_26_4() { return cRightParenthesisKeyword_26_4; }

		//{Expression} "javax.jdo.JDOHelper.getVersion" "(" persistable=ConditionalOrExpression ")"
		public Group getGroup_27() { return cGroup_27; }

		//{Expression}
		public Action getExpressionAction_27_0() { return cExpressionAction_27_0; }

		//"javax.jdo.JDOHelper.getVersion"
		public Keyword getJavaxJdoJDOHelperGetVersionKeyword_27_1() { return cJavaxJdoJDOHelperGetVersionKeyword_27_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_27_2() { return cLeftParenthesisKeyword_27_2; }

		//persistable=ConditionalOrExpression
		public Assignment getPersistableAssignment_27_3() { return cPersistableAssignment_27_3; }

		//ConditionalOrExpression
		public RuleCall getPersistableConditionalOrExpressionParserRuleCall_27_3_0() { return cPersistableConditionalOrExpressionParserRuleCall_27_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_27_4() { return cRightParenthesisKeyword_27_4; }

		//// Would be cleaner to declare the following aggregate expressions separately, but here works for now.
		//// Marco :-)
		//{Expression} "count" "(" isDistinct?="DISTINCT"? aggregateArgument=ConditionalOrExpression ")"
		public Group getGroup_28() { return cGroup_28; }

		//// Would be cleaner to declare the following aggregate expressions separately, but here works for now.
		//// Marco :-)
		//{Expression}
		public Action getExpressionAction_28_0() { return cExpressionAction_28_0; }

		//"count"
		public Keyword getCountKeyword_28_1() { return cCountKeyword_28_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_28_2() { return cLeftParenthesisKeyword_28_2; }

		//isDistinct?="DISTINCT"?
		public Assignment getIsDistinctAssignment_28_3() { return cIsDistinctAssignment_28_3; }

		//"DISTINCT"
		public Keyword getIsDistinctDISTINCTKeyword_28_3_0() { return cIsDistinctDISTINCTKeyword_28_3_0; }

		//aggregateArgument=ConditionalOrExpression
		public Assignment getAggregateArgumentAssignment_28_4() { return cAggregateArgumentAssignment_28_4; }

		//ConditionalOrExpression
		public RuleCall getAggregateArgumentConditionalOrExpressionParserRuleCall_28_4_0() { return cAggregateArgumentConditionalOrExpressionParserRuleCall_28_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_28_5() { return cRightParenthesisKeyword_28_5; }

		//{Expression} "sum" "(" isDistinct?="DISTINCT"? aggregateArgument=ConditionalOrExpression ")"
		public Group getGroup_29() { return cGroup_29; }

		//{Expression}
		public Action getExpressionAction_29_0() { return cExpressionAction_29_0; }

		//"sum"
		public Keyword getSumKeyword_29_1() { return cSumKeyword_29_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_29_2() { return cLeftParenthesisKeyword_29_2; }

		//isDistinct?="DISTINCT"?
		public Assignment getIsDistinctAssignment_29_3() { return cIsDistinctAssignment_29_3; }

		//"DISTINCT"
		public Keyword getIsDistinctDISTINCTKeyword_29_3_0() { return cIsDistinctDISTINCTKeyword_29_3_0; }

		//aggregateArgument=ConditionalOrExpression
		public Assignment getAggregateArgumentAssignment_29_4() { return cAggregateArgumentAssignment_29_4; }

		//ConditionalOrExpression
		public RuleCall getAggregateArgumentConditionalOrExpressionParserRuleCall_29_4_0() { return cAggregateArgumentConditionalOrExpressionParserRuleCall_29_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_29_5() { return cRightParenthesisKeyword_29_5; }

		//{Expression} "min" "(" aggregateArgument=ConditionalOrExpression ")"
		public Group getGroup_30() { return cGroup_30; }

		//{Expression}
		public Action getExpressionAction_30_0() { return cExpressionAction_30_0; }

		//"min"
		public Keyword getMinKeyword_30_1() { return cMinKeyword_30_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_30_2() { return cLeftParenthesisKeyword_30_2; }

		//aggregateArgument=ConditionalOrExpression
		public Assignment getAggregateArgumentAssignment_30_3() { return cAggregateArgumentAssignment_30_3; }

		//ConditionalOrExpression
		public RuleCall getAggregateArgumentConditionalOrExpressionParserRuleCall_30_3_0() { return cAggregateArgumentConditionalOrExpressionParserRuleCall_30_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_30_4() { return cRightParenthesisKeyword_30_4; }

		//{Expression} "max" "(" aggregateArgument=ConditionalOrExpression ")"
		public Group getGroup_31() { return cGroup_31; }

		//{Expression}
		public Action getExpressionAction_31_0() { return cExpressionAction_31_0; }

		//"max"
		public Keyword getMaxKeyword_31_1() { return cMaxKeyword_31_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_31_2() { return cLeftParenthesisKeyword_31_2; }

		//aggregateArgument=ConditionalOrExpression
		public Assignment getAggregateArgumentAssignment_31_3() { return cAggregateArgumentAssignment_31_3; }

		//ConditionalOrExpression
		public RuleCall getAggregateArgumentConditionalOrExpressionParserRuleCall_31_3_0() { return cAggregateArgumentConditionalOrExpressionParserRuleCall_31_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_31_4() { return cRightParenthesisKeyword_31_4; }

		//{Expression} "avg" "(" isDistinct?="DISTINCT"? aggregateArgument=ConditionalOrExpression ")"
		public Group getGroup_32() { return cGroup_32; }

		//{Expression}
		public Action getExpressionAction_32_0() { return cExpressionAction_32_0; }

		//"avg"
		public Keyword getAvgKeyword_32_1() { return cAvgKeyword_32_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_32_2() { return cLeftParenthesisKeyword_32_2; }

		//isDistinct?="DISTINCT"?
		public Assignment getIsDistinctAssignment_32_3() { return cIsDistinctAssignment_32_3; }

		//"DISTINCT"
		public Keyword getIsDistinctDISTINCTKeyword_32_3_0() { return cIsDistinctDISTINCTKeyword_32_3_0; }

		//aggregateArgument=ConditionalOrExpression
		public Assignment getAggregateArgumentAssignment_32_4() { return cAggregateArgumentAssignment_32_4; }

		//ConditionalOrExpression
		public RuleCall getAggregateArgumentConditionalOrExpressionParserRuleCall_32_4_0() { return cAggregateArgumentConditionalOrExpressionParserRuleCall_32_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_32_5() { return cRightParenthesisKeyword_32_5; }
	}

	public class MethodExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MethodExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cContainsKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cElementAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cElementConditionalOrExpressionParserRuleCall_0_3_0 = (RuleCall)cElementAssignment_0_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cGetKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cArgAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cArgConditionalOrExpressionParserRuleCall_1_3_0 = (RuleCall)cArgAssignment_1_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cExpressionAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cIsEmptyKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cExpressionAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cSizeKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cExpressionAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cContainsKeyKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cKeyAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cKeyConditionalOrExpressionParserRuleCall_4_3_0 = (RuleCall)cKeyAssignment_4_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cExpressionAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Keyword cContainsValueKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Assignment cValueAssignment_5_3 = (Assignment)cGroup_5.eContents().get(3);
		private final RuleCall cValueConditionalOrExpressionParserRuleCall_5_3_0 = (RuleCall)cValueAssignment_5_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cExpressionAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Keyword cContainsEntryKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Assignment cKeyAssignment_6_3 = (Assignment)cGroup_6.eContents().get(3);
		private final RuleCall cKeyConditionalOrExpressionParserRuleCall_6_3_0 = (RuleCall)cKeyAssignment_6_3.eContents().get(0);
		private final Keyword cCommaKeyword_6_4 = (Keyword)cGroup_6.eContents().get(4);
		private final Assignment cValueAssignment_6_5 = (Assignment)cGroup_6.eContents().get(5);
		private final RuleCall cValueConditionalOrExpressionParserRuleCall_6_5_0 = (RuleCall)cValueAssignment_6_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6_6 = (Keyword)cGroup_6.eContents().get(6);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cExpressionAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Keyword cCharAtKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_7_2 = (Keyword)cGroup_7.eContents().get(2);
		private final Assignment cIndexAssignment_7_3 = (Assignment)cGroup_7.eContents().get(3);
		private final RuleCall cIndexConditionalOrExpressionParserRuleCall_7_3_0 = (RuleCall)cIndexAssignment_7_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7_4 = (Keyword)cGroup_7.eContents().get(4);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Action cExpressionAction_8_0 = (Action)cGroup_8.eContents().get(0);
		private final Keyword cEndsWithKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_8_2 = (Keyword)cGroup_8.eContents().get(2);
		private final Assignment cStringAssignment_8_3 = (Assignment)cGroup_8.eContents().get(3);
		private final RuleCall cStringConditionalOrExpressionParserRuleCall_8_3_0 = (RuleCall)cStringAssignment_8_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8_4 = (Keyword)cGroup_8.eContents().get(4);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Action cExpressionAction_9_0 = (Action)cGroup_9.eContents().get(0);
		private final Keyword cEqualsKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_9_2 = (Keyword)cGroup_9.eContents().get(2);
		private final Assignment cStringAssignment_9_3 = (Assignment)cGroup_9.eContents().get(3);
		private final RuleCall cStringConditionalOrExpressionParserRuleCall_9_3_0 = (RuleCall)cStringAssignment_9_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_9_4 = (Keyword)cGroup_9.eContents().get(4);
		private final Group cGroup_10 = (Group)cAlternatives.eContents().get(10);
		private final Action cExpressionAction_10_0 = (Action)cGroup_10.eContents().get(0);
		private final Keyword cEqualsIgnoreCaseKeyword_10_1 = (Keyword)cGroup_10.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_10_2 = (Keyword)cGroup_10.eContents().get(2);
		private final Assignment cStringAssignment_10_3 = (Assignment)cGroup_10.eContents().get(3);
		private final RuleCall cStringConditionalOrExpressionParserRuleCall_10_3_0 = (RuleCall)cStringAssignment_10_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_10_4 = (Keyword)cGroup_10.eContents().get(4);
		private final Group cGroup_11 = (Group)cAlternatives.eContents().get(11);
		private final Action cExpressionAction_11_0 = (Action)cGroup_11.eContents().get(0);
		private final Keyword cIndexOfKeyword_11_1 = (Keyword)cGroup_11.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_11_2 = (Keyword)cGroup_11.eContents().get(2);
		private final Assignment cStringAssignment_11_3 = (Assignment)cGroup_11.eContents().get(3);
		private final RuleCall cStringConditionalOrExpressionParserRuleCall_11_3_0 = (RuleCall)cStringAssignment_11_3.eContents().get(0);
		private final Group cGroup_11_4 = (Group)cGroup_11.eContents().get(4);
		private final Keyword cCommaKeyword_11_4_0 = (Keyword)cGroup_11_4.eContents().get(0);
		private final Assignment cFromIndexAssignment_11_4_1 = (Assignment)cGroup_11_4.eContents().get(1);
		private final RuleCall cFromIndexConditionalOrExpressionParserRuleCall_11_4_1_0 = (RuleCall)cFromIndexAssignment_11_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_11_5 = (Keyword)cGroup_11.eContents().get(5);
		private final Group cGroup_12 = (Group)cAlternatives.eContents().get(12);
		private final Action cExpressionAction_12_0 = (Action)cGroup_12.eContents().get(0);
		private final Keyword cLengthKeyword_12_1 = (Keyword)cGroup_12.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_12_2 = (Keyword)cGroup_12.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_12_3 = (Keyword)cGroup_12.eContents().get(3);
		private final Group cGroup_13 = (Group)cAlternatives.eContents().get(13);
		private final Action cExpressionAction_13_0 = (Action)cGroup_13.eContents().get(0);
		private final Keyword cMatchesKeyword_13_1 = (Keyword)cGroup_13.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_13_2 = (Keyword)cGroup_13.eContents().get(2);
		private final Assignment cRegexAssignment_13_3 = (Assignment)cGroup_13.eContents().get(3);
		private final RuleCall cRegexConditionalOrExpressionParserRuleCall_13_3_0 = (RuleCall)cRegexAssignment_13_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_13_4 = (Keyword)cGroup_13.eContents().get(4);
		private final Group cGroup_14 = (Group)cAlternatives.eContents().get(14);
		private final Action cExpressionAction_14_0 = (Action)cGroup_14.eContents().get(0);
		private final Keyword cReplaceAllKeyword_14_1 = (Keyword)cGroup_14.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_14_2 = (Keyword)cGroup_14.eContents().get(2);
		private final Assignment cRegexAssignment_14_3 = (Assignment)cGroup_14.eContents().get(3);
		private final RuleCall cRegexConditionalOrExpressionParserRuleCall_14_3_0 = (RuleCall)cRegexAssignment_14_3.eContents().get(0);
		private final Keyword cCommaKeyword_14_4 = (Keyword)cGroup_14.eContents().get(4);
		private final Assignment cReplacementAssignment_14_5 = (Assignment)cGroup_14.eContents().get(5);
		private final RuleCall cReplacementConditionalOrExpressionParserRuleCall_14_5_0 = (RuleCall)cReplacementAssignment_14_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_14_6 = (Keyword)cGroup_14.eContents().get(6);
		private final Group cGroup_15 = (Group)cAlternatives.eContents().get(15);
		private final Action cExpressionAction_15_0 = (Action)cGroup_15.eContents().get(0);
		private final Keyword cStartsWithKeyword_15_1 = (Keyword)cGroup_15.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_15_2 = (Keyword)cGroup_15.eContents().get(2);
		private final Assignment cStringAssignment_15_3 = (Assignment)cGroup_15.eContents().get(3);
		private final RuleCall cStringConditionalOrExpressionParserRuleCall_15_3_0 = (RuleCall)cStringAssignment_15_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_15_4 = (Keyword)cGroup_15.eContents().get(4);
		private final Group cGroup_16 = (Group)cAlternatives.eContents().get(16);
		private final Action cExpressionAction_16_0 = (Action)cGroup_16.eContents().get(0);
		private final Keyword cSubstringKeyword_16_1 = (Keyword)cGroup_16.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_16_2 = (Keyword)cGroup_16.eContents().get(2);
		private final Assignment cBeginIndexAssignment_16_3 = (Assignment)cGroup_16.eContents().get(3);
		private final RuleCall cBeginIndexConditionalOrExpressionParserRuleCall_16_3_0 = (RuleCall)cBeginIndexAssignment_16_3.eContents().get(0);
		private final Group cGroup_16_4 = (Group)cGroup_16.eContents().get(4);
		private final Keyword cCommaKeyword_16_4_0 = (Keyword)cGroup_16_4.eContents().get(0);
		private final Assignment cEndIndexAssignment_16_4_1 = (Assignment)cGroup_16_4.eContents().get(1);
		private final RuleCall cEndIndexConditionalOrExpressionParserRuleCall_16_4_1_0 = (RuleCall)cEndIndexAssignment_16_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_16_5 = (Keyword)cGroup_16.eContents().get(5);
		private final Group cGroup_17 = (Group)cAlternatives.eContents().get(17);
		private final Action cExpressionAction_17_0 = (Action)cGroup_17.eContents().get(0);
		private final Keyword cToLowerCaseKeyword_17_1 = (Keyword)cGroup_17.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_17_2 = (Keyword)cGroup_17.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_17_3 = (Keyword)cGroup_17.eContents().get(3);
		private final Group cGroup_18 = (Group)cAlternatives.eContents().get(18);
		private final Action cExpressionAction_18_0 = (Action)cGroup_18.eContents().get(0);
		private final Keyword cToUpperCaseKeyword_18_1 = (Keyword)cGroup_18.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_18_2 = (Keyword)cGroup_18.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_18_3 = (Keyword)cGroup_18.eContents().get(3);
		private final Group cGroup_19 = (Group)cAlternatives.eContents().get(19);
		private final Action cExpressionAction_19_0 = (Action)cGroup_19.eContents().get(0);
		private final Keyword cTrimKeyword_19_1 = (Keyword)cGroup_19.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_19_2 = (Keyword)cGroup_19.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_19_3 = (Keyword)cGroup_19.eContents().get(3);
		private final Group cGroup_20 = (Group)cAlternatives.eContents().get(20);
		private final Action cExpressionAction_20_0 = (Action)cGroup_20.eContents().get(0);
		private final Keyword cGetDayKeyword_20_1 = (Keyword)cGroup_20.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_20_2 = (Keyword)cGroup_20.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_20_3 = (Keyword)cGroup_20.eContents().get(3);
		private final Group cGroup_21 = (Group)cAlternatives.eContents().get(21);
		private final Action cExpressionAction_21_0 = (Action)cGroup_21.eContents().get(0);
		private final Keyword cGetMonthKeyword_21_1 = (Keyword)cGroup_21.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_21_2 = (Keyword)cGroup_21.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_21_3 = (Keyword)cGroup_21.eContents().get(3);
		private final Group cGroup_22 = (Group)cAlternatives.eContents().get(22);
		private final Action cExpressionAction_22_0 = (Action)cGroup_22.eContents().get(0);
		private final Keyword cGetYearKeyword_22_1 = (Keyword)cGroup_22.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_22_2 = (Keyword)cGroup_22.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_22_3 = (Keyword)cGroup_22.eContents().get(3);
		private final Group cGroup_23 = (Group)cAlternatives.eContents().get(23);
		private final Action cExpressionAction_23_0 = (Action)cGroup_23.eContents().get(0);
		private final Keyword cGetHourKeyword_23_1 = (Keyword)cGroup_23.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_23_2 = (Keyword)cGroup_23.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_23_3 = (Keyword)cGroup_23.eContents().get(3);
		private final Group cGroup_24 = (Group)cAlternatives.eContents().get(24);
		private final Action cExpressionAction_24_0 = (Action)cGroup_24.eContents().get(0);
		private final Keyword cGetMinuteKeyword_24_1 = (Keyword)cGroup_24.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_24_2 = (Keyword)cGroup_24.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_24_3 = (Keyword)cGroup_24.eContents().get(3);
		private final Group cGroup_25 = (Group)cAlternatives.eContents().get(25);
		private final Action cExpressionAction_25_0 = (Action)cGroup_25.eContents().get(0);
		private final Keyword cGetSecondKeyword_25_1 = (Keyword)cGroup_25.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_25_2 = (Keyword)cGroup_25.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_25_3 = (Keyword)cGroup_25.eContents().get(3);
		private final Group cGroup_26 = (Group)cAlternatives.eContents().get(26);
		private final Action cExpressionAction_26_0 = (Action)cGroup_26.eContents().get(0);
		private final Keyword cOrdinalKeyword_26_1 = (Keyword)cGroup_26.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_26_2 = (Keyword)cGroup_26.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_26_3 = (Keyword)cGroup_26.eContents().get(3);
		private final Group cGroup_27 = (Group)cAlternatives.eContents().get(27);
		private final Action cExpressionAction_27_0 = (Action)cGroup_27.eContents().get(0);
		private final Keyword cToStringKeyword_27_1 = (Keyword)cGroup_27.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_27_2 = (Keyword)cGroup_27.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_27_3 = (Keyword)cGroup_27.eContents().get(3);
		
		//// END Enum methods
		//MethodExpression returns Expression: // BEGIN Collection methods
		//	{Expression} "contains" "(" element=ConditionalOrExpression ")" // arg is the index in case of a List
		//	| {Expression} "get" "(" arg=ConditionalOrExpression ")" | {Expression} "isEmpty" "(" ")" | {Expression} "size" "(" ")"
		//	| // END Collection methods
		//	// BEGIN Map methods
		//	{Expression} "containsKey" "(" key=ConditionalOrExpression ")" | {Expression} "containsValue" "("
		//	value=ConditionalOrExpression ")" | //	{Expression} 'isEmpty' '(' ')' | // already declared as Collection method - cannot redeclare
		//	//	{Expression} 'size' '(' ')' | // already declared as Collection method - cannot redeclare
		//	//	{Expression} 'get' '(' arg=ConditionalOrExpression ')' | // arg is the key, but already declared as Collection method - cannot redeclare
		//	{Expression} "containsEntry" "(" key=ConditionalOrExpression "," value=ConditionalOrExpression ")" | // END Map methods
		//	// BEGIN String methods
		//	{Expression} "charAt" "(" index=ConditionalOrExpression ")" | {Expression} "endsWith" "("
		//	string=ConditionalOrExpression ")" | {Expression} "equals" "(" string=ConditionalOrExpression ")" | {Expression}
		//	"equalsIgnoreCase" "(" string=ConditionalOrExpression ")" | {Expression} "indexOf" "(" string=ConditionalOrExpression
		//	("," fromIndex=ConditionalOrExpression)? ")" | {Expression} "length" "(" ")" | {Expression} "matches" "("
		//	regex=ConditionalOrExpression ")" | {Expression} "replaceAll" "(" regex=ConditionalOrExpression ","
		//	replacement=ConditionalOrExpression ")" | {Expression} "startsWith" "(" string=ConditionalOrExpression ")" |
		//	{Expression} "substring" "(" beginIndex=ConditionalOrExpression ("," endIndex=ConditionalOrExpression)? ")" |
		//	{Expression} "toLowerCase" "(" ")" | {Expression} "toUpperCase" "(" ")" | {Expression} "trim" "(" ")" | // END String methods
		//	// BEGIN Temporal methods
		//	{Expression} "getDay" "(" ")" | {Expression} "getMonth" "(" ")" | {Expression} "getYear" "(" ")" | {Expression}
		//	"getHour" "(" ")" | {Expression} "getMinute" "(" ")" | {Expression} "getSecond" "(" ")" | // END Temporal methods
		//	// BEGIN Enum methods
		//	{Expression} "ordinal" "(" ")" | {Expression} "toString" "(" ")";
		public ParserRule getRule() { return rule; }

		//// BEGIN Collection methods
		//{Expression} "contains" "(" element=ConditionalOrExpression ")" // arg is the index in case of a List
		//| {Expression} "get" "(" arg=ConditionalOrExpression ")" | {Expression} "isEmpty" "(" ")" | {Expression} "size" "(" ")"
		//| // END Collection methods
		//// BEGIN Map methods
		//{Expression} "containsKey" "(" key=ConditionalOrExpression ")" | {Expression} "containsValue" "("
		//value=ConditionalOrExpression ")" | //	{Expression} 'isEmpty' '(' ')' | // already declared as Collection method - cannot redeclare
		////	{Expression} 'size' '(' ')' | // already declared as Collection method - cannot redeclare
		////	{Expression} 'get' '(' arg=ConditionalOrExpression ')' | // arg is the key, but already declared as Collection method - cannot redeclare
		//{Expression} "containsEntry" "(" key=ConditionalOrExpression "," value=ConditionalOrExpression ")" | // END Map methods
		//// BEGIN String methods
		//{Expression} "charAt" "(" index=ConditionalOrExpression ")" | {Expression} "endsWith" "(" string=ConditionalOrExpression
		//")" | {Expression} "equals" "(" string=ConditionalOrExpression ")" | {Expression} "equalsIgnoreCase" "("
		//string=ConditionalOrExpression ")" | {Expression} "indexOf" "(" string=ConditionalOrExpression (","
		//fromIndex=ConditionalOrExpression)? ")" | {Expression} "length" "(" ")" | {Expression} "matches" "("
		//regex=ConditionalOrExpression ")" | {Expression} "replaceAll" "(" regex=ConditionalOrExpression ","
		//replacement=ConditionalOrExpression ")" | {Expression} "startsWith" "(" string=ConditionalOrExpression ")" |
		//{Expression} "substring" "(" beginIndex=ConditionalOrExpression ("," endIndex=ConditionalOrExpression)? ")" |
		//{Expression} "toLowerCase" "(" ")" | {Expression} "toUpperCase" "(" ")" | {Expression} "trim" "(" ")" | // END String methods
		//// BEGIN Temporal methods
		//{Expression} "getDay" "(" ")" | {Expression} "getMonth" "(" ")" | {Expression} "getYear" "(" ")" | {Expression}
		//"getHour" "(" ")" | {Expression} "getMinute" "(" ")" | {Expression} "getSecond" "(" ")" | // END Temporal methods
		//// BEGIN Enum methods
		//{Expression} "ordinal" "(" ")" | {Expression} "toString" "(" ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//// BEGIN Collection methods
		//{Expression} "contains" "(" element=ConditionalOrExpression ")"
		public Group getGroup_0() { return cGroup_0; }

		//// BEGIN Collection methods
		//{Expression}
		public Action getExpressionAction_0_0() { return cExpressionAction_0_0; }

		//"contains"
		public Keyword getContainsKeyword_0_1() { return cContainsKeyword_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_2() { return cLeftParenthesisKeyword_0_2; }

		//element=ConditionalOrExpression
		public Assignment getElementAssignment_0_3() { return cElementAssignment_0_3; }

		//ConditionalOrExpression
		public RuleCall getElementConditionalOrExpressionParserRuleCall_0_3_0() { return cElementConditionalOrExpressionParserRuleCall_0_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_4() { return cRightParenthesisKeyword_0_4; }

		//{Expression} "get" "(" arg=ConditionalOrExpression ")"
		public Group getGroup_1() { return cGroup_1; }

		//{Expression}
		public Action getExpressionAction_1_0() { return cExpressionAction_1_0; }

		//"get"
		public Keyword getGetKeyword_1_1() { return cGetKeyword_1_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_2() { return cLeftParenthesisKeyword_1_2; }

		//arg=ConditionalOrExpression
		public Assignment getArgAssignment_1_3() { return cArgAssignment_1_3; }

		//ConditionalOrExpression
		public RuleCall getArgConditionalOrExpressionParserRuleCall_1_3_0() { return cArgConditionalOrExpressionParserRuleCall_1_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_4() { return cRightParenthesisKeyword_1_4; }

		//{Expression} "isEmpty" "(" ")"
		public Group getGroup_2() { return cGroup_2; }

		//{Expression}
		public Action getExpressionAction_2_0() { return cExpressionAction_2_0; }

		//"isEmpty"
		public Keyword getIsEmptyKeyword_2_1() { return cIsEmptyKeyword_2_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_2() { return cLeftParenthesisKeyword_2_2; }

		//")"
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }

		//{Expression} "size" "(" ")"
		public Group getGroup_3() { return cGroup_3; }

		//{Expression}
		public Action getExpressionAction_3_0() { return cExpressionAction_3_0; }

		//"size"
		public Keyword getSizeKeyword_3_1() { return cSizeKeyword_3_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_2() { return cLeftParenthesisKeyword_3_2; }

		//")"
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }

		//// END Collection methods
		//// BEGIN Map methods
		//{Expression} "containsKey" "(" key=ConditionalOrExpression ")"
		public Group getGroup_4() { return cGroup_4; }

		//// END Collection methods
		//// BEGIN Map methods
		//{Expression}
		public Action getExpressionAction_4_0() { return cExpressionAction_4_0; }

		//"containsKey"
		public Keyword getContainsKeyKeyword_4_1() { return cContainsKeyKeyword_4_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_4_2() { return cLeftParenthesisKeyword_4_2; }

		//key=ConditionalOrExpression
		public Assignment getKeyAssignment_4_3() { return cKeyAssignment_4_3; }

		//ConditionalOrExpression
		public RuleCall getKeyConditionalOrExpressionParserRuleCall_4_3_0() { return cKeyConditionalOrExpressionParserRuleCall_4_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4_4() { return cRightParenthesisKeyword_4_4; }

		//{Expression} "containsValue" "(" value=ConditionalOrExpression ")"
		public Group getGroup_5() { return cGroup_5; }

		//{Expression}
		public Action getExpressionAction_5_0() { return cExpressionAction_5_0; }

		//"containsValue"
		public Keyword getContainsValueKeyword_5_1() { return cContainsValueKeyword_5_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_5_2() { return cLeftParenthesisKeyword_5_2; }

		//value=ConditionalOrExpression
		public Assignment getValueAssignment_5_3() { return cValueAssignment_5_3; }

		//ConditionalOrExpression
		public RuleCall getValueConditionalOrExpressionParserRuleCall_5_3_0() { return cValueConditionalOrExpressionParserRuleCall_5_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5_4() { return cRightParenthesisKeyword_5_4; }

		////	{Expression} 'isEmpty' '(' ')' | // already declared as Collection method - cannot redeclare
		////	{Expression} 'size' '(' ')' | // already declared as Collection method - cannot redeclare
		////	{Expression} 'get' '(' arg=ConditionalOrExpression ')' | // arg is the key, but already declared as Collection method - cannot redeclare
		//{Expression} "containsEntry" "(" key=ConditionalOrExpression "," value=ConditionalOrExpression ")"
		public Group getGroup_6() { return cGroup_6; }

		////	{Expression} 'isEmpty' '(' ')' | // already declared as Collection method - cannot redeclare
		////	{Expression} 'size' '(' ')' | // already declared as Collection method - cannot redeclare
		////	{Expression} 'get' '(' arg=ConditionalOrExpression ')' | // arg is the key, but already declared as Collection method - cannot redeclare
		//{Expression}
		public Action getExpressionAction_6_0() { return cExpressionAction_6_0; }

		//"containsEntry"
		public Keyword getContainsEntryKeyword_6_1() { return cContainsEntryKeyword_6_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_6_2() { return cLeftParenthesisKeyword_6_2; }

		//key=ConditionalOrExpression
		public Assignment getKeyAssignment_6_3() { return cKeyAssignment_6_3; }

		//ConditionalOrExpression
		public RuleCall getKeyConditionalOrExpressionParserRuleCall_6_3_0() { return cKeyConditionalOrExpressionParserRuleCall_6_3_0; }

		//","
		public Keyword getCommaKeyword_6_4() { return cCommaKeyword_6_4; }

		//value=ConditionalOrExpression
		public Assignment getValueAssignment_6_5() { return cValueAssignment_6_5; }

		//ConditionalOrExpression
		public RuleCall getValueConditionalOrExpressionParserRuleCall_6_5_0() { return cValueConditionalOrExpressionParserRuleCall_6_5_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6_6() { return cRightParenthesisKeyword_6_6; }

		//// END Map methods
		//// BEGIN String methods
		//{Expression} "charAt" "(" index=ConditionalOrExpression ")"
		public Group getGroup_7() { return cGroup_7; }

		//// END Map methods
		//// BEGIN String methods
		//{Expression}
		public Action getExpressionAction_7_0() { return cExpressionAction_7_0; }

		//"charAt"
		public Keyword getCharAtKeyword_7_1() { return cCharAtKeyword_7_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_7_2() { return cLeftParenthesisKeyword_7_2; }

		//index=ConditionalOrExpression
		public Assignment getIndexAssignment_7_3() { return cIndexAssignment_7_3; }

		//ConditionalOrExpression
		public RuleCall getIndexConditionalOrExpressionParserRuleCall_7_3_0() { return cIndexConditionalOrExpressionParserRuleCall_7_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_7_4() { return cRightParenthesisKeyword_7_4; }

		//{Expression} "endsWith" "(" string=ConditionalOrExpression ")"
		public Group getGroup_8() { return cGroup_8; }

		//{Expression}
		public Action getExpressionAction_8_0() { return cExpressionAction_8_0; }

		//"endsWith"
		public Keyword getEndsWithKeyword_8_1() { return cEndsWithKeyword_8_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_8_2() { return cLeftParenthesisKeyword_8_2; }

		//string=ConditionalOrExpression
		public Assignment getStringAssignment_8_3() { return cStringAssignment_8_3; }

		//ConditionalOrExpression
		public RuleCall getStringConditionalOrExpressionParserRuleCall_8_3_0() { return cStringConditionalOrExpressionParserRuleCall_8_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_8_4() { return cRightParenthesisKeyword_8_4; }

		//{Expression} "equals" "(" string=ConditionalOrExpression ")"
		public Group getGroup_9() { return cGroup_9; }

		//{Expression}
		public Action getExpressionAction_9_0() { return cExpressionAction_9_0; }

		//"equals"
		public Keyword getEqualsKeyword_9_1() { return cEqualsKeyword_9_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_9_2() { return cLeftParenthesisKeyword_9_2; }

		//string=ConditionalOrExpression
		public Assignment getStringAssignment_9_3() { return cStringAssignment_9_3; }

		//ConditionalOrExpression
		public RuleCall getStringConditionalOrExpressionParserRuleCall_9_3_0() { return cStringConditionalOrExpressionParserRuleCall_9_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_9_4() { return cRightParenthesisKeyword_9_4; }

		//{Expression} "equalsIgnoreCase" "(" string=ConditionalOrExpression ")"
		public Group getGroup_10() { return cGroup_10; }

		//{Expression}
		public Action getExpressionAction_10_0() { return cExpressionAction_10_0; }

		//"equalsIgnoreCase"
		public Keyword getEqualsIgnoreCaseKeyword_10_1() { return cEqualsIgnoreCaseKeyword_10_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_10_2() { return cLeftParenthesisKeyword_10_2; }

		//string=ConditionalOrExpression
		public Assignment getStringAssignment_10_3() { return cStringAssignment_10_3; }

		//ConditionalOrExpression
		public RuleCall getStringConditionalOrExpressionParserRuleCall_10_3_0() { return cStringConditionalOrExpressionParserRuleCall_10_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_10_4() { return cRightParenthesisKeyword_10_4; }

		//{Expression} "indexOf" "(" string=ConditionalOrExpression ("," fromIndex=ConditionalOrExpression)? ")"
		public Group getGroup_11() { return cGroup_11; }

		//{Expression}
		public Action getExpressionAction_11_0() { return cExpressionAction_11_0; }

		//"indexOf"
		public Keyword getIndexOfKeyword_11_1() { return cIndexOfKeyword_11_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_11_2() { return cLeftParenthesisKeyword_11_2; }

		//string=ConditionalOrExpression
		public Assignment getStringAssignment_11_3() { return cStringAssignment_11_3; }

		//ConditionalOrExpression
		public RuleCall getStringConditionalOrExpressionParserRuleCall_11_3_0() { return cStringConditionalOrExpressionParserRuleCall_11_3_0; }

		//("," fromIndex=ConditionalOrExpression)?
		public Group getGroup_11_4() { return cGroup_11_4; }

		//","
		public Keyword getCommaKeyword_11_4_0() { return cCommaKeyword_11_4_0; }

		//fromIndex=ConditionalOrExpression
		public Assignment getFromIndexAssignment_11_4_1() { return cFromIndexAssignment_11_4_1; }

		//ConditionalOrExpression
		public RuleCall getFromIndexConditionalOrExpressionParserRuleCall_11_4_1_0() { return cFromIndexConditionalOrExpressionParserRuleCall_11_4_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_11_5() { return cRightParenthesisKeyword_11_5; }

		//{Expression} "length" "(" ")"
		public Group getGroup_12() { return cGroup_12; }

		//{Expression}
		public Action getExpressionAction_12_0() { return cExpressionAction_12_0; }

		//"length"
		public Keyword getLengthKeyword_12_1() { return cLengthKeyword_12_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_12_2() { return cLeftParenthesisKeyword_12_2; }

		//")"
		public Keyword getRightParenthesisKeyword_12_3() { return cRightParenthesisKeyword_12_3; }

		//{Expression} "matches" "(" regex=ConditionalOrExpression ")"
		public Group getGroup_13() { return cGroup_13; }

		//{Expression}
		public Action getExpressionAction_13_0() { return cExpressionAction_13_0; }

		//"matches"
		public Keyword getMatchesKeyword_13_1() { return cMatchesKeyword_13_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_13_2() { return cLeftParenthesisKeyword_13_2; }

		//regex=ConditionalOrExpression
		public Assignment getRegexAssignment_13_3() { return cRegexAssignment_13_3; }

		//ConditionalOrExpression
		public RuleCall getRegexConditionalOrExpressionParserRuleCall_13_3_0() { return cRegexConditionalOrExpressionParserRuleCall_13_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_13_4() { return cRightParenthesisKeyword_13_4; }

		//{Expression} "replaceAll" "(" regex=ConditionalOrExpression "," replacement=ConditionalOrExpression ")"
		public Group getGroup_14() { return cGroup_14; }

		//{Expression}
		public Action getExpressionAction_14_0() { return cExpressionAction_14_0; }

		//"replaceAll"
		public Keyword getReplaceAllKeyword_14_1() { return cReplaceAllKeyword_14_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_14_2() { return cLeftParenthesisKeyword_14_2; }

		//regex=ConditionalOrExpression
		public Assignment getRegexAssignment_14_3() { return cRegexAssignment_14_3; }

		//ConditionalOrExpression
		public RuleCall getRegexConditionalOrExpressionParserRuleCall_14_3_0() { return cRegexConditionalOrExpressionParserRuleCall_14_3_0; }

		//","
		public Keyword getCommaKeyword_14_4() { return cCommaKeyword_14_4; }

		//replacement=ConditionalOrExpression
		public Assignment getReplacementAssignment_14_5() { return cReplacementAssignment_14_5; }

		//ConditionalOrExpression
		public RuleCall getReplacementConditionalOrExpressionParserRuleCall_14_5_0() { return cReplacementConditionalOrExpressionParserRuleCall_14_5_0; }

		//")"
		public Keyword getRightParenthesisKeyword_14_6() { return cRightParenthesisKeyword_14_6; }

		//{Expression} "startsWith" "(" string=ConditionalOrExpression ")"
		public Group getGroup_15() { return cGroup_15; }

		//{Expression}
		public Action getExpressionAction_15_0() { return cExpressionAction_15_0; }

		//"startsWith"
		public Keyword getStartsWithKeyword_15_1() { return cStartsWithKeyword_15_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_15_2() { return cLeftParenthesisKeyword_15_2; }

		//string=ConditionalOrExpression
		public Assignment getStringAssignment_15_3() { return cStringAssignment_15_3; }

		//ConditionalOrExpression
		public RuleCall getStringConditionalOrExpressionParserRuleCall_15_3_0() { return cStringConditionalOrExpressionParserRuleCall_15_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_15_4() { return cRightParenthesisKeyword_15_4; }

		//{Expression} "substring" "(" beginIndex=ConditionalOrExpression ("," endIndex=ConditionalOrExpression)? ")"
		public Group getGroup_16() { return cGroup_16; }

		//{Expression}
		public Action getExpressionAction_16_0() { return cExpressionAction_16_0; }

		//"substring"
		public Keyword getSubstringKeyword_16_1() { return cSubstringKeyword_16_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_16_2() { return cLeftParenthesisKeyword_16_2; }

		//beginIndex=ConditionalOrExpression
		public Assignment getBeginIndexAssignment_16_3() { return cBeginIndexAssignment_16_3; }

		//ConditionalOrExpression
		public RuleCall getBeginIndexConditionalOrExpressionParserRuleCall_16_3_0() { return cBeginIndexConditionalOrExpressionParserRuleCall_16_3_0; }

		//("," endIndex=ConditionalOrExpression)?
		public Group getGroup_16_4() { return cGroup_16_4; }

		//","
		public Keyword getCommaKeyword_16_4_0() { return cCommaKeyword_16_4_0; }

		//endIndex=ConditionalOrExpression
		public Assignment getEndIndexAssignment_16_4_1() { return cEndIndexAssignment_16_4_1; }

		//ConditionalOrExpression
		public RuleCall getEndIndexConditionalOrExpressionParserRuleCall_16_4_1_0() { return cEndIndexConditionalOrExpressionParserRuleCall_16_4_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_16_5() { return cRightParenthesisKeyword_16_5; }

		//{Expression} "toLowerCase" "(" ")"
		public Group getGroup_17() { return cGroup_17; }

		//{Expression}
		public Action getExpressionAction_17_0() { return cExpressionAction_17_0; }

		//"toLowerCase"
		public Keyword getToLowerCaseKeyword_17_1() { return cToLowerCaseKeyword_17_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_17_2() { return cLeftParenthesisKeyword_17_2; }

		//")"
		public Keyword getRightParenthesisKeyword_17_3() { return cRightParenthesisKeyword_17_3; }

		//{Expression} "toUpperCase" "(" ")"
		public Group getGroup_18() { return cGroup_18; }

		//{Expression}
		public Action getExpressionAction_18_0() { return cExpressionAction_18_0; }

		//"toUpperCase"
		public Keyword getToUpperCaseKeyword_18_1() { return cToUpperCaseKeyword_18_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_18_2() { return cLeftParenthesisKeyword_18_2; }

		//")"
		public Keyword getRightParenthesisKeyword_18_3() { return cRightParenthesisKeyword_18_3; }

		//{Expression} "trim" "(" ")"
		public Group getGroup_19() { return cGroup_19; }

		//{Expression}
		public Action getExpressionAction_19_0() { return cExpressionAction_19_0; }

		//"trim"
		public Keyword getTrimKeyword_19_1() { return cTrimKeyword_19_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_19_2() { return cLeftParenthesisKeyword_19_2; }

		//")"
		public Keyword getRightParenthesisKeyword_19_3() { return cRightParenthesisKeyword_19_3; }

		//// END String methods
		//// BEGIN Temporal methods
		//{Expression} "getDay" "(" ")"
		public Group getGroup_20() { return cGroup_20; }

		//// END String methods
		//// BEGIN Temporal methods
		//{Expression}
		public Action getExpressionAction_20_0() { return cExpressionAction_20_0; }

		//"getDay"
		public Keyword getGetDayKeyword_20_1() { return cGetDayKeyword_20_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_20_2() { return cLeftParenthesisKeyword_20_2; }

		//")"
		public Keyword getRightParenthesisKeyword_20_3() { return cRightParenthesisKeyword_20_3; }

		//{Expression} "getMonth" "(" ")"
		public Group getGroup_21() { return cGroup_21; }

		//{Expression}
		public Action getExpressionAction_21_0() { return cExpressionAction_21_0; }

		//"getMonth"
		public Keyword getGetMonthKeyword_21_1() { return cGetMonthKeyword_21_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_21_2() { return cLeftParenthesisKeyword_21_2; }

		//")"
		public Keyword getRightParenthesisKeyword_21_3() { return cRightParenthesisKeyword_21_3; }

		//{Expression} "getYear" "(" ")"
		public Group getGroup_22() { return cGroup_22; }

		//{Expression}
		public Action getExpressionAction_22_0() { return cExpressionAction_22_0; }

		//"getYear"
		public Keyword getGetYearKeyword_22_1() { return cGetYearKeyword_22_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_22_2() { return cLeftParenthesisKeyword_22_2; }

		//")"
		public Keyword getRightParenthesisKeyword_22_3() { return cRightParenthesisKeyword_22_3; }

		//{Expression} "getHour" "(" ")"
		public Group getGroup_23() { return cGroup_23; }

		//{Expression}
		public Action getExpressionAction_23_0() { return cExpressionAction_23_0; }

		//"getHour"
		public Keyword getGetHourKeyword_23_1() { return cGetHourKeyword_23_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_23_2() { return cLeftParenthesisKeyword_23_2; }

		//")"
		public Keyword getRightParenthesisKeyword_23_3() { return cRightParenthesisKeyword_23_3; }

		//{Expression} "getMinute" "(" ")"
		public Group getGroup_24() { return cGroup_24; }

		//{Expression}
		public Action getExpressionAction_24_0() { return cExpressionAction_24_0; }

		//"getMinute"
		public Keyword getGetMinuteKeyword_24_1() { return cGetMinuteKeyword_24_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_24_2() { return cLeftParenthesisKeyword_24_2; }

		//")"
		public Keyword getRightParenthesisKeyword_24_3() { return cRightParenthesisKeyword_24_3; }

		//{Expression} "getSecond" "(" ")"
		public Group getGroup_25() { return cGroup_25; }

		//{Expression}
		public Action getExpressionAction_25_0() { return cExpressionAction_25_0; }

		//"getSecond"
		public Keyword getGetSecondKeyword_25_1() { return cGetSecondKeyword_25_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_25_2() { return cLeftParenthesisKeyword_25_2; }

		//")"
		public Keyword getRightParenthesisKeyword_25_3() { return cRightParenthesisKeyword_25_3; }

		//// END Temporal methods
		//// BEGIN Enum methods
		//{Expression} "ordinal" "(" ")"
		public Group getGroup_26() { return cGroup_26; }

		//// END Temporal methods
		//// BEGIN Enum methods
		//{Expression}
		public Action getExpressionAction_26_0() { return cExpressionAction_26_0; }

		//"ordinal"
		public Keyword getOrdinalKeyword_26_1() { return cOrdinalKeyword_26_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_26_2() { return cLeftParenthesisKeyword_26_2; }

		//")"
		public Keyword getRightParenthesisKeyword_26_3() { return cRightParenthesisKeyword_26_3; }

		//{Expression} "toString" "(" ")"
		public Group getGroup_27() { return cGroup_27; }

		//{Expression}
		public Action getExpressionAction_27_0() { return cExpressionAction_27_0; }

		//"toString"
		public Keyword getToStringKeyword_27_1() { return cToStringKeyword_27_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_27_2() { return cLeftParenthesisKeyword_27_2; }

		//")"
		public Keyword getRightParenthesisKeyword_27_3() { return cRightParenthesisKeyword_27_3; }
	}

	public class ParenthesesExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParenthesesExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cConditionalOrExpressionParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cSubqueryParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ParenthesesExpression returns Expression:
		//	"(" (ConditionalOrExpression | Subquery) ")";
		public ParserRule getRule() { return rule; }

		//"(" (ConditionalOrExpression | Subquery) ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//ConditionalOrExpression | Subquery
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//ConditionalOrExpression
		public RuleCall getConditionalOrExpressionParserRuleCall_1_0() { return cConditionalOrExpressionParserRuleCall_1_0; }

		//Subquery
		public RuleCall getSubqueryParserRuleCall_1_1() { return cSubqueryParserRuleCall_1_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimitiveTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cClassOrInterfaceNameParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Type:
		//	PrimitiveType | ClassOrInterfaceName;
		public ParserRule getRule() { return rule; }

		//PrimitiveType | ClassOrInterfaceName
		public Alternatives getAlternatives() { return cAlternatives; }

		//PrimitiveType
		public RuleCall getPrimitiveTypeParserRuleCall_0() { return cPrimitiveTypeParserRuleCall_0; }

		//ClassOrInterfaceName
		public RuleCall getClassOrInterfaceNameParserRuleCall_1() { return cClassOrInterfaceNameParserRuleCall_1; }
	}

	public class PrimitiveTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimitiveType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNumericTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cBooleanKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//PrimitiveType:
		//	NumericType | "boolean";
		public ParserRule getRule() { return rule; }

		//NumericType | "boolean"
		public Alternatives getAlternatives() { return cAlternatives; }

		//NumericType
		public RuleCall getNumericTypeParserRuleCall_0() { return cNumericTypeParserRuleCall_0; }

		//"boolean"
		public Keyword getBooleanKeyword_1() { return cBooleanKeyword_1; }
	}

	public class NumericTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumericType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntegralTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFloatingPointTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//NumericType:
		//	IntegralType | FloatingPointType;
		public ParserRule getRule() { return rule; }

		//IntegralType | FloatingPointType
		public Alternatives getAlternatives() { return cAlternatives; }

		//IntegralType
		public RuleCall getIntegralTypeParserRuleCall_0() { return cIntegralTypeParserRuleCall_0; }

		//FloatingPointType
		public RuleCall getFloatingPointTypeParserRuleCall_1() { return cFloatingPointTypeParserRuleCall_1; }
	}

	public class IntegralTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegralType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cByteKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cShortKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cIntKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLongKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cCharKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//IntegralType:
		//	"byte" | "short" | "int" | "long" | "char";
		public ParserRule getRule() { return rule; }

		//"byte" | "short" | "int" | "long" | "char"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"byte"
		public Keyword getByteKeyword_0() { return cByteKeyword_0; }

		//"short"
		public Keyword getShortKeyword_1() { return cShortKeyword_1; }

		//"int"
		public Keyword getIntKeyword_2() { return cIntKeyword_2; }

		//"long"
		public Keyword getLongKeyword_3() { return cLongKeyword_3; }

		//"char"
		public Keyword getCharKeyword_4() { return cCharKeyword_4; }
	}

	public class FloatingPointTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FloatingPointType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cFloatKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cDoubleKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//FloatingPointType:
		//	"float" | "double";
		public ParserRule getRule() { return rule; }

		//"float" | "double"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"float"
		public Keyword getFloatKeyword_0() { return cFloatKeyword_0; }

		//"double"
		public Keyword getDoubleKeyword_1() { return cDoubleKeyword_1; }
	}

	public class IntegerLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerLiteral");
		private final RuleCall cINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//IntegerLiteral:
		//	INT;
		public ParserRule getRule() { return rule; }

		//INT
		public RuleCall getINTTerminalRuleCall() { return cINTTerminalRuleCall; }
	}

	public class StringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringLiteral");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//StringLiteral:
		//	STRING;
		public ParserRule getRule() { return rule; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}

	public class BooleanLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//BooleanLiteral:
		//	"true" | "false";
		public ParserRule getRule() { return rule; }

		//"true" | "false"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"true"
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }

		//"false"
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}

	public class NullLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NullLiteral");
		private final Keyword cNullKeyword = (Keyword)rule.eContents().get(1);
		
		//NullLiteral:
		//	"null";
		public ParserRule getRule() { return rule; }

		//"null"
		public Keyword getNullKeyword() { return cNullKeyword; }
	}

	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntegerLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBooleanLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStringLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cNullLiteralParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Literal:
		//	IntegerLiteral | BooleanLiteral | StringLiteral | NullLiteral;
		public ParserRule getRule() { return rule; }

		//IntegerLiteral | BooleanLiteral | StringLiteral | NullLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//IntegerLiteral
		public RuleCall getIntegerLiteralParserRuleCall_0() { return cIntegerLiteralParserRuleCall_0; }

		//BooleanLiteral
		public RuleCall getBooleanLiteralParserRuleCall_1() { return cBooleanLiteralParserRuleCall_1; }

		//StringLiteral
		public RuleCall getStringLiteralParserRuleCall_2() { return cStringLiteralParserRuleCall_2; }

		//NullLiteral
		public RuleCall getNullLiteralParserRuleCall_3() { return cNullLiteralParserRuleCall_3; }
	}

	public class QualifiedIdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedIdentifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cJavaLangBooleanKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cJavaLangByteKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cJavaLangCharacterKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cJavaLangDoubleKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cJavaLangFloatKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cJavaLangIntegerKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cJavaLangLongKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cJavaLangShortKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cJavaLangStringKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Keyword cJavaKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_9_1 = (RuleCall)cGroup_9.eContents().get(1);
		private final Group cGroup_9_2 = (Group)cGroup_9.eContents().get(2);
		private final Keyword cFullStopKeyword_9_2_0 = (Keyword)cGroup_9_2.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_9_2_1 = (RuleCall)cGroup_9_2.eContents().get(1);
		private final Group cGroup_10 = (Group)cAlternatives.eContents().get(10);
		private final Keyword cJavaxKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_10_1 = (RuleCall)cGroup_10.eContents().get(1);
		private final Group cGroup_10_2 = (Group)cGroup_10.eContents().get(2);
		private final Keyword cFullStopKeyword_10_2_0 = (Keyword)cGroup_10_2.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_10_2_1 = (RuleCall)cGroup_10_2.eContents().get(1);
		private final Group cGroup_11 = (Group)cAlternatives.eContents().get(11);
		private final RuleCall cIDTerminalRuleCall_11_0 = (RuleCall)cGroup_11.eContents().get(0);
		private final Group cGroup_11_1 = (Group)cGroup_11.eContents().get(1);
		private final Keyword cFullStopKeyword_11_1_0 = (Keyword)cGroup_11_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_11_1_1 = (RuleCall)cGroup_11_1.eContents().get(1);
		
		//QualifiedIdentifier: // BEGIN workaround
		//// without this, I get error markers when casting sth. to a class in one of these packages
		////	'java.'ID ('.'ID)* |
		////	'java'ID ('.'ID)* |
		////	'java.lang.'ID ('.'ID)* |
		////	'java'ID'.lang'ID ('.'ID)* |
		////	'javax.jdo'ID ('.'ID)* |
		////	'javax.jdo.'ID ('.'ID)* |
		////	'javax'ID'.jdo'ID ('.'ID)* |
		//// the above DOES NOT WORK :-((( Have to look for another solution!
		//// for now, at least listing the most common	 from these packages explicitely (this works)...
		//	"java.lang.Boolean" // for java.util.Map et al.
		//	// for javax.**
		//	| "java.lang.Byte" | "java.lang.Character" | "java.lang.Double" | "java.lang.Float" | "java.lang.Integer" |
		//	"java.lang.Long" | "java.lang.Short" | "java.lang.String" | "java." ID ("." ID)* | "javax." ID ("." ID)* | // END workaround
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//// BEGIN workaround
		//// without this, I get error markers when casting sth. to a class in one of these packages
		////	'java.'ID ('.'ID)* |
		////	'java'ID ('.'ID)* |
		////	'java.lang.'ID ('.'ID)* |
		////	'java'ID'.lang'ID ('.'ID)* |
		////	'javax.jdo'ID ('.'ID)* |
		////	'javax.jdo.'ID ('.'ID)* |
		////	'javax'ID'.jdo'ID ('.'ID)* |
		//// the above DOES NOT WORK :-((( Have to look for another solution!
		//// for now, at least listing the most common	 from these packages explicitely (this works)...
		//"java.lang.Boolean" // for java.util.Map et al.
		//// for javax.**
		//| "java.lang.Byte" | "java.lang.Character" | "java.lang.Double" | "java.lang.Float" | "java.lang.Integer" |
		//"java.lang.Long" | "java.lang.Short" | "java.lang.String" | "java." ID ("." ID)* | "javax." ID ("." ID)* | // END workaround
		//ID ("." ID)*
		public Alternatives getAlternatives() { return cAlternatives; }

		//// BEGIN workaround
		//// without this, I get error markers when casting sth. to a class in one of these packages
		////	'java.'ID ('.'ID)* |
		////	'java'ID ('.'ID)* |
		////	'java.lang.'ID ('.'ID)* |
		////	'java'ID'.lang'ID ('.'ID)* |
		////	'javax.jdo'ID ('.'ID)* |
		////	'javax.jdo.'ID ('.'ID)* |
		////	'javax'ID'.jdo'ID ('.'ID)* |
		//// the above DOES NOT WORK :-((( Have to look for another solution!
		//// for now, at least listing the most common	 from these packages explicitely (this works)...
		//"java.lang.Boolean"
		public Keyword getJavaLangBooleanKeyword_0() { return cJavaLangBooleanKeyword_0; }

		//"java.lang.Byte"
		public Keyword getJavaLangByteKeyword_1() { return cJavaLangByteKeyword_1; }

		//"java.lang.Character"
		public Keyword getJavaLangCharacterKeyword_2() { return cJavaLangCharacterKeyword_2; }

		//"java.lang.Double"
		public Keyword getJavaLangDoubleKeyword_3() { return cJavaLangDoubleKeyword_3; }

		//"java.lang.Float"
		public Keyword getJavaLangFloatKeyword_4() { return cJavaLangFloatKeyword_4; }

		//"java.lang.Integer"
		public Keyword getJavaLangIntegerKeyword_5() { return cJavaLangIntegerKeyword_5; }

		//"java.lang.Long"
		public Keyword getJavaLangLongKeyword_6() { return cJavaLangLongKeyword_6; }

		//"java.lang.Short"
		public Keyword getJavaLangShortKeyword_7() { return cJavaLangShortKeyword_7; }

		//"java.lang.String"
		public Keyword getJavaLangStringKeyword_8() { return cJavaLangStringKeyword_8; }

		//"java." ID ("." ID)*
		public Group getGroup_9() { return cGroup_9; }

		//"java."
		public Keyword getJavaKeyword_9_0() { return cJavaKeyword_9_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_9_1() { return cIDTerminalRuleCall_9_1; }

		//("." ID)*
		public Group getGroup_9_2() { return cGroup_9_2; }

		//"."
		public Keyword getFullStopKeyword_9_2_0() { return cFullStopKeyword_9_2_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_9_2_1() { return cIDTerminalRuleCall_9_2_1; }

		//"javax." ID ("." ID)*
		public Group getGroup_10() { return cGroup_10; }

		//"javax."
		public Keyword getJavaxKeyword_10_0() { return cJavaxKeyword_10_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_10_1() { return cIDTerminalRuleCall_10_1; }

		//("." ID)*
		public Group getGroup_10_2() { return cGroup_10_2; }

		//"."
		public Keyword getFullStopKeyword_10_2_0() { return cFullStopKeyword_10_2_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_10_2_1() { return cIDTerminalRuleCall_10_2_1; }

		//// END workaround
		//ID ("." ID)*
		public Group getGroup_11() { return cGroup_11; }

		//// END workaround
		//ID
		public RuleCall getIDTerminalRuleCall_11_0() { return cIDTerminalRuleCall_11_0; }

		//("." ID)*
		public Group getGroup_11_1() { return cGroup_11_1; }

		//"."
		public Keyword getFullStopKeyword_11_1_0() { return cFullStopKeyword_11_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_11_1_1() { return cIDTerminalRuleCall_11_1_1; }
	}

	public class CandidateClassNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CandidateClassName");
		private final RuleCall cQualifiedIdentifierParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//CandidateClassName:
		//	QualifiedIdentifier;
		public ParserRule getRule() { return rule; }

		//QualifiedIdentifier
		public RuleCall getQualifiedIdentifierParserRuleCall() { return cQualifiedIdentifierParserRuleCall; }
	}

	public class ClassOrInterfaceNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassOrInterfaceName");
		private final RuleCall cQualifiedIdentifierParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ClassOrInterfaceName:
		//	QualifiedIdentifier;
		public ParserRule getRule() { return rule; }

		//QualifiedIdentifier
		public RuleCall getQualifiedIdentifierParserRuleCall() { return cQualifiedIdentifierParserRuleCall; }
	}
	
	
	public class OrderByDirectionElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "OrderByDirection");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAscEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAscASCKeyword_0_0 = (Keyword)cAscEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cAscendingEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cAscendingASCENDINGKeyword_1_0 = (Keyword)cAscendingEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDescEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDescDESCKeyword_2_0 = (Keyword)cDescEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDescendingEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDescendingDESCENDINGKeyword_3_0 = (Keyword)cDescendingEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum OrderByDirection:
		//	asc="ASC" | ascending="ASCENDING" | desc="DESC" | descending="DESCENDING";
		public EnumRule getRule() { return rule; }

		//asc="ASC" | ascending="ASCENDING" | desc="DESC" | descending="DESCENDING"
		public Alternatives getAlternatives() { return cAlternatives; }

		//asc="ASC"
		public EnumLiteralDeclaration getAscEnumLiteralDeclaration_0() { return cAscEnumLiteralDeclaration_0; }

		//"ASC"
		public Keyword getAscASCKeyword_0_0() { return cAscASCKeyword_0_0; }

		//ascending="ASCENDING"
		public EnumLiteralDeclaration getAscendingEnumLiteralDeclaration_1() { return cAscendingEnumLiteralDeclaration_1; }

		//"ASCENDING"
		public Keyword getAscendingASCENDINGKeyword_1_0() { return cAscendingASCENDINGKeyword_1_0; }

		//desc="DESC"
		public EnumLiteralDeclaration getDescEnumLiteralDeclaration_2() { return cDescEnumLiteralDeclaration_2; }

		//"DESC"
		public Keyword getDescDESCKeyword_2_0() { return cDescDESCKeyword_2_0; }

		//descending="DESCENDING"
		public EnumLiteralDeclaration getDescendingEnumLiteralDeclaration_3() { return cDescendingEnumLiteralDeclaration_3; }

		//"DESCENDING"
		public Keyword getDescendingDESCENDINGKeyword_3_0() { return cDescendingDESCENDINGKeyword_3_0; }
	}

	public class UnaryOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "UnaryOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPositiveEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPositivePlusSignKeyword_0_0 = (Keyword)cPositiveEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNegativeEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNegativeHyphenMinusKeyword_1_0 = (Keyword)cNegativeEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cBitwiseNotEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cBitwiseNotTildeKeyword_2_0 = (Keyword)cBitwiseNotEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cLogicalNotEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cLogicalNotExclamationMarkKeyword_3_0 = (Keyword)cLogicalNotEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum UnaryOperator:
		//	positive="+" | negative="-" | bitwiseNot="~" | logicalNot="!";
		public EnumRule getRule() { return rule; }

		//positive="+" | negative="-" | bitwiseNot="~" | logicalNot="!"
		public Alternatives getAlternatives() { return cAlternatives; }

		//positive="+"
		public EnumLiteralDeclaration getPositiveEnumLiteralDeclaration_0() { return cPositiveEnumLiteralDeclaration_0; }

		//"+"
		public Keyword getPositivePlusSignKeyword_0_0() { return cPositivePlusSignKeyword_0_0; }

		//negative="-"
		public EnumLiteralDeclaration getNegativeEnumLiteralDeclaration_1() { return cNegativeEnumLiteralDeclaration_1; }

		//"-"
		public Keyword getNegativeHyphenMinusKeyword_1_0() { return cNegativeHyphenMinusKeyword_1_0; }

		//bitwiseNot="~"
		public EnumLiteralDeclaration getBitwiseNotEnumLiteralDeclaration_2() { return cBitwiseNotEnumLiteralDeclaration_2; }

		//"~"
		public Keyword getBitwiseNotTildeKeyword_2_0() { return cBitwiseNotTildeKeyword_2_0; }

		//logicalNot="!"
		public EnumLiteralDeclaration getLogicalNotEnumLiteralDeclaration_3() { return cLogicalNotEnumLiteralDeclaration_3; }

		//"!"
		public Keyword getLogicalNotExclamationMarkKeyword_3_0() { return cLogicalNotExclamationMarkKeyword_3_0; }
	}

	public class AdditionOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "AdditionOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAddEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAddPlusSignKeyword_0_0 = (Keyword)cAddEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSubtractEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSubtractHyphenMinusKeyword_1_0 = (Keyword)cSubtractEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum AdditionOperator:
		//	add="+" | subtract="-";
		public EnumRule getRule() { return rule; }

		//add="+" | subtract="-"
		public Alternatives getAlternatives() { return cAlternatives; }

		//add="+"
		public EnumLiteralDeclaration getAddEnumLiteralDeclaration_0() { return cAddEnumLiteralDeclaration_0; }

		//"+"
		public Keyword getAddPlusSignKeyword_0_0() { return cAddPlusSignKeyword_0_0; }

		//subtract="-"
		public EnumLiteralDeclaration getSubtractEnumLiteralDeclaration_1() { return cSubtractEnumLiteralDeclaration_1; }

		//"-"
		public Keyword getSubtractHyphenMinusKeyword_1_0() { return cSubtractHyphenMinusKeyword_1_0; }
	}

	public class MultiplicationOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "MultiplicationOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMultiplyEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMultiplyAsteriskKeyword_0_0 = (Keyword)cMultiplyEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDivideEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDivideSolidusKeyword_1_0 = (Keyword)cDivideEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cModuloEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cModuloPercentSignKeyword_2_0 = (Keyword)cModuloEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum MultiplicationOperator:
		//	multiply="*" | divide="/" | modulo="%";
		public EnumRule getRule() { return rule; }

		//multiply="*" | divide="/" | modulo="%"
		public Alternatives getAlternatives() { return cAlternatives; }

		//multiply="*"
		public EnumLiteralDeclaration getMultiplyEnumLiteralDeclaration_0() { return cMultiplyEnumLiteralDeclaration_0; }

		//"*"
		public Keyword getMultiplyAsteriskKeyword_0_0() { return cMultiplyAsteriskKeyword_0_0; }

		//divide="/"
		public EnumLiteralDeclaration getDivideEnumLiteralDeclaration_1() { return cDivideEnumLiteralDeclaration_1; }

		//"/"
		public Keyword getDivideSolidusKeyword_1_0() { return cDivideSolidusKeyword_1_0; }

		//modulo="%"
		public EnumLiteralDeclaration getModuloEnumLiteralDeclaration_2() { return cModuloEnumLiteralDeclaration_2; }

		//"%"
		public Keyword getModuloPercentSignKeyword_2_0() { return cModuloPercentSignKeyword_2_0; }
	}

	public class ComparisonOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ComparisonOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLessThenEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLessThenLessThanSignKeyword_0_0 = (Keyword)cLessThenEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cGreaterThenEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cGreaterThenGreaterThanSignKeyword_1_0 = (Keyword)cGreaterThenEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLessEqualEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLessEqualLessThanSignEqualsSignKeyword_2_0 = (Keyword)cLessEqualEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cGreaterEqualEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cGreaterEqualGreaterThanSignEqualsSignKeyword_3_0 = (Keyword)cGreaterEqualEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cEqualEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cEqualEqualsSignEqualsSignKeyword_4_0 = (Keyword)cEqualEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cNotEqualEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cNotEqualExclamationMarkEqualsSignKeyword_5_0 = (Keyword)cNotEqualEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cInstanceofEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cInstanceofInstanceofKeyword_6_0 = (Keyword)cInstanceofEnumLiteralDeclaration_6.eContents().get(0);
		
		//enum ComparisonOperator:
		//	lessThen="<" | greaterThen=">" | lessEqual="<=" | greaterEqual=">=" | equal="==" | notEqual="!=" | instanceof;
		public EnumRule getRule() { return rule; }

		//lessThen="<" | greaterThen=">" | lessEqual="<=" | greaterEqual=">=" | equal="==" | notEqual="!=" | instanceof
		public Alternatives getAlternatives() { return cAlternatives; }

		//lessThen="<"
		public EnumLiteralDeclaration getLessThenEnumLiteralDeclaration_0() { return cLessThenEnumLiteralDeclaration_0; }

		//"<"
		public Keyword getLessThenLessThanSignKeyword_0_0() { return cLessThenLessThanSignKeyword_0_0; }

		//greaterThen=">"
		public EnumLiteralDeclaration getGreaterThenEnumLiteralDeclaration_1() { return cGreaterThenEnumLiteralDeclaration_1; }

		//">"
		public Keyword getGreaterThenGreaterThanSignKeyword_1_0() { return cGreaterThenGreaterThanSignKeyword_1_0; }

		//lessEqual="<="
		public EnumLiteralDeclaration getLessEqualEnumLiteralDeclaration_2() { return cLessEqualEnumLiteralDeclaration_2; }

		//"<="
		public Keyword getLessEqualLessThanSignEqualsSignKeyword_2_0() { return cLessEqualLessThanSignEqualsSignKeyword_2_0; }

		//greaterEqual=">="
		public EnumLiteralDeclaration getGreaterEqualEnumLiteralDeclaration_3() { return cGreaterEqualEnumLiteralDeclaration_3; }

		//">="
		public Keyword getGreaterEqualGreaterThanSignEqualsSignKeyword_3_0() { return cGreaterEqualGreaterThanSignEqualsSignKeyword_3_0; }

		//equal="=="
		public EnumLiteralDeclaration getEqualEnumLiteralDeclaration_4() { return cEqualEnumLiteralDeclaration_4; }

		//"=="
		public Keyword getEqualEqualsSignEqualsSignKeyword_4_0() { return cEqualEqualsSignEqualsSignKeyword_4_0; }

		//notEqual="!="
		public EnumLiteralDeclaration getNotEqualEnumLiteralDeclaration_5() { return cNotEqualEnumLiteralDeclaration_5; }

		//"!="
		public Keyword getNotEqualExclamationMarkEqualsSignKeyword_5_0() { return cNotEqualExclamationMarkEqualsSignKeyword_5_0; }

		//instanceof
		public EnumLiteralDeclaration getInstanceofEnumLiteralDeclaration_6() { return cInstanceofEnumLiteralDeclaration_6; }

		//"instanceof"
		public Keyword getInstanceofInstanceofKeyword_6_0() { return cInstanceofInstanceofKeyword_6_0; }
	}
	
	private SingleStringJDOQLElements pSingleStringJDOQL;
	private SubqueryElements pSubquery;
	private SelectClauseElements pSelectClause;
	private SubquerySelectClauseElements pSubquerySelectClause;
	private ResultClauseElements pResultClause;
	private SubqueryResultClauseElements pSubqueryResultClause;
	private IntoClauseElements pIntoClause;
	private ResultSpecElements pResultSpec;
	private ResultNamingElements pResultNaming;
	private FromClauseElements pFromClause;
	private SubqueryFromClauseElements pSubqueryFromClause;
	private AliasElements pAlias;
	private WhereClauseElements pWhereClause;
	private VariablesClauseElements pVariablesClause;
	private VariableDeclarationElements pVariableDeclaration;
	private VariableNameElements pVariableName;
	private ParametersClauseElements pParametersClause;
	private ParameterDeclarationElements pParameterDeclaration;
	private DeclaredParameterNameElements pDeclaredParameterName;
	private ParameterNameElements pParameterName;
	private ImportClauseElements pImportClause;
	private ImportDeclarationElements pImportDeclaration;
	private GroupByClauseElements pGroupByClause;
	private HavingClauseElements pHavingClause;
	private OrderByClauseElements pOrderByClause;
	private OrderBySpecElements pOrderBySpec;
	private OrderByDirectionElements unknownRuleOrderByDirection;
	private RangeClauseElements pRangeClause;
	private ConditionalOrExpressionElements pConditionalOrExpression;
	private ConditionalAndExpressionElements pConditionalAndExpression;
	private SimpleOrExpressionElements pSimpleOrExpression;
	private SimpleAndExpressionElements pSimpleAndExpression;
	private ComparisonOperatorExpressionElements pComparisonOperatorExpression;
	private AdditionExpressionElements pAdditionExpression;
	private MultiplicationExpressionElements pMultiplicationExpression;
	private UnaryExpressionElements pUnaryExpression;
	private FieldAccessExpressionElements pFieldAccessExpression;
	private ParameterOrFieldOrMethodExpressionElements pParameterOrFieldOrMethodExpression;
	private FieldOrMethodExpressionElements pFieldOrMethodExpression;
	private StaticMethodExpressionElements pStaticMethodExpression;
	private MethodExpressionElements pMethodExpression;
	private ParenthesesExpressionElements pParenthesesExpression;
	private TypeElements pType;
	private PrimitiveTypeElements pPrimitiveType;
	private NumericTypeElements pNumericType;
	private IntegralTypeElements pIntegralType;
	private FloatingPointTypeElements pFloatingPointType;
	private IntegerLiteralElements pIntegerLiteral;
	private StringLiteralElements pStringLiteral;
	private BooleanLiteralElements pBooleanLiteral;
	private NullLiteralElements pNullLiteral;
	private LiteralElements pLiteral;
	private QualifiedIdentifierElements pQualifiedIdentifier;
	private CandidateClassNameElements pCandidateClassName;
	private ClassOrInterfaceNameElements pClassOrInterfaceName;
	private UnaryOperatorElements unknownRuleUnaryOperator;
	private AdditionOperatorElements unknownRuleAdditionOperator;
	private MultiplicationOperatorElements unknownRuleMultiplicationOperator;
	private ComparisonOperatorElements unknownRuleComparisonOperator;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public JDOQLGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//SingleStringJDOQL:
	//	selectClause=SelectClause fromClause=FromClause whereClause=WhereClause? variablesClause=VariablesClause?
	//	parametersClause=ParametersClause? importClause=ImportClause? groupByClause=GroupByClause?
	//	orderByClause=OrderByClause? rangeClause=RangeClause?;
	public SingleStringJDOQLElements getSingleStringJDOQLAccess() {
		return (pSingleStringJDOQL != null) ? pSingleStringJDOQL : (pSingleStringJDOQL = new SingleStringJDOQLElements());
	}
	
	public ParserRule getSingleStringJDOQLRule() {
		return getSingleStringJDOQLAccess().getRule();
	}

	//Subquery:
	//	selectClause=SubquerySelectClause fromClause=SubqueryFromClause whereClause=WhereClause?
	//	variablesClause=VariablesClause? parametersClause=ParametersClause? importClause=ImportClause?;
	public SubqueryElements getSubqueryAccess() {
		return (pSubquery != null) ? pSubquery : (pSubquery = new SubqueryElements());
	}
	
	public ParserRule getSubqueryRule() {
		return getSubqueryAccess().getRule();
	}

	//SelectClause:
	//	{SelectClause} "SELECT" isUnique?="UNIQUE"? resultClause=ResultClause? intoClause=IntoClause?;
	public SelectClauseElements getSelectClauseAccess() {
		return (pSelectClause != null) ? pSelectClause : (pSelectClause = new SelectClauseElements());
	}
	
	public ParserRule getSelectClauseRule() {
		return getSelectClauseAccess().getRule();
	}

	//SubquerySelectClause:
	//	{SelectClause} "SELECT" isUnique?="UNIQUE"? resultClause=SubqueryResultClause? intoClause=IntoClause?;
	public SubquerySelectClauseElements getSubquerySelectClauseAccess() {
		return (pSubquerySelectClause != null) ? pSubquerySelectClause : (pSubquerySelectClause = new SubquerySelectClauseElements());
	}
	
	public ParserRule getSubquerySelectClauseRule() {
		return getSubquerySelectClauseAccess().getRule();
	}

	//ResultClause:
	//	isDistinct?="DISTINCT"? resultSpecs+=ResultSpec ("," resultSpecs+=ResultSpec)* ","?;
	public ResultClauseElements getResultClauseAccess() {
		return (pResultClause != null) ? pResultClause : (pResultClause = new ResultClauseElements());
	}
	
	public ParserRule getResultClauseRule() {
		return getResultClauseAccess().getRule();
	}

	//SubqueryResultClause:
	//	isDistinct?="DISTINCT"? resultExpression=ConditionalOrExpression ","?;
	public SubqueryResultClauseElements getSubqueryResultClauseAccess() {
		return (pSubqueryResultClause != null) ? pSubqueryResultClause : (pSubqueryResultClause = new SubqueryResultClauseElements());
	}
	
	public ParserRule getSubqueryResultClauseRule() {
		return getSubqueryResultClauseAccess().getRule();
	}

	//IntoClause:
	//	"INTO" resultClassName=ClassOrInterfaceName;
	public IntoClauseElements getIntoClauseAccess() {
		return (pIntoClause != null) ? pIntoClause : (pIntoClause = new IntoClauseElements());
	}
	
	public ParserRule getIntoClauseRule() {
		return getIntoClauseAccess().getRule();
	}

	//ResultSpec:
	//	ConditionalOrExpression resultNaming=ResultNaming?;
	public ResultSpecElements getResultSpecAccess() {
		return (pResultSpec != null) ? pResultSpec : (pResultSpec = new ResultSpecElements());
	}
	
	public ParserRule getResultSpecRule() {
		return getResultSpecAccess().getRule();
	}

	//ResultNaming:
	//	"AS" identifier=ID;
	public ResultNamingElements getResultNamingAccess() {
		return (pResultNaming != null) ? pResultNaming : (pResultNaming = new ResultNamingElements());
	}
	
	public ParserRule getResultNamingRule() {
		return getResultNamingAccess().getRule();
	}

	//FromClause:
	//	"FROM" candidateClassName=CandidateClassName (isExcludeSubclasses?="EXCLUDE" "SUBCLASSES")?;
	public FromClauseElements getFromClauseAccess() {
		return (pFromClause != null) ? pFromClause : (pFromClause = new FromClauseElements());
	}
	
	public ParserRule getFromClauseRule() {
		return getFromClauseAccess().getRule();
	}

	//SubqueryFromClause: // The parser cannot differentiate between a candidate-class and a field-access. The only reason
	//// why we have to add the field-access-expression separately is that "this" otherwise is a key-word deemed
	//// at the wrong location. Hence we add it now explicitely to the right location ;-) Marco :-)
	//	"FROM" ("this" "." fieldAccessExpression=FieldAccessExpression | candidateClassName=CandidateClassName) alias=Alias?
	//	(isExcludeSubclasses?="EXCLUDE" "SUBCLASSES")?;
	public SubqueryFromClauseElements getSubqueryFromClauseAccess() {
		return (pSubqueryFromClause != null) ? pSubqueryFromClause : (pSubqueryFromClause = new SubqueryFromClauseElements());
	}
	
	public ParserRule getSubqueryFromClauseRule() {
		return getSubqueryFromClauseAccess().getRule();
	}

	//Alias:
	//	"AS"? identifier= // in contrast to a ResultNaming, the 'AS' is optional here.
	//	ID;
	public AliasElements getAliasAccess() {
		return (pAlias != null) ? pAlias : (pAlias = new AliasElements());
	}
	
	public ParserRule getAliasRule() {
		return getAliasAccess().getRule();
	}

	//WhereClause:
	//	"WHERE" filter=ConditionalOrExpression;
	public WhereClauseElements getWhereClauseAccess() {
		return (pWhereClause != null) ? pWhereClause : (pWhereClause = new WhereClauseElements());
	}
	
	public ParserRule getWhereClauseRule() {
		return getWhereClauseAccess().getRule();
	}

	//VariablesClause:
	//	"VARIABLES" variableDeclarations+=VariableDeclaration (";" variableDeclarations+=VariableDeclaration)* ";"?;
	public VariablesClauseElements getVariablesClauseAccess() {
		return (pVariablesClause != null) ? pVariablesClause : (pVariablesClause = new VariablesClauseElements());
	}
	
	public ParserRule getVariablesClauseRule() {
		return getVariablesClauseAccess().getRule();
	}

	//VariableDeclaration:
	//	type=Type variableName=VariableName;
	public VariableDeclarationElements getVariableDeclarationAccess() {
		return (pVariableDeclaration != null) ? pVariableDeclaration : (pVariableDeclaration = new VariableDeclarationElements());
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}

	//VariableName:
	//	ID;
	public VariableNameElements getVariableNameAccess() {
		return (pVariableName != null) ? pVariableName : (pVariableName = new VariableNameElements());
	}
	
	public ParserRule getVariableNameRule() {
		return getVariableNameAccess().getRule();
	}

	//ParametersClause:
	//	"PARAMETERS" parameterDeclarations+=ParameterDeclaration ("," parameterDeclarations+=ParameterDeclaration)* ","?;
	public ParametersClauseElements getParametersClauseAccess() {
		return (pParametersClause != null) ? pParametersClause : (pParametersClause = new ParametersClauseElements());
	}
	
	public ParserRule getParametersClauseRule() {
		return getParametersClauseAccess().getRule();
	}

	//ParameterDeclaration:
	//	type=Type declaredParameterName=DeclaredParameterName;
	public ParameterDeclarationElements getParameterDeclarationAccess() {
		return (pParameterDeclaration != null) ? pParameterDeclaration : (pParameterDeclaration = new ParameterDeclarationElements());
	}
	
	public ParserRule getParameterDeclarationRule() {
		return getParameterDeclarationAccess().getRule();
	}

	//DeclaredParameterName:
	//	ParameterName;
	public DeclaredParameterNameElements getDeclaredParameterNameAccess() {
		return (pDeclaredParameterName != null) ? pDeclaredParameterName : (pDeclaredParameterName = new DeclaredParameterNameElements());
	}
	
	public ParserRule getDeclaredParameterNameRule() {
		return getDeclaredParameterNameAccess().getRule();
	}

	//ParameterName:
	//	ID;
	public ParameterNameElements getParameterNameAccess() {
		return (pParameterName != null) ? pParameterName : (pParameterName = new ParameterNameElements());
	}
	
	public ParserRule getParameterNameRule() {
		return getParameterNameAccess().getRule();
	}

	//ImportClause:
	//	importDeclarations+=ImportDeclaration (";" importDeclarations+=ImportDeclaration)* ";"?;
	public ImportClauseElements getImportClauseAccess() {
		return (pImportClause != null) ? pImportClause : (pImportClause = new ImportClauseElements());
	}
	
	public ParserRule getImportClauseRule() {
		return getImportClauseAccess().getRule();
	}

	//ImportDeclaration:
	//	"import" QualifiedIdentifier;
	public ImportDeclarationElements getImportDeclarationAccess() {
		return (pImportDeclaration != null) ? pImportDeclaration : (pImportDeclaration = new ImportDeclarationElements());
	}
	
	public ParserRule getImportDeclarationRule() {
		return getImportDeclarationAccess().getRule();
	}

	//GroupByClause:
	//	"GROUP" "BY" grouping+=ConditionalOrExpression ("," grouping+=ConditionalOrExpression)* ","?
	//	havingClause=HavingClause?;
	public GroupByClauseElements getGroupByClauseAccess() {
		return (pGroupByClause != null) ? pGroupByClause : (pGroupByClause = new GroupByClauseElements());
	}
	
	public ParserRule getGroupByClauseRule() {
		return getGroupByClauseAccess().getRule();
	}

	//HavingClause:
	//	"HAVING" having=ConditionalOrExpression;
	public HavingClauseElements getHavingClauseAccess() {
		return (pHavingClause != null) ? pHavingClause : (pHavingClause = new HavingClauseElements());
	}
	
	public ParserRule getHavingClauseRule() {
		return getHavingClauseAccess().getRule();
	}

	//OrderByClause:
	//	"ORDER" "BY" ordering+=OrderBySpec ("," ordering+=OrderBySpec)* ","?;
	public OrderByClauseElements getOrderByClauseAccess() {
		return (pOrderByClause != null) ? pOrderByClause : (pOrderByClause = new OrderByClauseElements());
	}
	
	public ParserRule getOrderByClauseRule() {
		return getOrderByClauseAccess().getRule();
	}

	//OrderBySpec:
	//	ConditionalOrExpression direction=OrderByDirection;
	public OrderBySpecElements getOrderBySpecAccess() {
		return (pOrderBySpec != null) ? pOrderBySpec : (pOrderBySpec = new OrderBySpecElements());
	}
	
	public ParserRule getOrderBySpecRule() {
		return getOrderBySpecAccess().getRule();
	}

	//enum OrderByDirection:
	//	asc="ASC" | ascending="ASCENDING" | desc="DESC" | descending="DESCENDING";
	public OrderByDirectionElements getOrderByDirectionAccess() {
		return (unknownRuleOrderByDirection != null) ? unknownRuleOrderByDirection : (unknownRuleOrderByDirection = new OrderByDirectionElements());
	}
	
	public EnumRule getOrderByDirectionRule() {
		return getOrderByDirectionAccess().getRule();
	}

	//RangeClause:
	//	"RANGE" start=ConditionalOrExpression "," end=ConditionalOrExpression;
	public RangeClauseElements getRangeClauseAccess() {
		return (pRangeClause != null) ? pRangeClause : (pRangeClause = new RangeClauseElements());
	}
	
	public ParserRule getRangeClauseRule() {
		return getRangeClauseAccess().getRule();
	}

	//ConditionalOrExpression returns Expression:
	//	ConditionalAndExpression ({ConditionalOrExpression.left=current} "||" right=ConditionalAndExpression)*;
	public ConditionalOrExpressionElements getConditionalOrExpressionAccess() {
		return (pConditionalOrExpression != null) ? pConditionalOrExpression : (pConditionalOrExpression = new ConditionalOrExpressionElements());
	}
	
	public ParserRule getConditionalOrExpressionRule() {
		return getConditionalOrExpressionAccess().getRule();
	}

	//ConditionalAndExpression returns Expression:
	//	SimpleOrExpression ({ConditionalAndExpression.left=current} "&&" right=SimpleOrExpression)*;
	public ConditionalAndExpressionElements getConditionalAndExpressionAccess() {
		return (pConditionalAndExpression != null) ? pConditionalAndExpression : (pConditionalAndExpression = new ConditionalAndExpressionElements());
	}
	
	public ParserRule getConditionalAndExpressionRule() {
		return getConditionalAndExpressionAccess().getRule();
	}

	//SimpleOrExpression returns Expression:
	//	SimpleAndExpression ({SimpleOrExpression.left=current} "|" right=SimpleAndExpression)*;
	public SimpleOrExpressionElements getSimpleOrExpressionAccess() {
		return (pSimpleOrExpression != null) ? pSimpleOrExpression : (pSimpleOrExpression = new SimpleOrExpressionElements());
	}
	
	public ParserRule getSimpleOrExpressionRule() {
		return getSimpleOrExpressionAccess().getRule();
	}

	//SimpleAndExpression returns Expression:
	//	ComparisonOperatorExpression ({SimpleAndExpression.left=current} "&" right=ComparisonOperatorExpression)*;
	public SimpleAndExpressionElements getSimpleAndExpressionAccess() {
		return (pSimpleAndExpression != null) ? pSimpleAndExpression : (pSimpleAndExpression = new SimpleAndExpressionElements());
	}
	
	public ParserRule getSimpleAndExpressionRule() {
		return getSimpleAndExpressionAccess().getRule();
	}

	//ComparisonOperatorExpression returns Expression:
	//	AdditionExpression ({ComparisonOperatorExpression.left=current} operator=ComparisonOperator
	//	right=AdditionExpression)*;
	public ComparisonOperatorExpressionElements getComparisonOperatorExpressionAccess() {
		return (pComparisonOperatorExpression != null) ? pComparisonOperatorExpression : (pComparisonOperatorExpression = new ComparisonOperatorExpressionElements());
	}
	
	public ParserRule getComparisonOperatorExpressionRule() {
		return getComparisonOperatorExpressionAccess().getRule();
	}

	//AdditionExpression returns Expression:
	//	MultiplicationExpression ({AdditionExpression.left=current} operator=AdditionOperator
	//	right=MultiplicationExpression)*;
	public AdditionExpressionElements getAdditionExpressionAccess() {
		return (pAdditionExpression != null) ? pAdditionExpression : (pAdditionExpression = new AdditionExpressionElements());
	}
	
	public ParserRule getAdditionExpressionRule() {
		return getAdditionExpressionAccess().getRule();
	}

	//MultiplicationExpression returns Expression:
	//	UnaryExpression ({MultiplicationExpression.left=current} operator=MultiplicationOperator right=UnaryExpression)*;
	public MultiplicationExpressionElements getMultiplicationExpressionAccess() {
		return (pMultiplicationExpression != null) ? pMultiplicationExpression : (pMultiplicationExpression = new MultiplicationExpressionElements());
	}
	
	public ParserRule getMultiplicationExpressionRule() {
		return getMultiplicationExpressionAccess().getRule();
	}

	//UnaryExpression returns Expression:
	//	"(" castType=Type ")" right=FieldAccessExpression | unaryOperator=UnaryOperator? right=FieldAccessExpression;
	public UnaryExpressionElements getUnaryExpressionAccess() {
		return (pUnaryExpression != null) ? pUnaryExpression : (pUnaryExpression = new UnaryExpressionElements());
	}
	
	public ParserRule getUnaryExpressionRule() {
		return getUnaryExpressionAccess().getRule();
	}

	//FieldAccessExpression returns Expression:
	//	StaticMethodExpression | ParameterOrFieldOrMethodExpression ({FieldAccessExpression.left=current} "."
	//	right=FieldOrMethodExpression)*;
	public FieldAccessExpressionElements getFieldAccessExpressionAccess() {
		return (pFieldAccessExpression != null) ? pFieldAccessExpression : (pFieldAccessExpression = new FieldAccessExpressionElements());
	}
	
	public ParserRule getFieldAccessExpressionRule() {
		return getFieldAccessExpressionAccess().getRule();
	}

	//ParameterOrFieldOrMethodExpression returns Expression:
	//	literal=Literal | this="this" | //	declaredParameterName=[DeclaredParameterName] |
	//	id=ID | ":" parameterName=ParameterName | ParenthesesExpression | method=MethodExpression;
	public ParameterOrFieldOrMethodExpressionElements getParameterOrFieldOrMethodExpressionAccess() {
		return (pParameterOrFieldOrMethodExpression != null) ? pParameterOrFieldOrMethodExpression : (pParameterOrFieldOrMethodExpression = new ParameterOrFieldOrMethodExpressionElements());
	}
	
	public ParserRule getParameterOrFieldOrMethodExpressionRule() {
		return getParameterOrFieldOrMethodExpressionAccess().getRule();
	}

	//FieldOrMethodExpression returns Expression:
	//	literal=Literal | this="this" | id=ID | ParenthesesExpression | method=MethodExpression;
	public FieldOrMethodExpressionElements getFieldOrMethodExpressionAccess() {
		return (pFieldOrMethodExpression != null) ? pFieldOrMethodExpression : (pFieldOrMethodExpression = new FieldOrMethodExpressionElements());
	}
	
	public ParserRule getFieldOrMethodExpressionRule() {
		return getFieldOrMethodExpressionAccess().getRule();
	}

	//StaticMethodExpression returns Expression:
	//	{Expression} "Math.abs" "(" number=ConditionalOrExpression ")" | {Expression} "Math.sqrt" "("
	//	number=ConditionalOrExpression ")" | {Expression} "Math.cos" "(" number=ConditionalOrExpression ")" | {Expression}
	//	"Math.sin" "(" number=ConditionalOrExpression ")" | {Expression} "Math.tan" "(" number=ConditionalOrExpression ")" |
	//	{Expression} "Math.acos" "(" number=ConditionalOrExpression ")" | {Expression} "Math.asin" "("
	//	number=ConditionalOrExpression ")" | {Expression} "Math.atan" "(" number=ConditionalOrExpression ")" | {Expression}
	//	"Math.ceil" "(" number=ConditionalOrExpression ")" | {Expression} "Math.exp" "(" number=ConditionalOrExpression ")" |
	//	{Expression} "Math.floor" "(" number=ConditionalOrExpression ")" | {Expression} "Math.log" "("
	//	number=ConditionalOrExpression ")" | {Expression} "java.lang.Math.abs" "(" number=ConditionalOrExpression ")" |
	//	{Expression} "java.lang.Math.sqrt" "(" number=ConditionalOrExpression ")" | {Expression} "java.lang.Math.cos" "("
	//	number=ConditionalOrExpression ")" | {Expression} "java.lang.Math.sin" "(" number=ConditionalOrExpression ")" |
	//	{Expression} "java.lang.Math.tan" "(" number=ConditionalOrExpression ")" | {Expression} "java.lang.Math.acos" "("
	//	number=ConditionalOrExpression ")" | {Expression} "java.lang.Math.asin" "(" number=ConditionalOrExpression ")" |
	//	{Expression} "java.lang.Math.atan" "(" number=ConditionalOrExpression ")" | {Expression} "java.lang.Math.ceil" "("
	//	number=ConditionalOrExpression ")" | {Expression} "java.lang.Math.exp" "(" number=ConditionalOrExpression ")" |
	//	{Expression} "java.lang.Math.floor" "(" number=ConditionalOrExpression ")" | {Expression} "java.lang.Math.log" "("
	//	number=ConditionalOrExpression ")" | {Expression} "JDOHelper.getObjectId" "(" persistable=ConditionalOrExpression ")"
	//	| {Expression} "JDOHelper.getVersion" "(" persistable=ConditionalOrExpression ")" | {Expression}
	//	"javax.jdo.JDOHelper.getObjectId" "(" persistable=ConditionalOrExpression ")" | {Expression}
	//	"javax.jdo.JDOHelper.getVersion" "(" persistable=ConditionalOrExpression ")" | // Would be cleaner to declare the following aggregate expressions separately, but here works for now.
	//	// Marco :-)
	//	{Expression} "count" "(" isDistinct?="DISTINCT"? aggregateArgument=ConditionalOrExpression ")" | {Expression} "sum" "("
	//	isDistinct?="DISTINCT"? aggregateArgument=ConditionalOrExpression ")" | {Expression} "min" "("
	//	aggregateArgument=ConditionalOrExpression ")" | {Expression} "max" "(" aggregateArgument=ConditionalOrExpression ")" |
	//	{Expression} "avg" "(" isDistinct?="DISTINCT"? aggregateArgument=ConditionalOrExpression ")";
	public StaticMethodExpressionElements getStaticMethodExpressionAccess() {
		return (pStaticMethodExpression != null) ? pStaticMethodExpression : (pStaticMethodExpression = new StaticMethodExpressionElements());
	}
	
	public ParserRule getStaticMethodExpressionRule() {
		return getStaticMethodExpressionAccess().getRule();
	}

	//// END Enum methods
	//MethodExpression returns Expression: // BEGIN Collection methods
	//	{Expression} "contains" "(" element=ConditionalOrExpression ")" // arg is the index in case of a List
	//	| {Expression} "get" "(" arg=ConditionalOrExpression ")" | {Expression} "isEmpty" "(" ")" | {Expression} "size" "(" ")"
	//	| // END Collection methods
	//	// BEGIN Map methods
	//	{Expression} "containsKey" "(" key=ConditionalOrExpression ")" | {Expression} "containsValue" "("
	//	value=ConditionalOrExpression ")" | //	{Expression} 'isEmpty' '(' ')' | // already declared as Collection method - cannot redeclare
	//	//	{Expression} 'size' '(' ')' | // already declared as Collection method - cannot redeclare
	//	//	{Expression} 'get' '(' arg=ConditionalOrExpression ')' | // arg is the key, but already declared as Collection method - cannot redeclare
	//	{Expression} "containsEntry" "(" key=ConditionalOrExpression "," value=ConditionalOrExpression ")" | // END Map methods
	//	// BEGIN String methods
	//	{Expression} "charAt" "(" index=ConditionalOrExpression ")" | {Expression} "endsWith" "("
	//	string=ConditionalOrExpression ")" | {Expression} "equals" "(" string=ConditionalOrExpression ")" | {Expression}
	//	"equalsIgnoreCase" "(" string=ConditionalOrExpression ")" | {Expression} "indexOf" "(" string=ConditionalOrExpression
	//	("," fromIndex=ConditionalOrExpression)? ")" | {Expression} "length" "(" ")" | {Expression} "matches" "("
	//	regex=ConditionalOrExpression ")" | {Expression} "replaceAll" "(" regex=ConditionalOrExpression ","
	//	replacement=ConditionalOrExpression ")" | {Expression} "startsWith" "(" string=ConditionalOrExpression ")" |
	//	{Expression} "substring" "(" beginIndex=ConditionalOrExpression ("," endIndex=ConditionalOrExpression)? ")" |
	//	{Expression} "toLowerCase" "(" ")" | {Expression} "toUpperCase" "(" ")" | {Expression} "trim" "(" ")" | // END String methods
	//	// BEGIN Temporal methods
	//	{Expression} "getDay" "(" ")" | {Expression} "getMonth" "(" ")" | {Expression} "getYear" "(" ")" | {Expression}
	//	"getHour" "(" ")" | {Expression} "getMinute" "(" ")" | {Expression} "getSecond" "(" ")" | // END Temporal methods
	//	// BEGIN Enum methods
	//	{Expression} "ordinal" "(" ")" | {Expression} "toString" "(" ")";
	public MethodExpressionElements getMethodExpressionAccess() {
		return (pMethodExpression != null) ? pMethodExpression : (pMethodExpression = new MethodExpressionElements());
	}
	
	public ParserRule getMethodExpressionRule() {
		return getMethodExpressionAccess().getRule();
	}

	//ParenthesesExpression returns Expression:
	//	"(" (ConditionalOrExpression | Subquery) ")";
	public ParenthesesExpressionElements getParenthesesExpressionAccess() {
		return (pParenthesesExpression != null) ? pParenthesesExpression : (pParenthesesExpression = new ParenthesesExpressionElements());
	}
	
	public ParserRule getParenthesesExpressionRule() {
		return getParenthesesExpressionAccess().getRule();
	}

	//Type:
	//	PrimitiveType | ClassOrInterfaceName;
	public TypeElements getTypeAccess() {
		return (pType != null) ? pType : (pType = new TypeElements());
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//PrimitiveType:
	//	NumericType | "boolean";
	public PrimitiveTypeElements getPrimitiveTypeAccess() {
		return (pPrimitiveType != null) ? pPrimitiveType : (pPrimitiveType = new PrimitiveTypeElements());
	}
	
	public ParserRule getPrimitiveTypeRule() {
		return getPrimitiveTypeAccess().getRule();
	}

	//NumericType:
	//	IntegralType | FloatingPointType;
	public NumericTypeElements getNumericTypeAccess() {
		return (pNumericType != null) ? pNumericType : (pNumericType = new NumericTypeElements());
	}
	
	public ParserRule getNumericTypeRule() {
		return getNumericTypeAccess().getRule();
	}

	//IntegralType:
	//	"byte" | "short" | "int" | "long" | "char";
	public IntegralTypeElements getIntegralTypeAccess() {
		return (pIntegralType != null) ? pIntegralType : (pIntegralType = new IntegralTypeElements());
	}
	
	public ParserRule getIntegralTypeRule() {
		return getIntegralTypeAccess().getRule();
	}

	//FloatingPointType:
	//	"float" | "double";
	public FloatingPointTypeElements getFloatingPointTypeAccess() {
		return (pFloatingPointType != null) ? pFloatingPointType : (pFloatingPointType = new FloatingPointTypeElements());
	}
	
	public ParserRule getFloatingPointTypeRule() {
		return getFloatingPointTypeAccess().getRule();
	}

	//IntegerLiteral:
	//	INT;
	public IntegerLiteralElements getIntegerLiteralAccess() {
		return (pIntegerLiteral != null) ? pIntegerLiteral : (pIntegerLiteral = new IntegerLiteralElements());
	}
	
	public ParserRule getIntegerLiteralRule() {
		return getIntegerLiteralAccess().getRule();
	}

	//StringLiteral:
	//	STRING;
	public StringLiteralElements getStringLiteralAccess() {
		return (pStringLiteral != null) ? pStringLiteral : (pStringLiteral = new StringLiteralElements());
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}

	//BooleanLiteral:
	//	"true" | "false";
	public BooleanLiteralElements getBooleanLiteralAccess() {
		return (pBooleanLiteral != null) ? pBooleanLiteral : (pBooleanLiteral = new BooleanLiteralElements());
	}
	
	public ParserRule getBooleanLiteralRule() {
		return getBooleanLiteralAccess().getRule();
	}

	//NullLiteral:
	//	"null";
	public NullLiteralElements getNullLiteralAccess() {
		return (pNullLiteral != null) ? pNullLiteral : (pNullLiteral = new NullLiteralElements());
	}
	
	public ParserRule getNullLiteralRule() {
		return getNullLiteralAccess().getRule();
	}

	//Literal:
	//	IntegerLiteral | BooleanLiteral | StringLiteral | NullLiteral;
	public LiteralElements getLiteralAccess() {
		return (pLiteral != null) ? pLiteral : (pLiteral = new LiteralElements());
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	//QualifiedIdentifier: // BEGIN workaround
	//// without this, I get error markers when casting sth. to a class in one of these packages
	////	'java.'ID ('.'ID)* |
	////	'java'ID ('.'ID)* |
	////	'java.lang.'ID ('.'ID)* |
	////	'java'ID'.lang'ID ('.'ID)* |
	////	'javax.jdo'ID ('.'ID)* |
	////	'javax.jdo.'ID ('.'ID)* |
	////	'javax'ID'.jdo'ID ('.'ID)* |
	//// the above DOES NOT WORK :-((( Have to look for another solution!
	//// for now, at least listing the most common	 from these packages explicitely (this works)...
	//	"java.lang.Boolean" // for java.util.Map et al.
	//	// for javax.**
	//	| "java.lang.Byte" | "java.lang.Character" | "java.lang.Double" | "java.lang.Float" | "java.lang.Integer" |
	//	"java.lang.Long" | "java.lang.Short" | "java.lang.String" | "java." ID ("." ID)* | "javax." ID ("." ID)* | // END workaround
	//	ID ("." ID)*;
	public QualifiedIdentifierElements getQualifiedIdentifierAccess() {
		return (pQualifiedIdentifier != null) ? pQualifiedIdentifier : (pQualifiedIdentifier = new QualifiedIdentifierElements());
	}
	
	public ParserRule getQualifiedIdentifierRule() {
		return getQualifiedIdentifierAccess().getRule();
	}

	//CandidateClassName:
	//	QualifiedIdentifier;
	public CandidateClassNameElements getCandidateClassNameAccess() {
		return (pCandidateClassName != null) ? pCandidateClassName : (pCandidateClassName = new CandidateClassNameElements());
	}
	
	public ParserRule getCandidateClassNameRule() {
		return getCandidateClassNameAccess().getRule();
	}

	//ClassOrInterfaceName:
	//	QualifiedIdentifier;
	public ClassOrInterfaceNameElements getClassOrInterfaceNameAccess() {
		return (pClassOrInterfaceName != null) ? pClassOrInterfaceName : (pClassOrInterfaceName = new ClassOrInterfaceNameElements());
	}
	
	public ParserRule getClassOrInterfaceNameRule() {
		return getClassOrInterfaceNameAccess().getRule();
	}

	//enum UnaryOperator:
	//	positive="+" | negative="-" | bitwiseNot="~" | logicalNot="!";
	public UnaryOperatorElements getUnaryOperatorAccess() {
		return (unknownRuleUnaryOperator != null) ? unknownRuleUnaryOperator : (unknownRuleUnaryOperator = new UnaryOperatorElements());
	}
	
	public EnumRule getUnaryOperatorRule() {
		return getUnaryOperatorAccess().getRule();
	}

	//enum AdditionOperator:
	//	add="+" | subtract="-";
	public AdditionOperatorElements getAdditionOperatorAccess() {
		return (unknownRuleAdditionOperator != null) ? unknownRuleAdditionOperator : (unknownRuleAdditionOperator = new AdditionOperatorElements());
	}
	
	public EnumRule getAdditionOperatorRule() {
		return getAdditionOperatorAccess().getRule();
	}

	//enum MultiplicationOperator:
	//	multiply="*" | divide="/" | modulo="%";
	public MultiplicationOperatorElements getMultiplicationOperatorAccess() {
		return (unknownRuleMultiplicationOperator != null) ? unknownRuleMultiplicationOperator : (unknownRuleMultiplicationOperator = new MultiplicationOperatorElements());
	}
	
	public EnumRule getMultiplicationOperatorRule() {
		return getMultiplicationOperatorAccess().getRule();
	}

	//enum ComparisonOperator:
	//	lessThen="<" | greaterThen=">" | lessEqual="<=" | greaterEqual=">=" | equal="==" | notEqual="!=" | instanceof;
	public ComparisonOperatorElements getComparisonOperatorAccess() {
		return (unknownRuleComparisonOperator != null) ? unknownRuleComparisonOperator : (unknownRuleComparisonOperator = new ComparisonOperatorElements());
	}
	
	public EnumRule getComparisonOperatorRule() {
		return getComparisonOperatorAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
