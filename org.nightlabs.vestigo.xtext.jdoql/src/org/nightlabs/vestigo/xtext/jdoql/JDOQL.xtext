grammar org.nightlabs.vestigo.xtext.jdoql.JDOQL with org.eclipse.xtext.common.Terminals

generate jDOQL 'http://www.nightlabs.org/vestigo/xtext/jdoql/JDOQL'

// http://www.datanucleus.org/products/accessplatform_3_1/jdo/jdoql_methods.html
// http://db.apache.org/jdo/specifications.html
// Current spec: 3.0, chapter 26 JDOQL BNF, page 341ff

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

SingleStringJDOQL: 
	selectClause=SelectClause
	fromClause=FromClause
	(whereClause=WhereClause)?
	(variablesClause=VariablesClause)?
	(parametersClause=ParametersClause)?
	(importClause=ImportClause)?
	(groupByClause=GroupByClause)?
	(orderByClause=OrderByClause)?
	(rangeClause=RangeClause)?
;

Subquery:
	selectClause=SubquerySelectClause
	fromClause=SubqueryFromClause
	(whereClause=WhereClause)?
	(variablesClause=VariablesClause)?
	(parametersClause=ParametersClause)?
	(importClause=ImportClause)?
;

SelectClause:
	{SelectClause} 'SELECT' (isUnique?='UNIQUE')? (resultClause=ResultClause)? (intoClause=IntoClause)?
;

SubquerySelectClause:
	{SelectClause} 'SELECT' (isUnique?='UNIQUE')? (resultClause=SubqueryResultClause)? (intoClause=IntoClause)?
;

ResultClause:
	(isDistinct?='DISTINCT')? resultSpecs+=ResultSpec (',' resultSpecs+=ResultSpec)* ','?
;

SubqueryResultClause:
	(isDistinct?='DISTINCT')? resultExpression=ConditionalOrExpression ','?
;

IntoClause:
	'INTO' resultClassName=ClassOrInterfaceName
;

ResultSpec:
	ConditionalOrExpression (resultNaming=ResultNaming)?
;

ResultNaming:
	'AS' identifier=ID
;

FromClause:
	'FROM' candidateClassName=CandidateClassName (isExcludeSubclasses?='EXCLUDE' 'SUBCLASSES')?
;

SubqueryFromClause:
	// The parser cannot differentiate between a candidate-class and a field-access. The only reason
	// why we have to add the field-access-expression separately is that "this" otherwise is a key-word deemed
	// at the wrong location. Hence we add it now explicitely to the right location ;-) Marco :-)
	'FROM' ('this''.'fieldAccessExpression=FieldAccessExpression | candidateClassName=CandidateClassName)
	(alias=Alias)? (isExcludeSubclasses?='EXCLUDE' 'SUBCLASSES')?
;

Alias:
	'AS'? identifier=ID // in contrast to a ResultNaming, the 'AS' is optional here.
;

WhereClause:
	'WHERE' filter=ConditionalOrExpression
;

VariablesClause:
	'VARIABLES' variableDeclarations+=VariableDeclaration (';' variableDeclarations+=VariableDeclaration)* ';'?
;

VariableDeclaration:
	type=Type variableName=VariableName
;

VariableName: ID;

ParametersClause:
	'PARAMETERS' parameterDeclarations+=ParameterDeclaration (',' parameterDeclarations+=ParameterDeclaration)* ','?
;

ParameterDeclaration:
	type=Type declaredParameterName=DeclaredParameterName
;

DeclaredParameterName: ParameterName;

ParameterName: ID;

ImportClause:
	importDeclarations+=ImportDeclaration (';' importDeclarations+=ImportDeclaration)* ';'?
;

ImportDeclaration:
	'import' QualifiedIdentifier
;

GroupByClause:
	'GROUP' 'BY' grouping+=ConditionalOrExpression (',' grouping+=ConditionalOrExpression)* ','? (havingClause=HavingClause)?
;

HavingClause:
	'HAVING' having=ConditionalOrExpression
;

OrderByClause:
	'ORDER' 'BY' ordering+=OrderBySpec (',' ordering+=OrderBySpec)* ','?
;

OrderBySpec:
	ConditionalOrExpression direction=OrderByDirection
;

enum OrderByDirection:
	asc='ASC' | ascending='ASCENDING' |
	desc='DESC' | descending='DESCENDING'
;

RangeClause:
	'RANGE' start=ConditionalOrExpression ',' end=ConditionalOrExpression
;

ConditionalOrExpression returns Expression:
	ConditionalAndExpression ({ConditionalOrExpression.left=current} '||' right=ConditionalAndExpression)*
;

ConditionalAndExpression returns Expression:
	SimpleOrExpression ({ConditionalAndExpression.left=current} '&&' right=SimpleOrExpression)*
;

SimpleOrExpression returns Expression:
	SimpleAndExpression ({SimpleOrExpression.left=current} '|' right=SimpleAndExpression)*
;

SimpleAndExpression returns Expression:
	ComparisonOperatorExpression ({SimpleAndExpression.left=current} '&' right=ComparisonOperatorExpression)*
;

ComparisonOperatorExpression returns Expression:
	AdditionExpression ({ComparisonOperatorExpression.left=current} operator=ComparisonOperator right=AdditionExpression)*
;

AdditionExpression returns Expression:
	MultiplicationExpression ({AdditionExpression.left=current} operator=AdditionOperator right=MultiplicationExpression)*
;

MultiplicationExpression returns Expression:
	UnaryExpression ({MultiplicationExpression.left=current} operator=MultiplicationOperator right=UnaryExpression)*
;

UnaryExpression returns Expression:
	'(' castType=Type ')' right=FieldAccessExpression |
	(unaryOperator=UnaryOperator)? right=FieldAccessExpression
;

FieldAccessExpression returns Expression:
	StaticMethodExpression |
	ParameterOrFieldOrMethodExpression ({FieldAccessExpression.left=current} '.' right=FieldOrMethodExpression)*
;

ParameterOrFieldOrMethodExpression returns Expression:
	literal=Literal |
	this='this' |
//	declaredParameterName=[DeclaredParameterName] |
	id=ID |
	':' parameterName=ParameterName |
	ParenthesesExpression |
	method=MethodExpression
;

FieldOrMethodExpression returns Expression:
	literal=Literal |
	this='this' |
	id=ID |
	ParenthesesExpression |
	method=MethodExpression
;

StaticMethodExpression returns Expression:
	{Expression} 'Math.abs' '(' number=ConditionalOrExpression ')' |
	{Expression} 'Math.sqrt' '(' number=ConditionalOrExpression ')' |
	{Expression} 'Math.cos' '(' number=ConditionalOrExpression ')' |
	{Expression} 'Math.sin' '(' number=ConditionalOrExpression ')' |
	{Expression} 'Math.tan' '(' number=ConditionalOrExpression ')' |
	{Expression} 'Math.acos' '(' number=ConditionalOrExpression ')' |
	{Expression} 'Math.asin' '(' number=ConditionalOrExpression ')' |
	{Expression} 'Math.atan' '(' number=ConditionalOrExpression ')' |
	{Expression} 'Math.ceil' '(' number=ConditionalOrExpression ')' |
	{Expression} 'Math.exp' '(' number=ConditionalOrExpression ')' |
	{Expression} 'Math.floor' '(' number=ConditionalOrExpression ')' |
	{Expression} 'Math.log' '(' number=ConditionalOrExpression ')' |

	{Expression} 'java.lang.Math.abs' '(' number=ConditionalOrExpression ')' |
	{Expression} 'java.lang.Math.sqrt' '(' number=ConditionalOrExpression ')' |
	{Expression} 'java.lang.Math.cos' '(' number=ConditionalOrExpression ')' |
	{Expression} 'java.lang.Math.sin' '(' number=ConditionalOrExpression ')' |
	{Expression} 'java.lang.Math.tan' '(' number=ConditionalOrExpression ')' |
	{Expression} 'java.lang.Math.acos' '(' number=ConditionalOrExpression ')' |
	{Expression} 'java.lang.Math.asin' '(' number=ConditionalOrExpression ')' |
	{Expression} 'java.lang.Math.atan' '(' number=ConditionalOrExpression ')' |
	{Expression} 'java.lang.Math.ceil' '(' number=ConditionalOrExpression ')' |
	{Expression} 'java.lang.Math.exp' '(' number=ConditionalOrExpression ')' |
	{Expression} 'java.lang.Math.floor' '(' number=ConditionalOrExpression ')' |
	{Expression} 'java.lang.Math.log' '(' number=ConditionalOrExpression ')' |

	{Expression} 'JDOHelper.getObjectId' '(' persistable=ConditionalOrExpression ')' |
	{Expression} 'JDOHelper.getVersion' '(' persistable=ConditionalOrExpression ')' |

	{Expression} 'javax.jdo.JDOHelper.getObjectId' '(' persistable=ConditionalOrExpression ')' |
	{Expression} 'javax.jdo.JDOHelper.getVersion' '(' persistable=ConditionalOrExpression ')' |	

	// Would be cleaner to declare the following aggregate expressions separately, but here works for now.
	// Marco :-)
	{Expression} 'count' '(' (isDistinct?='DISTINCT')? aggregateArgument=ConditionalOrExpression ')' |
	{Expression} 'sum' '(' (isDistinct?='DISTINCT')? aggregateArgument=ConditionalOrExpression ')' |
	{Expression} 'min' '(' aggregateArgument=ConditionalOrExpression ')' |
	{Expression} 'max' '(' aggregateArgument=ConditionalOrExpression ')' |
	{Expression} 'avg' '(' (isDistinct?='DISTINCT')? aggregateArgument=ConditionalOrExpression ')'
;

MethodExpression returns Expression:
	// BEGIN Collection methods
	{Expression} 'contains' '(' element=ConditionalOrExpression ')' |
	{Expression} 'get' '(' arg=ConditionalOrExpression ')' | // arg is the index in case of a List
	{Expression} 'isEmpty' '(' ')' |
	{Expression} 'size' '(' ')' |
	// END Collection methods

	// BEGIN Map methods
	{Expression} 'containsKey' '(' key=ConditionalOrExpression ')' |
	{Expression} 'containsValue' '(' value=ConditionalOrExpression ')' |
//	{Expression} 'isEmpty' '(' ')' | // already declared as Collection method - cannot redeclare
//	{Expression} 'size' '(' ')' | // already declared as Collection method - cannot redeclare
//	{Expression} 'get' '(' arg=ConditionalOrExpression ')' | // arg is the key, but already declared as Collection method - cannot redeclare
	{Expression} 'containsEntry' '(' key=ConditionalOrExpression ',' value=ConditionalOrExpression ')' | 
	// END Map methods
	
	// BEGIN String methods
	{Expression} 'charAt' '(' index=ConditionalOrExpression ')' |
	{Expression} 'endsWith' '(' string=ConditionalOrExpression ')' |
	{Expression} 'equals' '(' string=ConditionalOrExpression ')' |
	{Expression} 'equalsIgnoreCase' '(' string=ConditionalOrExpression ')' |
	{Expression} 'indexOf' '(' string=ConditionalOrExpression (',' fromIndex=ConditionalOrExpression )? ')' |
	{Expression} 'length' '(' ')' |
	{Expression} 'matches' '(' regex=ConditionalOrExpression ')' |
	{Expression} 'replaceAll' '(' regex=ConditionalOrExpression ',' replacement=ConditionalOrExpression ')' |
	{Expression} 'startsWith' '(' string=ConditionalOrExpression ')' |
	{Expression} 'substring' '(' beginIndex=ConditionalOrExpression (',' endIndex=ConditionalOrExpression)? ')' |
	{Expression} 'toLowerCase' '(' ')' |
	{Expression} 'toUpperCase' '(' ')' |
	{Expression} 'trim' '(' ')' |
	// END String methods

	// BEGIN Temporal methods
	{Expression} 'getDay' '(' ')' |
	{Expression} 'getMonth' '(' ')' |
	{Expression} 'getYear' '(' ')' |
	{Expression} 'getHour' '(' ')' |
	{Expression} 'getMinute' '(' ')' |
	{Expression} 'getSecond' '(' ')' |
	// END Temporal methods

	// BEGIN Enum methods
	{Expression} 'ordinal' '(' ')' |
	{Expression} 'toString' '(' ')'
	// END Enum methods
;

ParenthesesExpression returns Expression:
	'(' (ConditionalOrExpression | Subquery) ')'
;

Type:
	PrimitiveType |
	ClassOrInterfaceName
;

PrimitiveType:
	NumericType |
	'boolean'
;

NumericType:
	IntegralType |
	FloatingPointType
;

IntegralType:
	'byte' | 'short' | 'int' | 'long' | 'char'
;

FloatingPointType:
	'float' | 'double'
;

IntegerLiteral:
	INT
;                                 

StringLiteral:
	STRING
;                                         

BooleanLiteral:
	'true' | 'false'
;

NullLiteral:
	'null'
;

Literal:
	IntegerLiteral |
	BooleanLiteral |
	StringLiteral |
	NullLiteral
;

QualifiedIdentifier:
	// BEGIN workaround
	// without this, I get error markers when casting sth. to a class in one of these packages
//	'java.'ID ('.'ID)* |
//	'java'ID ('.'ID)* |
//	'java.lang.'ID ('.'ID)* |
//	'java'ID'.lang'ID ('.'ID)* |
//	'javax.jdo'ID ('.'ID)* |
//	'javax.jdo.'ID ('.'ID)* |
//	'javax'ID'.jdo'ID ('.'ID)* |
	// the above DOES NOT WORK :-((( Have to look for another solution!
	// for now, at least listing the most common	 from these packages explicitely (this works)...
	'java.lang.Boolean' |
	'java.lang.Byte' |
	'java.lang.Character' |
	'java.lang.Double' |
	'java.lang.Float' |
	'java.lang.Integer' |
	'java.lang.Long' |
	'java.lang.Short' |
	'java.lang.String' |
	'java.' ID ('.'ID)* | // for java.util.Map et al.
	'javax.' ID ('.'ID)* | // for javax.**
	// END workaround
	ID ('.'ID)*
;

CandidateClassName:
	QualifiedIdentifier
;

ClassOrInterfaceName:
	QualifiedIdentifier
;

enum UnaryOperator: 
	positive='+' |
	negative='-' |
	bitwiseNot='~' |
	logicalNot='!'
;

enum AdditionOperator:
	add='+' |
	subtract='-'
;

enum MultiplicationOperator:
	multiply='*' |
	divide='/' |
	modulo='%'
;

enum ComparisonOperator:
	lessThen='<' | 
	greaterThen='>' | 
	lessEqual='<=' | 
	greaterEqual='>=' | 
	equal='==' | 
	notEqual='!=' |
	instanceof='instanceof'
;
